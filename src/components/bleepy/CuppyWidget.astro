---
import WidgetLayout from '../widget/WidgetLayout.astro'

interface Props {
  class?: string
  style?: string
  pageMascotContext?: string
}

const className = Astro.props.class
const style = Astro.props.style
const pageMascotContext = Astro.props.pageMascotContext || ''
console.log(`CUPPYWIDGET.ASTRO (Server): Prop pageMascotContext received:`, pageMascotContext);
---

<WidgetLayout 
  name="Cuppy Assistant" 
  id="cuppy-widget" 
  isCollapsed={false}
  class={className} 
  style={style}
>
  <div id="sidebar-cuppy-container" class="sidebar-mascot-container" data-page-context={pageMascotContext}>
    <!-- Horizontal layout: Mascot on left, speech area on right -->
    <div class="sidebar-mascot-layout">
      <!-- Mascot Visual Area (Left side) -->
      <div class="sidebar-mascot-wrapper">
        <div id="sidebar-mascot-visual-area" class="sidebar-mascot-visual">
          <img id="sidebar-mascot-image-display" src="" alt="Cuppy Assistant" style="max-width: 100%; max-height: 100%; object-fit: contain; display: none;" />
          <!-- SVG content will be injected here if mascot is SVG type -->
        </div>
      </div>

      <!-- Speech Area (Right side) -->
      <div class="sidebar-speech-area">
        <!-- Speech Bubble (contained within speech area) -->
        <div id="sidebar-mascot-speech-bubble" class="sidebar-speech-bubble">
          <p id="sidebar-mascot-speech-text"></p>
        </div>
      </div>
    </div>

    <!-- Chat Input UI -->
    <div id="sidebar-mascot-chat-ui" class="sidebar-chat-ui">
      <input type="text" id="sidebar-mascot-chat-input" placeholder="Ask Cuppy..." disabled>
      <button id="sidebar-mascot-chat-send" disabled>Send</button>
    </div>
  </div>
</WidgetLayout>

<style>
  @import '../bleepy/mascotAnimations.css';

  :root {
    /* Speech bubble variables adapted for sidebar */
    --sidebar-speech-bubble-max-width: 10rem;
    --sidebar-speech-bubble-padding: 0.5rem 0.7rem;
    --sidebar-speech-bubble-radius: 0.75rem;
    --sidebar-speech-bubble-tail-size: 0.6rem;
    
    /* Fallback for --hue if not defined globally */
    --hue: 270;
  }

  /* Sidebar mascot container */
  .sidebar-mascot-container {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    font-family: 'Comic Sans MS', 'Chalkboard SE', 'Marker Felt', sans-serif;
    position: relative;
    min-height: 10rem; /* Adjusted base height as per user feedback */
  }

  /* Horizontal layout for mascot and speech area */
  .sidebar-mascot-layout {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    min-height: 6rem;
    position: relative;
  }

  /* Mascot wrapper (left side) */
  .sidebar-mascot-wrapper {
    flex-shrink: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
  }

  /* Mascot visual area - STATIC SIZE */
  .sidebar-mascot-visual {
    width: 4rem;
    height: 4rem;
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: transform 0.2s ease;
  }

  .sidebar-mascot-visual:hover {
    transform: scale(1.05);
  }

  .sidebar-mascot-visual svg {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  /* Speech area (right side) */
  .sidebar-speech-area {
    flex-grow: 1;
    position: relative;
    /* min-height: 4rem; Removed to allow speech area to adapt */
    height: auto; /* Allow it to grow with speech bubble */
    display: flex;
    align-items: center;
  }

  /* Speech Bubble Styling - contained within speech area */
  .sidebar-speech-bubble {
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: auto;
    min-width: 6rem;
    max-width: 100%;
    height: auto;
    padding: var(--sidebar-speech-bubble-padding);
    
    /* Theme-aware colors using CSS variables */
    --speech-bubble-bg: oklch(0.98 0.01 var(--hue));
    --speech-bubble-border: oklch(0.85 0.01 var(--hue));
    background-color: var(--speech-bubble-bg);
    border: 1px solid var(--speech-bubble-border);
    border-radius: var(--sidebar-speech-bubble-radius);
    
    font-family: 'Comic Sans MS', 'Chalkboard SE', 'Marker Felt', sans-serif;
    font-size: 0.75rem;
    color: oklch(0.15 0.01 var(--hue));
    text-align: left;
    z-index: 1001;
    opacity: 0;
    pointer-events: none;
    box-shadow: 0 2px 5px rgba(0,0,0,0.15);
    overflow-wrap: break-word;
    line-height: 1.3;
    max-height: 5rem; /* Initial max height for a short message */
    overflow: hidden; /* Important for max-height transition */
    transition: opacity 0.3s ease-out, transform 0.3s ease-out, max-height 0.5s ease-in-out;
  }

  /* Speech bubble tail pointing left (towards mascot) */
  .sidebar-speech-bubble::after, 
  .sidebar-speech-bubble::before {
    content: '';
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 0;
    height: 0;
    border-style: solid;
  }

  /* Border part of the tail */
  .sidebar-speech-bubble::after {
    right: 100%;
    border-width: var(--sidebar-speech-bubble-tail-size) var(--sidebar-speech-bubble-tail-size) var(--sidebar-speech-bubble-tail-size) 0;
    border-color: transparent var(--speech-bubble-border) transparent transparent;
  }

  /* Background part of the tail */
  .sidebar-speech-bubble::before {
    right: calc(100% - 2px);
    border-width: calc(var(--sidebar-speech-bubble-tail-size) - 2px) calc(var(--sidebar-speech-bubble-tail-size) - 2px) calc(var(--sidebar-speech-bubble-tail-size) - 2px) 0;
    border-color: transparent var(--speech-bubble-bg) transparent transparent;
  }

  #sidebar-mascot-speech-text {
    margin: 0;
    padding: 0;
  }

  /* Speech bubble animations - same as original */
  .sidebar-speech-bubble.appearing {
    animation: speech-appear 0.8s ease-out forwards;
  }

  .sidebar-speech-bubble.fading {
    animation: speech-fade 1.2s ease-in forwards;
  }

  .sidebar-speech-bubble.quick-fading {
    animation: speech-quick-fade 0.2s ease-in forwards;
  }

  @keyframes speech-appear {
    from { opacity: 0; transform: translateY(-50%) translateX(10px); }
    to { opacity: 1; transform: translateY(-50%) translateX(0); pointer-events: auto; }
  }

  @keyframes speech-fade {
    from { opacity: 1; transform: translateY(-50%) translateX(0); }
    to { opacity: 0; transform: translateY(-50%) translateX(-10px); pointer-events: none; }
  }

  @keyframes speech-quick-fade {
    from { opacity: 1; }
    to { opacity: 0; pointer-events: none; }
  }

  /* Chat UI styling - RESTORED GOOD STYLING */
  .sidebar-chat-ui {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background-color: oklch(0.95 0.01 var(--hue));
    border: 1px solid oklch(0.85 0.01 var(--hue));
    padding: 0.4rem;
    border-radius: 0.5rem;
  }

  #sidebar-mascot-chat-input {
    flex-grow: 1;
    min-width: 0;
    padding: 0.4rem 0.6rem;
    border-radius: 0.4rem;
    font-family: 'Comic Sans MS', 'Chalkboard SE', 'Marker Felt', sans-serif;
    font-size: 0.75rem;
    background-color: oklch(1 0 0);
    border: 1px solid oklch(0.8 0.01 var(--hue));
    color: oklch(0.15 0.01 var(--hue));
    transition: border-color 0.2s ease, box-shadow 0.2s ease;
  }

  #sidebar-mascot-chat-input::placeholder {
    color: oklch(0.55 0.01 var(--hue));
    opacity: 1;
  }

  #sidebar-mascot-chat-input:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 2px color-mix(in srgb, var(--primary) 30%, transparent);
  }

  #sidebar-mascot-chat-send {
    flex-shrink: 0;
    padding: 0.4rem 0.8rem;
    background-color: var(--primary);
    color: white;
    border: none;
    border-radius: 0.4rem;
    cursor: pointer;
    font-family: 'Comic Sans MS', 'Chalkboard SE', 'Marker Felt', sans-serif;
    font-size: 0.75rem;
    transition: background-color 0.2s ease-in-out;
  }

  #sidebar-mascot-chat-send:hover:not(:disabled) {
    background-color: var(--primary-hover);
  }

  #sidebar-mascot-chat-send:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .sidebar-speech-bubble {
      color: oklch(0.85 0.01 var(--hue));
      --speech-bubble-bg: oklch(0.2 0.01 var(--hue));
      --speech-bubble-border: oklch(0.35 0.01 var(--hue));
    }

    .sidebar-chat-ui {
      background-color: oklch(0.25 0.01 var(--hue));
      border-color: oklch(0.4 0.01 var(--hue));
    }

    #sidebar-mascot-chat-input {
      background-color: oklch(0.15 0.01 var(--hue));
      border-color: oklch(0.35 0.01 var(--hue));
      color: oklch(0.85 0.01 var(--hue));
    }

    #sidebar-mascot-chat-input::placeholder {
      color: oklch(0.50 0.01 var(--hue));
    }
  }

  /* Mascot animations - reuse from original */
  #sidebar-mascot-image-display.wiggling {
    animation: mascotWobble 0.6s ease-in-out;
  }

  .sidebar-mascot-visual svg.jiggle {
    animation: jiggle 0.5s ease-in-out;
  }

  /* Responsive adjustments for smaller widgets */
  @media (max-width: 1024px) {
    .sidebar-mascot-visual {
      width: 3.5rem;
      height: 3.5rem;
    }
    
    .sidebar-speech-bubble {
      font-size: 0.7rem;
      min-width: 5rem;
    }
  }
</style>

<script>
  import { 
    cuppyMascotData, 
    cuppyPersonaString, 
    cuppyRandomDialogues,
    cuppyGreetingMessages,
    currentAiProvider 
  } from '../../config/bleepyConfig.ts';

  interface ChatMessage {
    role: 'user' | 'assistant';
    content: string;
  }

  class SidebarCuppyWidget {
    private containerElement: HTMLElement | null = null;
    private mascotVisualArea: HTMLElement | null = null;
    private mascotImageDisplay: HTMLImageElement | null = null;
    private speechBubble: HTMLElement | null = null;
    private speechText: HTMLElement | null = null;
    private chatInputElement: HTMLInputElement | null = null;
    private chatSendButton: HTMLElement | null = null;
    
    private activeMascot: any = null;
    private conversationHistory: ChatMessage[] = [];
    private proactiveDialogueTimer: ReturnType<typeof setTimeout> | undefined;
    private randomExpressionTimeout: ReturnType<typeof setTimeout> | undefined;
    private mouthOpenTimeout: ReturnType<typeof setTimeout> | undefined;
    private speechLingerTimeout: ReturnType<typeof setTimeout> | undefined;
    private speechFadeCleanupListener: ((event: AnimationEvent) => void) | undefined;
    private specialAnimationInterval: ReturnType<typeof setInterval> | undefined;
    private isInitialized = false;
    private pageContextFromData: string = '';
    private originalPlaceholder: string = '';

    // For sequential speech
    private speechQueue: string[] = [];
    private isSpeaking: boolean = false;
    private readonly speechChunkDelay: number = 600; // ms delay between speech bubbles (reduced from 800)

    constructor() {
      this.init();
    }

    private init() {
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => this.initializeWidget());
      } else {
        this.initializeWidget();
      }

      // Also listen for Astro page transitions
      document.addEventListener('astro:page-load', () => {
        if (!this.isInitialized) {
          this.initializeWidget();
        }
      });
    }

    private initializeWidget() {
      this.containerElement = document.getElementById('sidebar-cuppy-container');
      if (!this.containerElement) return;

      this.mascotVisualArea = document.getElementById('sidebar-mascot-visual-area');
      this.mascotImageDisplay = document.getElementById('sidebar-mascot-image-display') as HTMLImageElement;
      this.speechBubble = document.getElementById('sidebar-mascot-speech-bubble');
      this.speechText = document.getElementById('sidebar-mascot-speech-text');
      this.chatInputElement = document.getElementById('sidebar-mascot-chat-input') as HTMLInputElement;
      this.chatSendButton = document.getElementById('sidebar-mascot-chat-send');

      if (!this.mascotVisualArea || !this.speechBubble || !this.speechText || !this.chatInputElement || !this.chatSendButton) {
        console.error('Sidebar Cuppy Widget: Required elements not found');
        return;
      }

      // Get page context
      this.pageContextFromData = this.containerElement.dataset.pageContext || '';
      console.log('CuppyWidget Client: pageContextFromData from data attribute:', this.pageContextFromData);

      // Store original placeholder
      this.originalPlaceholder = this.chatInputElement.placeholder;

      // Load mascot
      this.loadMascot();

      // Setup event listeners
      this.setupEventListeners();

      // Enable interactions
      this.enableWidget();

      // Show initial greeting
      this.showInitialGreeting();

      // Start proactive dialogue timer  
      this.startProactiveDialogueTimer();

      // Start animation intervals (FIXED ANIMATIONS)
      this.specialAnimationInterval = setInterval(() => this.tryPlayRandomVisualEffect(), 18000 + Math.random() * 5000);

      // Debug: Log available messages
      console.log('Available greeting messages:', cuppyGreetingMessages);
      console.log('Available random dialogues:', cuppyRandomDialogues);

      this.isInitialized = true;
      console.log('Sidebar Cuppy Widget initialized successfully');
    }

    private loadMascot() {
      if (!this.mascotVisualArea || !this.mascotImageDisplay) return;

      this.activeMascot = cuppyMascotData;
      
      // Clear previous content
      this.mascotVisualArea.innerHTML = '';
      
      if (this.activeMascot.type === "image-set") {
        if (this.activeMascot.images && this.activeMascot.images.standard) {
          this.mascotImageDisplay.src = this.activeMascot.images.standard;
          this.mascotImageDisplay.style.display = 'block';
          this.mascotVisualArea.appendChild(this.mascotImageDisplay);
        }
      } else if (this.activeMascot.type === "svg") {
        this.mascotImageDisplay.style.display = 'none';
        if (this.activeMascot.svgHTML) {
          this.mascotVisualArea.innerHTML = this.activeMascot.svgHTML;
        }
      }

      // Apply CSS classes if specified
      if (this.activeMascot.cssClasses) {
        this.mascotVisualArea.classList.add(this.activeMascot.cssClasses);
      }
    }

    private setupEventListeners() {
      // Mascot click to activate
      this.mascotVisualArea?.addEventListener('click', () => {
        this.chatInputElement?.focus();
        this.playMascotAnimation();
      });

      // Send button
      this.chatSendButton?.addEventListener('click', () => {
        this.handleSendMessage();
      });

      // Enter key in input
      this.chatInputElement?.addEventListener('keypress', (event) => {
        if (event.key === 'Enter' && !event.shiftKey) {
          event.preventDefault();
          this.handleSendMessage();
        }
      });

      // Input focus/blur for better UX
      this.chatInputElement?.addEventListener('focus', () => {
        this.resetProactiveDialogueTimer();
      });
    }

    private enableWidget() {
      if (this.chatInputElement && this.chatSendButton) {
        this.chatInputElement.disabled = false;
        this.chatSendButton.removeAttribute('disabled');
      }
    }

    private showInitialGreeting() {
      setTimeout(() => {
        console.log('Showing initial greeting, available greetings:', cuppyGreetingMessages?.length);
        if (cuppyGreetingMessages && cuppyGreetingMessages.length > 0) {
          const randomGreeting = cuppyGreetingMessages[Math.floor(Math.random() * cuppyGreetingMessages.length)];
          console.log('Selected greeting:', randomGreeting);
          this.startMultipartSpeech(randomGreeting); // Use startMultipartSpeech
        } else {
          console.log('No greeting messages available, using fallback');
          this.startMultipartSpeech("Hi! Click me and ask about cooking!"); // Use startMultipartSpeech
        }
      }, 1000);
    }

    // Speech bubble system RESTORED WORKING VERSION
    private displayEphemeralSpeech(textChunk: string, isLastChunk: boolean = true) {
      // Mascot animation
      if (this.activeMascot && this.mascotImageDisplay) {
        if (this.activeMascot.type === "image-set") {
          if (this.activeMascot.images.openmouth) {
            clearTimeout(this.mouthOpenTimeout);
            this.mascotImageDisplay.src = this.activeMascot.images.openmouth;
            this.mouthOpenTimeout = setTimeout(() => {
              if (this.activeMascot && this.activeMascot.images.standard && this.mascotImageDisplay) {
                this.mascotImageDisplay.src = this.activeMascot.images.standard;
              }
            }, 700);
          }
          if (!this.mascotImageDisplay.classList.contains('wiggling')) {
            this.mascotImageDisplay.classList.remove('jiggle');
            void this.mascotImageDisplay.offsetWidth;
            this.mascotImageDisplay.classList.add('jiggle');
            setTimeout(() => { 
              if (this.mascotImageDisplay) this.mascotImageDisplay.classList.remove('jiggle'); 
            }, 500);
          }
        } else { 
          const svgElement = this.mascotVisualArea?.querySelector('svg');
          if (svgElement) {
            svgElement.classList.remove('jiggle');
            void (svgElement as unknown as HTMLElement).offsetWidth;
            svgElement.classList.add('jiggle');
            setTimeout(() => { svgElement.classList.remove('jiggle'); }, 500);
          }
        }
      }

      if (!this.speechBubble || !this.speechText) {
        console.error('Speech bubble elements not found');
        return;
      }

      // Clear previous speech and animations
      clearTimeout(this.speechLingerTimeout);
      this.speechLingerTimeout = undefined;
      if (this.speechFadeCleanupListener) {
        this.speechBubble.removeEventListener('animationend', this.speechFadeCleanupListener);
        this.speechFadeCleanupListener = undefined;
      }
      
      // Reset bubble state
      this.speechBubble.className = 'sidebar-speech-bubble'; // Applies initial CSS (e.g., max-height: 5rem)
      this.speechBubble.style.opacity = '0'; // Start transparent for the animation
      // this.speechBubble.style.transform = 'translateY(-50%) translateX(0)'; // Base transform from CSS
      this.speechBubble.style.pointerEvents = 'none'; // Base from CSS
      this.speechText.textContent = '';

      // Set new text
      this.speechText.textContent = textChunk;
      
      // Speech Bubble Height Calculation (simplified for now, will be part of chunking)
      // The speech bubble already has max-height: 5rem and overflow: hidden in CSS.
      // The transition on max-height will handle the animation if content changes.
      // We just need to ensure it can calculate its scrollHeight if needed.
      if (this.speechBubble) {
          this.speechBubble.style.maxHeight = 'none'; // Allow it to measure its full content
          const requiredHeight = this.speechBubble.scrollHeight;
          // If content is small, it will be less than 5rem. If large, it will be clipped by CSS's 5rem.
          // For sequential bubbles, each chunk should ideally fit within this 5rem.
          // The animation will occur due to the CSS transition on max-height.
          this.speechBubble.style.maxHeight = requiredHeight + 'px';
          // To ensure it doesn't exceed the visual limit if a single chunk is still too big:
          // this.speechBubble.style.maxHeight = Math.min(requiredHeight, parseFloat(getComputedStyle(this.speechBubble).getPropertyValue('--sidebar-speech-bubble-max-height')) * 16 /* approx rem to px */ ) + 'px';
          // For now, let's rely on the chunking to be small enough for the 5rem CSS max-height.
      }
      
      // Force reflow before adding animation class
      void this.speechBubble?.offsetWidth;
      
      // Start appear animation
      this.speechBubble?.classList.add('appearing');

      const onAppearAnimationEnd = (event: AnimationEvent) => {
        if (event.animationName !== 'speech-appear') return;
        
        const words = textChunk.split(/\s+/).length; // Use textChunk here
        let currentLingerDuration = (words / 3.5) * 1000 + 1500; // Faster rate, shorter base
        currentLingerDuration = Math.max(3000, Math.min(currentLingerDuration, 4500)); // Shorter max linger
        
        this.speechLingerTimeout = setTimeout(() => {
          if (!this.speechBubble || !this.speechText) return;
          
          // Speech bubble will collapse due to CSS max-height: 5rem and transition
          this.speechBubble.classList.remove('appearing');
          this.speechBubble.classList.add('fading');
          
          this.speechFadeCleanupListener = (fadeEvent: AnimationEvent) => {
            if (fadeEvent.animationName !== 'speech-fade') return;
            if (!this.speechBubble || !this.speechText) return;
            this.speechBubble.classList.remove('fading');
            this.speechText.textContent = '';
            this.speechBubble.style.opacity = '0';
            this.speechBubble.style.pointerEvents = 'none';
            this.speechBubble.style.maxHeight = '5rem';
            this.speechFadeCleanupListener = undefined;

            if (!isLastChunk) {
              setTimeout(() => {
                this._speakNextChunk();
              }, this.speechChunkDelay);
            } else {
              this.isSpeaking = false; // All chunks done
            }
          };
          this.speechBubble.addEventListener('animationend', this.speechFadeCleanupListener as EventListener, { once: true });
        }, currentLingerDuration);
      };
      
      this.speechBubble?.addEventListener('animationend', onAppearAnimationEnd as EventListener, { once: true });
    }

    private async handleSendMessage() {
      if (!this.chatInputElement || !this.chatInputElement.value.trim()) return;

      const userMessage = this.chatInputElement.value.trim();

      // Clear input and show thinking state
      this.chatInputElement.value = '';
      this.chatInputElement.placeholder = 'Thinking...';
      this.chatInputElement.disabled = true;
      this.chatSendButton?.setAttribute('disabled', '');

      // Reset proactive timer
      this.resetProactiveDialogueTimer();

      try {
        const pageContextForPayload = this.pageContextFromData && this.pageContextFromData.trim() !== ''
          ? this.pageContextFromData
          : "Default context: No specific page information available.";

        const payload = {
          message: userMessage,
          persona: cuppyPersonaString,
          history: [...this.conversationHistory],
          provider: currentAiProvider,
          pageContext: pageContextForPayload
        };

        const response = await fetch('https://my-mascot-worker-service.greggles.workers.dev', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });

        this.conversationHistory.push({ role: 'user', content: userMessage });

        if (response.ok) {
          const data = await response.json();
          const cuppyReply = data.reply || "I'm not sure how to respond to that.";
          
          this.conversationHistory.push({ role: 'assistant', content: cuppyReply });
          this.startMultipartSpeech(cuppyReply); // Use startMultipartSpeech
        } else {
          console.error('API response not ok:', response.status, response.statusText);
          const errorMessage = 'Sorry, I encountered an error. Please try again.';
          this.conversationHistory.push({ role: 'assistant', content: errorMessage });
          this.startMultipartSpeech(errorMessage); // Use startMultipartSpeech
        }
      } catch (error) {
        console.error('Cuppy Widget Error:', error);
        const connectErrorMessage = 'Could not connect to the mascot.';
        this.conversationHistory.push({ role: 'assistant', content: connectErrorMessage });
        this.startMultipartSpeech(connectErrorMessage); // Use startMultipartSpeech
      } finally {
        // Re-enable input
        if (this.chatInputElement) {
          this.chatInputElement.placeholder = this.originalPlaceholder || "Ask Cuppy...";
          this.chatInputElement.disabled = false;
          this.chatInputElement.focus();
        }
        this.chatSendButton?.removeAttribute('disabled');
      }
    }

    private playMascotAnimation() {
      if (this.activeMascot?.type === "image-set" && this.mascotImageDisplay) {
        this.mascotImageDisplay.classList.add('wiggling');
        setTimeout(() => {
          this.mascotImageDisplay?.classList.remove('wiggling');
        }, 600);
      }
    }

    private playRandomImageExpression() {
      if (!this.activeMascot || this.activeMascot.type !== "image-set" || !this.mascotImageDisplay || !this.activeMascot.images) {
        return;
      }

      const expressionKeys = Object.keys(this.activeMascot.images).filter(
        key => key !== "standard" && key !== "openmouth"
      );

      if (expressionKeys.length === 0) return;

      const randomKey = expressionKeys[Math.floor(Math.random() * expressionKeys.length)];
      this.mascotImageDisplay.src = this.activeMascot.images[randomKey];

      clearTimeout(this.randomExpressionTimeout);
      this.randomExpressionTimeout = setTimeout(() => {
        if (this.activeMascot?.images?.standard && this.mascotImageDisplay) {
          this.mascotImageDisplay.src = this.activeMascot.images.standard;
        }
      }, Math.random() * 500 + 1000);
    }

    private tryPlayRandomVisualEffect() {
      if (!this.activeMascot) return;
      
      if (this.activeMascot.type === "image-set") {
        const mascotImageEl = this.mascotImageDisplay;
        if (!mascotImageEl) return;
        const randomNumber = Math.random();
        if (randomNumber < 0.4) {
          mascotImageEl.classList.add('wiggling');
          mascotImageEl.addEventListener('animationend', () => {
            mascotImageEl.classList.remove('wiggling');
          }, { once: true });
        } else if (randomNumber < 0.8) {
          this.playRandomImageExpression();
        }
      }
    }

    private triggerProactiveDialogue() {
      if (this.conversationHistory.length > 0) return; // Don't interrupt active conversations

      console.log('Triggering proactive dialogue, available messages:', cuppyRandomDialogues?.length);
      
      if (cuppyRandomDialogues && cuppyRandomDialogues.length > 0) {
        const randomDialogue = cuppyRandomDialogues[Math.floor(Math.random() * cuppyRandomDialogues.length)];
        console.log('Selected random dialogue:', randomDialogue);
        this.startMultipartSpeech(randomDialogue); // Use startMultipartSpeech
      } else {
        console.log('No random dialogues available, using fallback');
        this.startMultipartSpeech("..."); // Use startMultipartSpeech
      }

      this.startProactiveDialogueTimer();
    }

    private startProactiveDialogueTimer() {
      clearTimeout(this.proactiveDialogueTimer);
      const randomDelay = Math.random() * (30000 - 20000) + 20000; // 20-30 seconds for testing
      console.log('Starting proactive dialogue timer for', randomDelay, 'ms');
      this.proactiveDialogueTimer = setTimeout(() => {
        this.triggerProactiveDialogue();
      }, randomDelay);
    }

    private resetProactiveDialogueTimer() {
      this.startProactiveDialogueTimer();
    }

    private _chunkText(fullText: string, wordsPerChunk: number = 15): string[] {
      const words = fullText.split(/\s+/);
      const chunks: string[] = [];
      if (words.length === 0) return [""]; // Handle empty string

      for (let i = 0; i < words.length; i += wordsPerChunk) {
        chunks.push(words.slice(i, i + wordsPerChunk).join(" "));
      }
      return chunks;
    }

    private _speakNextChunk(): void {
      if (this.speechQueue.length === 0) {
        this.isSpeaking = false;
        return;
      }

      const chunk = this.speechQueue.shift()!; // Assert non-null as we checked length
      const isLastChunk = this.speechQueue.length === 0;
      
      // Call the modified displayEphemeralSpeech
      // The actual display logic will be refactored into displayEphemeralSpeech
      this.displayEphemeralSpeech(chunk, isLastChunk);
    }

    private startMultipartSpeech(fullText: string): void {
      if (this.isSpeaking) { // If already speaking, clear previous queue and restart
        clearTimeout(this.speechLingerTimeout); // Clear any existing linger for the current bubble
        this.speechQueue = []; // Empty the queue
        // Potentially force-hide the current bubble immediately if desired
        if (this.speechBubble) {
          this.speechBubble.classList.remove('appearing', 'fading');
          this.speechBubble.style.opacity = '0';
          this.speechBubble.style.pointerEvents = 'none';
          if(this.speechText) this.speechText.textContent = '';
        }
      }

      this.isSpeaking = true;
      this.speechQueue = this._chunkText(fullText);
      this._speakNextChunk();
    }
  }

  // Initialize the widget
  new SidebarCuppyWidget();

  // Hide original bottom-right Bleepy
  const originalBleepy = document.querySelector('body > #mascot-container:not(.is-banner-feature)');
  if (originalBleepy) {
    (originalBleepy as HTMLElement).style.display = 'none';
  }
</script>