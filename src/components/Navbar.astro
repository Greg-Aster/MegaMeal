---
import { Icon } from 'astro-icon/components'
import { navBarConfig, siteConfig } from '../config/config'
import { LinkPresets } from '../constants/link-presets'
import type { LinkPreset, NavBarLink } from '../types/config'
import { url } from '../utils/url-utils'
import LightDarkSwitch from './LightDarkSwitch.svelte'
import Search from './Search.svelte'
import AdminNavbar from './svelte/admin/AdminNavbar.svelte'
import DisplaySettings from './widget/DisplaySettings.svelte'
import NavMenuPanel from './widget/NavMenuPanel.astro'

const className = Astro.props.class

const links: NavBarLink[] = navBarConfig.links.map(
  (item: NavBarLink | LinkPreset): NavBarLink => {
    if (typeof item === 'number') {
      return LinkPresets[item]
    }
    return item
  },
)

// Check authentication status from cookies
const isAuthenticated = Astro.cookies.get('isAuthenticated')?.boolean() || false
---

<div id="navbar" class="z-50 onload-animation">
    <div class="absolute h-8 left-0 right-0 -top-8 bg-[var(--card-bg)] transition"></div> <!-- used for onload animation -->
    <div class:list={[
        className,
        "card-base !overflow-visible max-w-[var(--page-width)] h-[4.5rem] !rounded-t-none mx-auto flex items-center justify-between px-4"]}>
        
        <!-- Admin Navbar Component (handles login, settings toggle, etc.) -->
        <AdminNavbar client:load siteTitle={siteConfig.title} />
        
        <!-- Regular Navigation Links (hidden when in admin mode) -->
        <div id="standard-nav" class:list={["hidden md:flex", {"hidden": isAuthenticated}]}>
            {links.map((l) => {
                return l.dropdown ? (
                    <div class="relative group">
                        <a aria-label={l.name} href={l.external ? l.url : url(l.url)} target={l.external ? "_blank" : null}
                          class="btn-plain scale-animation rounded-lg h-11 font-bold px-5 active:scale-95"
                        >
                            <div class="flex items-center">
                                {l.name}
                                {l.external && <Icon name="fa6-solid:arrow-up-right-from-square" class="text-[0.875rem] transition -translate-y-[1px] ml-1 text-black/[0.2] dark:text-white/[0.2]"></Icon>}
                                <Icon name="material-symbols:keyboard-arrow-down-rounded" class="text-[1.25rem] transition ml-1"></Icon>
                            </div>
                        </a>
                        <div class="absolute left-0 mt-1 w-48 rounded-lg shadow-lg bg-[var(--card-bg)] invisible opacity-0 translate-y-2 group-hover:visible group-hover:opacity-100 group-hover:translate-y-0 transition-all duration-200 z-50">
                            <div class="py-1 rounded-lg overflow-hidden">
                                {l.dropdown.map((item) => (
                                    <a href={item.external ? item.url : url(item.url)} target={item.external ? "_blank" : null}
                                       class="block px-4 py-2 text-black/75 dark:text-white/75 hover:bg-[var(--btn-plain-bg-hover)] hover:text-[var(--primary)] transition-colors duration-200"
                                    >
                                        <div class="flex items-center justify-between">
                                            <span>{item.name}</span>
                                            {item.external && <Icon name="fa6-solid:arrow-up-right-from-square" class="text-[0.75rem] transition -translate-y-[1px] ml-1 text-black/[0.2] dark:text-white/[0.2]"></Icon>}
                                        </div>
                                    </a>
                                ))}
                            </div>
                        </div>
                    </div>
                ) : (
                    <a aria-label={l.name} href={l.external ? l.url : url(l.url)} target={l.external ? "_blank" : null}
                      class="btn-plain scale-animation rounded-lg h-11 font-bold px-5 active:scale-95"
                    >
                        <div class="flex items-center">
                            {l.name}
                            {l.external && <Icon name="fa6-solid:arrow-up-right-from-square" class="text-[0.875rem] transition -translate-y-[1px] ml-1 text-black/[0.2] dark:text-white/[0.2]"></Icon>}
                        </div>
                    </a>
                );
            })}
        </div>
        
        <div class="flex">
            <!--<SearchPanel client:load>-->
            <Search client:only="svelte"></Search>
            {!siteConfig.themeColor.fixed && (
                    <button aria-label="Display Settings" class="btn-plain scale-animation rounded-lg h-11 w-11 active:scale-90" id="display-settings-switch">
                        <Icon name="material-symbols:palette-outline" class="text-[1.25rem]"></Icon>
                    </button>
            )}

            
            <!-- ‚≠ê RESTORED: Mascot Controls (Mobile Portrait Only) -->
            <button aria-label="Dismiss Mascot" title="Dismiss Mascot" id="navbar-dismiss-mascot-button" class="btn-plain scale-animation rounded-lg h-11 w-11 active:scale-90 md:!hidden">
                üç¥
            </button>
            <button aria-label="Bring back mascot" title="Bring back mascot" id="navbar-bring-back-mascot-button" class="btn-plain scale-animation rounded-lg h-11 w-11 active:scale-90 md:!hidden" style="display: none;">
                ü•Ñ
            </button>
            
            <!-- Light/Dark Switch -->
            <LightDarkSwitch client:load></LightDarkSwitch>

            <!-- Fullscreen Mode Toggle -->
            <!-- <button aria-label="Toggle Fullscreen Mode" title="Toggle Fullscreen Mode" class="btn-plain scale-animation rounded-lg h-11 w-11 active:scale-90" id="fullscreen-btn">
                <Icon name="fa6-solid:expand" class="fullscreen-icon text-[1.25rem]"></Icon>
                <Icon name="fa6-solid:compress" class="fullscreen-exit-icon text-[1.25rem] hidden"></Icon>
            </button> -->
                        
            <!-- ‚≠ê RESTORED: Mobile Hamburger Menu Button -->
            <button aria-label="Menu" name="Nav Menu" class="btn-plain scale-animation rounded-lg w-11 h-11 active:scale-90 md:!hidden" id="nav-menu-switch">
                <Icon name="material-symbols:menu-rounded" class="text-[1.25rem]"></Icon>
            </button>
        </div>
        
        <NavMenuPanel links={links} isAuthenticated={isAuthenticated}></NavMenuPanel>
        <DisplaySettings client:only="svelte"></DisplaySettings>
    </div>
</div>

<script>
    let dismissMascotBtn: HTMLElement | null = null;
    let bringBackMascotBtn: HTMLElement | null = null;
    
    function switchTheme() {
        if (localStorage.theme === 'dark') {
            document.documentElement.classList.remove('dark');
            localStorage.theme = 'light';
        } else {
            document.documentElement.classList.add('dark');
            localStorage.theme = 'dark';
        }
    }
    
    function loadButtonScript() {
        // Theme switch
        let switchBtn = document.getElementById("scheme-switch");
        if (switchBtn) {
            switchBtn.addEventListener("click", function () {
                switchTheme();
            });
        }
    
        // Display settings button
        let settingBtn = document.getElementById("display-settings-switch");
        if (settingBtn) {
            settingBtn.addEventListener("click", function () {
                let settingPanel = document.getElementById("display-setting");
                if (settingPanel) {
                    settingPanel.classList.toggle("float-panel-closed");
                }
            });
        }
    
        // ‚≠ê RESTORED: Nav menu button functionality
        let menuBtn = document.getElementById("nav-menu-switch");
        if (menuBtn) {
            menuBtn.addEventListener("click", function () {
                let menuPanel = document.getElementById("nav-menu-panel");
                if (menuPanel) {
                    menuPanel.classList.toggle("float-panel-closed");
                }
            });
        }
    
        // Mascot Controls (Bleepy) - PRESERVED EXACTLY AS-IS
         dismissMascotBtn = document.getElementById("navbar-dismiss-mascot-button");
        bringBackMascotBtn = document.getElementById("navbar-bring-back-mascot-button");
    
        if (dismissMascotBtn) {
            dismissMascotBtn.addEventListener("click", function () {
                document.dispatchEvent(new CustomEvent('bleepy:hide'));
            });
        }
    
        if (bringBackMascotBtn) {
            bringBackMascotBtn.addEventListener("click", function () {
                document.dispatchEvent(new CustomEvent('bleepy:show'));
            });
        }
    
        // Initial Button State for Mascot Controls
        if (dismissMascotBtn && bringBackMascotBtn) {
            const mascotDismissed = sessionStorage.getItem('cuppyDismissed') === 'true';
            if (mascotDismissed) {
                dismissMascotBtn.style.display = 'none';
                bringBackMascotBtn.style.display = 'flex';
            } else {
                dismissMascotBtn.style.display = 'flex';
                bringBackMascotBtn.style.display = 'none';
            }
        } 
    
        // UPDATED: Layout-based Fullscreen Mode Toggle Functionality
        initializeFullscreenMode();
    }
    
    /**
     * FIXED: Initialize layout-based fullscreen mode toggle
     */
    function initializeFullscreenMode() {
        const toggleBtn = document.getElementById('fullscreen-btn');
        if (!toggleBtn) return; // Exit if button doesn't exist
        
        const expandIcon = toggleBtn?.querySelector('.fullscreen-icon');
        const compressIcon = toggleBtn?.querySelector('.fullscreen-exit-icon');
        
        // Check saved state and apply it immediately
        const isFullscreen = localStorage.getItem('fullscreenMode') === 'true';
        
        // Apply initial state
        if (isFullscreen) {
            applyFullscreenState();
        } else {
            applyNormalState();
        }
        
        // Toggle handler - immediate layout change
        toggleBtn?.addEventListener('click', () => {
            const currentState = localStorage.getItem('fullscreenMode') === 'true';
            
            if (currentState) {
                disableFullscreenMode();
            } else {
                enableFullscreenMode();
            }
        });
        
        /**
         * Apply fullscreen visual state (layout-based fullscreen)
         */
        function applyFullscreenState() {
            // Add class to force mobile view layout
            document.body.classList.add('force-mobile-view');
            
            // Update button icons
            expandIcon?.classList.add('hidden');
            compressIcon?.classList.remove('hidden');
            
            console.log('Layout fullscreen mode applied');
        }
        
        /**
         * Apply normal state
         */
        function applyNormalState() {
            // Remove fullscreen class
            document.body.classList.remove('force-mobile-view');
            
            // Update button icons
            expandIcon?.classList.remove('hidden');
            compressIcon?.classList.add('hidden');
            
            console.log('Normal layout mode applied');
        }
        
        /**
         * Enable fullscreen mode - immediate layout change
         */
        function enableFullscreenMode() {
            // Save state
            localStorage.setItem('fullscreenMode', 'true');
            
            // Apply layout changes immediately
            applyFullscreenState();
            
            console.log('Layout fullscreen mode enabled');
        }
        
        /**
         * Disable fullscreen mode - immediate layout change
         */
        function disableFullscreenMode() {
            // Save state
            localStorage.setItem('fullscreenMode', 'false');
            
            // Restore normal layout immediately
            applyNormalState();
            
            console.log('Layout fullscreen mode disabled');
        }
    }
    
    // Bleepy mascot visibility event listener - PRESERVED EXACTLY AS-IS
     document.addEventListener('bleepy:visibilityChanged', (event: Event) => {
        const customEvent = event as CustomEvent;
        const { visible } = customEvent.detail;
        if (dismissMascotBtn && bringBackMascotBtn) {
            if (visible) {
                dismissMascotBtn.style.display = 'flex';
                bringBackMascotBtn.style.display = 'none';
            } else {
                dismissMascotBtn.style.display = 'none';
                bringBackMascotBtn.style.display = 'flex';
            }
        }
    }); 
    
    // ‚≠ê NEW: Auto-dismiss mascot on layout changes
    function initializeMascotLayoutHandler() {
        let previousWidth = window.innerWidth;
        let previousIsMobile = window.innerWidth < 768; // md breakpoint
        
        window.addEventListener('resize', () => {
            const currentWidth = window.innerWidth;
            const currentIsMobile = currentWidth < 768;
            
            // Check if we've crossed the mobile/desktop boundary
            const layoutChanged = previousIsMobile !== currentIsMobile;
            
            if (layoutChanged) {
                console.log(`Layout changed: ${previousIsMobile ? 'mobile' : 'desktop'} ‚Üí ${currentIsMobile ? 'mobile' : 'desktop'}`);
                
                // Auto-dismiss mascot on any layout change
                document.dispatchEvent(new CustomEvent('bleepy:hide'));
                sessionStorage.setItem('cuppyDismissed', 'true');
                
                // Update button states immediately
                if (dismissMascotBtn && bringBackMascotBtn) {
                    dismissMascotBtn.style.display = 'none';
                    bringBackMascotBtn.style.display = currentIsMobile ? 'flex' : 'none';
                }
                
                console.log('Mascot auto-dismissed due to layout change');
            }
            
            previousWidth = currentWidth;
            previousIsMobile = currentIsMobile;
        });
        
        // Also handle orientation change events (mobile specific)
        window.addEventListener('orientationchange', () => {
            // Small delay to allow orientation change to complete
            setTimeout(() => {
                console.log('Orientation changed - auto-dismissing mascot');
                document.dispatchEvent(new CustomEvent('bleepy:hide'));
                sessionStorage.setItem('cuppyDismissed', 'true');
                
                // Update button states
                if (dismissMascotBtn && bringBackMascotBtn) {
                    dismissMascotBtn.style.display = 'none';
                    const isMobile = window.innerWidth < 768;
                    bringBackMascotBtn.style.display = isMobile ? 'flex' : 'none';
                }
            }, 100);
        });
    }
    
    // Initialize everything
    loadButtonScript();
    initializeMascotLayoutHandler();

    // SIMPLE TEST: Hide mascot by default - this is a bandaid fix as the mascot features has moves and im too lazy to fix it right now
    setTimeout(() => {
        document.dispatchEvent(new CustomEvent('bleepy:hide'));
        sessionStorage.setItem('cuppyDismissed', 'true');
    }, 500); // Wait 500ms for mascot to load first

    </script>
    
    {import.meta.env.PROD && <script is:inline define:vars={{scriptUrl: url('/pagefind/pagefind.js')}}>
    async function loadPagefind() {
        const pagefind = await import(scriptUrl)
        await pagefind.options({
            'excerptLength': 20
        })
        pagefind.init()
        window.pagefind = pagefind
        pagefind.search('')     // speed up the first search
    }
    loadPagefind()
    </script>}