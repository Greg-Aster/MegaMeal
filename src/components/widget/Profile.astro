---
import ImageWrapper from '../misc/ImageWrapper.astro'
import { Icon } from 'astro-icon/components'
import { profileConfig } from '../../config'
import { url } from '../../utils/url-utils'
import { Image } from 'astro:assets';

// Import avatar images
import avatar from 'src/assets/avatar/avatar.png';
import avatar2 from 'src/assets/avatar/avatar2.png';
import avatar3 from 'src/assets/avatar/avatar3.png';
import avatar4 from 'src/assets/avatar/avatar4.png';
import avatar5 from 'src/assets/avatar/avatar5.png';
import avatar6 from 'src/assets/avatar/avatar6.png';

// Define avatar list directly in this component
const avatarList = [
  avatar,
  avatar2,
  avatar3,
  avatar4,
  avatar5,
  avatar6,
];

// Determine avatar index from post slug if no custom avatar is specified
function getAvatarIndexFromSlug(slug: string = ''): number {
  if (!slug) return 0; // Default to first avatar if no slug
  
  // Simple hash function to get consistent avatar for each slug
  let hash = 0;
  for (let i = 0; i < slug.length; i++) {
    hash = ((hash << 5) - hash) + slug.charCodeAt(i);
    hash = hash & hash; // Convert to 32bit integer
  }
  
  // Ensure positive index and map to available avatars
  return Math.abs(hash) % avatarList.length;
}

interface Props {
  slug?: string;           // Post slug to determine avatar
  customAvatar?: string;   // Custom avatar path from frontmatter
  customName?: string;     // Custom author name from frontmatter
  customBio?: string;      // Custom author bio from frontmatter
}

const { 
  slug = '', 
  customAvatar = '',
  customName = '',
  customBio = '' 
} = Astro.props;

const useDefaultAvatars = !customAvatar;
const activeAvatarIndex = useDefaultAvatars ? getAvatarIndexFromSlug(slug) : 0;

// Use custom name/bio or fall back to config defaults
const displayName = customName || profileConfig.name;
const displayBio = customBio || profileConfig.bio;

// Get social links from config
const config = profileConfig;
---
<div class="card-base p-3">
  <a
    aria-label="Go to About Page"
    href={url('/about/')}
    class="group block relative mx-auto mt-1 lg:mx-0 lg:mt-0 mb-3 max-w-[12rem] lg:max-w-none overflow-hidden rounded-xl active:scale-95"
  >
    <div class="absolute transition pointer-events-none group-hover:bg-black/30 group-active:bg-black/50 w-full h-full z-50 flex items-center justify-center">
      <Icon
        name="fa6-regular:address-card"
        class="transition opacity-0 scale-90 group-hover:scale-100 group-hover:opacity-100 text-white text-5xl"
      ></Icon>
    </div>
    <!-- Image container with relative positioning -->
    <div class="relative w-full aspect-square">
      {useDefaultAvatars ? (
        // Show default avatar list with the active one visible
        avatarList.map((src, index) => (
          <Image
            src={src}
            alt="Profile Image of the Author"
            width={512} 
            height={512}
            fetchpriority={index === activeAvatarIndex ? 'high' : undefined}
            loading={index === activeAvatarIndex ? 'eager' : 'lazy'}
            class={`avatar-image absolute inset-0 w-full h-full object-contain transition-opacity duration-1000 ${
              index === activeAvatarIndex ? 'opacity-100' : 'opacity-0'
            }`}
            id={`avatar-${index}`}
          />
        ))
      ) : (
        // Show custom avatar from frontmatter
        <div class="avatar-image absolute inset-0 w-full h-full object-contain opacity-100">
          <ImageWrapper
            src={customAvatar}
            alt={`Profile Image of ${displayName}`}
            class="w-full h-full object-contain"
          />
        </div>
      )}
    </div>
  </a>
  <div class="px-2">
    <div class="font-bold text-xl text-center mb-1 dark:text-neutral-50 transition">{displayName}</div>
    <div class="h-1 w-5 bg-[var(--primary)] mx-auto rounded-full mb-2 transition"></div>
    <div class="text-center text-neutral-400 mb-2.5 transition">{displayBio}</div>
    <div class="flex gap-2 justify-center mb-1">
      {config.links.length > 1 &&
        config.links.map((item) => (
          <a
            rel="me"
            aria-label={item.name}
            href={item.url}
            target="_blank"
            class="btn-regular rounded-lg h-10 w-10 active:scale-90"
          >
            <Icon name={item.icon} class="text-[1.5rem]"></Icon>
          </a>
        ))}
      {config.links.length == 1 && (
        <a
          rel="me"
          aria-label={config.links[0].name}
          href={config.links[0].url}
          target="_blank"
          class="btn-regular rounded-lg h-10 gap-2 px-3 font-bold active:scale-95"
        >
          <Icon name={config.links[0].icon} class="text-[1.5rem]"></Icon>
          {config.links[0].name}
        </a>
      )}
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
  // Only run avatar rotation if using the default avatars
  const customAvatar = document.querySelector('.avatar-image:not([id])');
  if (customAvatar) return; // Don't animate if using custom avatar
  
  const avatarImages = document.querySelectorAll('.avatar-image');
  if (!avatarImages.length) return;
  
  // Get the active avatar index from the first visible avatar
  let currentIndex = Array.from(avatarImages).findIndex(
    img => (img as HTMLImageElement).style.opacity === '1' || 
           (img as HTMLImageElement).classList.contains('opacity-100')
  );
  
  // If no visible avatar found, default to first one
  if (currentIndex === -1) currentIndex = 0;
  
  let direction = 1; // 1 = downward, -1 = upward

  function animateAvatar() {
    // Reset all images to opacity 0
    avatarImages.forEach((img) => {
      (img as HTMLImageElement).style.opacity = '0';
    });

    // Update currentIndex based on direction
    currentIndex += direction;

    // Reverse direction at boundaries
    if (currentIndex >= avatarImages.length - 1) direction = -1;
    if (currentIndex <= 0) direction = 1;

    // Fade in the current image
    (avatarImages[currentIndex] as HTMLImageElement).style.opacity = '1';
  }

  // Start animation
  setInterval(animateAvatar, 7000); // Adjust timing as needed
});
</script>