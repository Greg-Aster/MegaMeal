---
// src/components/timeline/StarMapView.astro
import type { TimelineEvent } from '../../../services/TimelineService.client';

export interface Props {
  id?: string;
  events: TimelineEvent[];
  useEraColors?: boolean;
  skyboxImageUrl?: string;
}

const {
  id = "starmap-view",
  events,
  useEraColors = false,
  skyboxImageUrl = "/assets/hdri/sky3.png",
} = Astro.props;

const mapId = `${id}-three-container`;
const floatingCardId = `${id}-floating-card`;

// Prepare events for starmap
const starmapEventsJson = JSON.stringify(events.map(e => ({
  slug: e.slug,
  title: e.title,
  year: e.year,
  description: e.description || "No description available.",
  era: e.era,
  isKeyEvent: e.isKeyEvent || false,
})));
---

<div id={mapId} class="starmap-three-container" style="width: 100%; height: 100%; overflow: hidden; background-color: #000510; position: relative;">
  <p class="starmap-loading-message" style="color: white; text-align: center; padding-top: 20%; font-family: sans-serif;">Loading 3D Starmap...</p>
  
  <!-- Floating card for timeline events -->
  <div id={floatingCardId} class="starmap-floating-card" style="position: absolute; opacity: 0; pointer-events: none; transition: opacity 0.3s ease; z-index: 200;">
    <!-- Card content will be dynamically inserted here -->
  </div>
</div>

<script define:vars={{
  mapId,
  floatingCardId,
  starmapEventsJson,
  skyboxImageUrl,
  useEraColors,
}}>
  // Star appearance helpers
  const eraColorMap = {
    'ancient-epoch': '#3b82f6',
    'awakening-era': '#8b5cf6',
    'golden-age': '#6366f1',
    'conflict-epoch': '#ec4899',
    'singularity-conflict': '#ef4444',
    'transcendent-age': '#14b8a6',
    'final-epoch': '#22c55e',
    'unknown': '#6366f1'
  };

  const colorSpectrum = [
    '#ef4444', '#f43f5e', '#f97316', '#f59e0b', '#eab308', '#facc15',
    '#22c55e', '#10b981', '#14b8a6', '#06b6d4', '#0ea5e9', '#3b82f6',
    '#6366f1', '#8b5cf6', '#a855f7', '#d946ef', '#ec4899',
  ];

  function hashCode(str) {
    if (!str) return 0;
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      hash = ((hash << 5) - hash) + str.charCodeAt(i);
      hash |= 0;
    }
    return Math.abs(hash);
  }

  function getStarColor(id, currentEra, shouldUseEraColors) {
    if (shouldUseEraColors && currentEra && eraColorMap[currentEra]) {
      return eraColorMap[currentEra];
    }
    const hash = hashCode(id);
    return colorSpectrum[hash % colorSpectrum.length];
  }

  // Starmap state
  let THREE, OrbitControls;
  let scene, camera, renderer, controls, gridGroup, starsGroup;
  let initialized = false;
  let currentEvents = JSON.parse(starmapEventsJson);
  let selectedEvent = null;
  let floatingCard = null;
  let raycaster, mouse;
  let starSprites = new Map(); // Map of slug -> sprite for easy lookup

  // Create star texture canvas
  function createStarTexture(color, isKeyEvent = false, size = 64) {
    const canvas = document.createElement('canvas');
    canvas.width = size;
    canvas.height = size;
    const ctx = canvas.getContext('2d');
    
    const center = size / 2;
    const radius = isKeyEvent ? size * 0.4 : size * 0.3;
    
    // Create radial gradient for star glow
    const gradient = ctx.createRadialGradient(center, center, 0, center, center, radius);
    gradient.addColorStop(0, color);
    gradient.addColorStop(0.3, color + '88'); // Semi-transparent
    gradient.addColorStop(0.7, color + '44'); // More transparent
    gradient.addColorStop(1, color + '00'); // Fully transparent
    
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, size, size);
    
    // Add bright center point
    ctx.fillStyle = color;
    ctx.beginPath();
    ctx.arc(center, center, isKeyEvent ? 3 : 2, 0, Math.PI * 2);
    ctx.fill();
    
    // Add cross pattern for key events
    if (isKeyEvent) {
      ctx.strokeStyle = color;
      ctx.lineWidth = 1;
      ctx.beginPath();
      ctx.moveTo(center - 8, center);
      ctx.lineTo(center + 8, center);
      ctx.moveTo(center, center - 8);
      ctx.lineTo(center, center + 8);
      ctx.stroke();
    }
    
    return new THREE.CanvasTexture(canvas);
  }

  // Card rendering function
  function renderCard(eventData, screenPosition) {
    floatingCard = floatingCard || document.getElementById(floatingCardId);
    if (!floatingCard) return;

    if (!eventData || !screenPosition) {
      floatingCard.style.opacity = '0';
      floatingCard.style.pointerEvents = 'none';
      floatingCard.innerHTML = '';
      selectedEvent = null;
      return;
    }

    const container = document.getElementById(mapId);
    const rect = container.getBoundingClientRect();
    
    let { x, y } = screenPosition;
    let positionClass = 'timeline-card-bottom';
    
    const cardWidth = 200;
    const cardHeight = 100;
    const margin = 20;
    
    // Adjust position to avoid edges
    if (x < margin + cardWidth/2) {
      x = x + margin;
      positionClass = 'timeline-card-right';
    } else if (x > rect.width - margin - cardWidth/2) {
      x = x - cardWidth - margin;
      positionClass = 'timeline-card-left';
    } else {
      x = x - cardWidth/2;
    }

    if (y < margin + cardHeight) {
      y = y + margin;
      positionClass = 'timeline-card-bottom';
    } else {
      y = y - cardHeight - margin;
      positionClass = 'timeline-card-top';
    }

    const cardHTML = `
      <div class="timeline-card card-base absolute z-30 ${positionClass} bg-[var(--card-bg)] backdrop-blur-sm shadow-lg w-[200px] p-3">
        <div class="font-bold text-75 text-sm mb-1 card-title">${eventData.title}</div>
        <div class="text-50 text-xs line-clamp-2 card-description">${eventData.description || ''}</div>
        <a href="/posts/${eventData.slug}/#post-container" class="timeline-link text-[0.65rem] mt-1 inline-block py-0.5 px-1.5 rounded-full bg-[oklch(0.9_0.05_var(--hue))/0.1] dark:bg-[oklch(0.3_0.05_var(--hue))/0.2] text-[oklch(0.4_0.05_var(--hue))] dark:text-[oklch(0.9_0.05_var(--hue))]">View Event &rarr;</a>
        <div class="card-pointer absolute bg-inherit"></div>
      </div>
    `;
    
    floatingCard.innerHTML = cardHTML;
    floatingCard.style.left = `${x}px`;
    floatingCard.style.top = `${y}px`;
    floatingCard.style.opacity = '1';
    floatingCard.style.pointerEvents = 'auto';
    
    selectedEvent = eventData;
  }

  /*
   * CONSTELLATION LAYOUT DESIGN:
   * 
   * The sky is divided into 8 regions, each representing an era's constellation:
   * 
   *           Transcendent (300°)    Final (340°)    Ancient (0°)    Awakening (60°)
   *                    \                 |                |              /
   *                     \               /|\              /|\            /
   *                      \             / | \            / | \          /
   *                       \___________/  |  \__________/  |  \________/
   *                                     \|/              \|/
   *                                      |                |
   *                            Conflict (180°)        Golden (120°)
   *                                      |                |
   *                                     /|\              /|\
   *                                    / | \            / | \
   *                                   /  |  \__________/  |  \
   *                                  /   |             \  |   \
   *                                 /    |              \ |    \
   *                        Singularity (240°)          Unknown (30°)
   * 
   * All constellations are positioned above 30° elevation to ensure visibility
   * within the camera's viewing constraints (120° to 170° polar angle).
   */

  // Constellation configuration for each era
  const constellationConfig = {
    'ancient-epoch': {
      centerAzimuth: 0,           // 0° - North
      centerElevation: 45,        // 45° above horizon
      spread: 40,                 // ±40° spread
      pattern: 'ancient_wisdom'   // Constellation pattern type
    },
    'awakening-era': {
      centerAzimuth: 60,          // 60° - Northeast  
      centerElevation: 50,
      spread: 35,
      pattern: 'rising_dawn'
    },
    'golden-age': {
      centerAzimuth: 120,         // 120° - Southeast
      centerElevation: 55,
      spread: 45,
      pattern: 'crown'
    },
    'conflict-epoch': {
      centerAzimuth: 180,         // 180° - South
      centerElevation: 40,
      spread: 40,
      pattern: 'crossed_swords'
    },
    'singularity-conflict': {
      centerAzimuth: 240,         // 240° - Southwest
      centerElevation: 45,
      spread: 35,
      pattern: 'supernova'
    },
    'transcendent-age': {
      centerAzimuth: 300,         // 300° - Northwest
      centerElevation: 60,
      spread: 40,
      pattern: 'ascension'
    },
    'final-epoch': {
      centerAzimuth: 340,         // 340° - North-Northwest
      centerElevation: 65,
      spread: 30,
      pattern: 'omega'
    },
    'unknown': {
      centerAzimuth: 30,          // 30° - Between ancient and awakening
      centerElevation: 35,
      spread: 25,
      pattern: 'scattered'
    }
  };

  // Constellation patterns - define relative positions within each constellation
  const constellationPatterns = {
    ancient_wisdom: [
      { azOffset: 0, elOffset: 0 },      // Center star
      { azOffset: -15, elOffset: 10 },   // Upper left
      { azOffset: 15, elOffset: 8 },     // Upper right  
      { azOffset: -8, elOffset: -12 },   // Lower left
      { azOffset: 12, elOffset: -10 },   // Lower right
      { azOffset: 0, elOffset: 20 },     // Top
      { azOffset: -20, elOffset: -5 },   // Far left
      { azOffset: 25, elOffset: -8 }     // Far right
    ],
    rising_dawn: [
      { azOffset: -10, elOffset: -15 },  // Base
      { azOffset: 0, elOffset: 0 },      // Center
      { azOffset: 10, elOffset: 15 },    // Peak
      { azOffset: -5, elOffset: 8 },     // Left wing
      { azOffset: 5, elOffset: 8 },      // Right wing
      { azOffset: 15, elOffset: 25 },    // High right
      { azOffset: -15, elOffset: 20 }    // High left
    ],
    crown: [
      { azOffset: 0, elOffset: 15 },     // Central peak
      { azOffset: -12, elOffset: 8 },    // Left peak
      { azOffset: 12, elOffset: 8 },     // Right peak
      { azOffset: -6, elOffset: 0 },     // Left base
      { azOffset: 6, elOffset: 0 },      // Right base
      { azOffset: -20, elOffset: -5 },   // Left extent
      { azOffset: 20, elOffset: -5 },    // Right extent
      { azOffset: 0, elOffset: -10 }     // Center base
    ],
    crossed_swords: [
      { azOffset: -15, elOffset: 15 },   // Upper left blade
      { azOffset: 15, elOffset: -15 },   // Lower right blade
      { azOffset: 15, elOffset: 15 },    // Upper right blade
      { azOffset: -15, elOffset: -15 },  // Lower left blade
      { azOffset: 0, elOffset: 0 },      // Center crossing
      { azOffset: -25, elOffset: 10 },   // Left hilt
      { azOffset: 25, elOffset: -10 }    // Right hilt
    ],
    supernova: [
      { azOffset: 0, elOffset: 0 },      // Core
      { azOffset: 0, elOffset: 20 },     // North ray
      { azOffset: 17, elOffset: 10 },    // Northeast ray
      { azOffset: 20, elOffset: 0 },     // East ray
      { azOffset: 17, elOffset: -10 },   // Southeast ray
      { azOffset: 0, elOffset: -20 },    // South ray
      { azOffset: -17, elOffset: -10 },  // Southwest ray
      { azOffset: -20, elOffset: 0 },    // West ray
      { azOffset: -17, elOffset: 10 }    // Northwest ray
    ],
    ascension: [
      { azOffset: 0, elOffset: 25 },     // Apex
      { azOffset: -8, elOffset: 15 },    // Upper left
      { azOffset: 8, elOffset: 15 },     // Upper right
      { azOffset: -15, elOffset: 5 },    // Mid left
      { azOffset: 15, elOffset: 5 },     // Mid right
      { azOffset: -20, elOffset: -10 },  // Lower left
      { azOffset: 20, elOffset: -10 },   // Lower right
      { azOffset: 0, elOffset: -5 }      // Center
    ],
    omega: [
      { azOffset: -10, elOffset: 10 },   // Left curve top
      { azOffset: 10, elOffset: 10 },    // Right curve top
      { azOffset: -15, elOffset: 0 },    // Left curve mid
      { azOffset: 15, elOffset: 0 },     // Right curve mid
      { azOffset: -8, elOffset: -10 },   // Left curve bottom
      { azOffset: 8, elOffset: -10 },    // Right curve bottom
      { azOffset: 0, elOffset: 5 }       // Center top
    ],
    scattered: [
      { azOffset: 5, elOffset: 8 },      // Random scattered pattern
      { azOffset: -12, elOffset: -5 },
      { azOffset: 18, elOffset: 12 },
      { azOffset: -8, elOffset: 15 },
      { azOffset: 10, elOffset: -10 },
      { azOffset: -15, elOffset: 3 }
    ]
  };

  // Create or update stars as era-based constellations
  function createOrUpdateStars(eventsToDisplay = currentEvents) {
    if (!starsGroup || !THREE) {
      console.warn('Starmap: createOrUpdateStars called before initialization.');
      return;
    }

    // Clear existing stars
    while (starsGroup.children.length > 0) {
      starsGroup.remove(starsGroup.children[0]);
    }
    starSprites.clear();
    
    // Group events by era with debugging
    const eventsByEra = {};
    const unassignedEvents = [];
    
    eventsToDisplay.forEach(event => {
      const era = event.era || 'unknown';
      
      // Check if era has a constellation config
      if (!constellationConfig[era]) {
        console.warn(`Event "${event.title}" has era "${era}" but no constellation config exists. Adding to 'unknown'.`);
        unassignedEvents.push(event);
        if (!eventsByEra['unknown']) {
          eventsByEra['unknown'] = [];
        }
        eventsByEra['unknown'].push(event);
        return;
      }
      
      if (!eventsByEra[era]) {
        eventsByEra[era] = [];
      }
      eventsByEra[era].push(event);
    });

    // Log debugging info
    console.log('Starmap: Events grouped by era:', Object.keys(eventsByEra).map(era => `${era}: ${eventsByEra[era].length}`).join(', '));
    if (unassignedEvents.length > 0) {
      console.warn(`Starmap: ${unassignedEvents.length} events had unknown/missing eras:`, unassignedEvents.map(e => `"${e.title}" (era: ${e.era})`));
    }

    // Create constellations for each era
    Object.entries(eventsByEra).forEach(([era, eraEvents]) => {
      const config = constellationConfig[era];
      if (!config) {
        console.error(`No constellation config for era: ${era}`);
        return;
      }

      const pattern = constellationPatterns[config.pattern] || constellationPatterns.scattered;
      
      eraEvents.forEach((event, eventIndex) => {
        try {
          // Get position within constellation pattern
          const patternIndex = eventIndex % pattern.length;
          const patternPosition = pattern[patternIndex];
          
          // Add some variation for events beyond the pattern length
          const extraVariation = eventIndex >= pattern.length ? 
            { azOffset: (Math.random() - 0.5) * 30, elOffset: (Math.random() - 0.5) * 20 } : 
            { azOffset: 0, elOffset: 0 };

          // Calculate final position
          const azimuthDeg = config.centerAzimuth + patternPosition.azOffset + extraVariation.azOffset;
          const elevationDeg = Math.max(30, Math.min(80, config.centerElevation + patternPosition.elOffset + extraVariation.elOffset));
          
          const azimuthRad = (azimuthDeg * Math.PI) / 180;
          const elevationRad = (elevationDeg * Math.PI) / 180;
          const polarAngleRad = Math.PI/2 - elevationRad;

          const uniqueStarId = `${event.slug}-${event.year}-${eventIndex}`;
          const mainColor = getStarColor(uniqueStarId, event.era, useEraColors);
          
          // Create star sprite texture
          const starTexture = createStarTexture(mainColor, event.isKeyEvent);
          const spriteMaterial = new THREE.SpriteMaterial({ 
            map: starTexture, 
            transparent: true,
            alphaTest: 0.01,
            blending: THREE.AdditiveBlending
          });
          
          const sprite = new THREE.Sprite(spriteMaterial);
          
          // Position on the same sphere as skybox (but slightly closer to avoid z-fighting)
          const radius = 995; // Slightly inside the skybox
          sprite.position.setFromSphericalCoords(radius, polarAngleRad, azimuthRad);
          
          // Scale based on importance and add slight variation
          const baseScale = event.isKeyEvent ? 14 : 9;
          const scaleVariation = 0.8 + (Math.random() * 0.4); // 0.8 to 1.2 multiplier
          sprite.scale.setScalar(baseScale * scaleVariation);
          
          // Store event data on the sprite for interaction
          sprite.userData = {
            ...event,
            mainColor,
            uniqueId: uniqueStarId,
            era: era,
            constellationPosition: patternPosition
          };
          
          starsGroup.add(sprite);
          starSprites.set(event.slug, sprite);
        } catch (error) {
          console.error(`Error creating star for event "${event.title}":`, error);
        }
      });
    });
    
    console.log(`Starmap: Created constellations for ${Object.keys(eventsByEra).length} eras with ${eventsToDisplay.length} total stars`);
    
    // Create constellation connecting lines
    createConstellationLines(eventsByEra);
  }

  // Create connecting lines between stars in the same constellation
  function createConstellationLines(eventsByEra) {
    Object.entries(eventsByEra).forEach(([era, eraEvents]) => {
      if (eraEvents.length < 2) return;
      
      const config = constellationConfig[era];
      if (!config) {
        console.warn(`No constellation config found for era: ${era}`);
        return;
      }
      
      // Define constellation connection patterns for each type
      const connectionPatterns = {
        ancient_wisdom: [[0,1], [0,2], [1,5], [2,5], [0,3], [0,4]], // Star formation
        rising_dawn: [[0,1], [1,2], [1,3], [1,4], [2,5], [2,6]], // Rising pattern
        crown: [[0,1], [0,2], [1,3], [2,4], [3,7], [4,7], [5,6]], // Crown shape
        crossed_swords: [[0,4], [1,4], [2,4], [3,4], [4,5], [4,6]], // Cross pattern
        supernova: [[0,1], [0,2], [0,3], [0,4], [0,5], [0,6], [0,7], [0,8]], // Radial
        ascension: [[0,1], [0,2], [1,3], [2,4], [3,5], [4,6], [7,1], [7,2]], // Ascending
        omega: [[0,1], [2,3], [4,5], [0,6], [1,6], [2,4], [3,5]], // Omega shape
        scattered: [[0,1], [1,2], [2,3]] // Simple connections
      };
      
      const connections = connectionPatterns[config.pattern] || connectionPatterns.scattered;
      const linePositions = [];
      
      connections.forEach(([startIdx, endIdx]) => {
        if (startIdx < eraEvents.length && endIdx < eraEvents.length) {
          const startSprite = starSprites.get(eraEvents[startIdx].slug);
          const endSprite = starSprites.get(eraEvents[endIdx].slug);
          
          if (startSprite && endSprite) {
            linePositions.push(startSprite.position.clone());
            linePositions.push(endSprite.position.clone());
          }
        }
      });
      
      if (linePositions.length > 0) {
        const lineGeometry = new THREE.BufferGeometry().setFromPoints(linePositions);
        
        // Create dashed line material for better constellation visibility
        const lineMaterial = new THREE.LineDashedMaterial({ 
          color: eraColorMap[era] || '#6366f1',
          transparent: true,
          opacity: 0.4,
          linewidth: 2,
          dashSize: 3,
          gapSize: 2
        });
        
        const constellationLine = new THREE.LineSegments(lineGeometry, lineMaterial);
        constellationLine.computeLineDistances(); // Required for dashed lines
        starsGroup.add(constellationLine);
      }
    });
  }

  // Handle star interactions
  function handleStarClick(intersectedSprite) {
    const eventData = intersectedSprite.userData;
    
    // Update visual states
    starsGroup.children.forEach(sprite => {
      if (sprite.material) {
        sprite.material.opacity = sprite === intersectedSprite ? 1.0 : 0.7;
      }
    });
    
    if (selectedEvent && selectedEvent.slug === eventData.slug) {
      // Clicking same star - deselect
      renderCard(null);
      starsGroup.children.forEach(sprite => {
        if (sprite.material) sprite.material.opacity = 1.0;
      });
    } else {
      // Select new star
      const screenPosition = getScreenPosition(intersectedSprite);
      renderCard(eventData, screenPosition);
      
      // Dispatch event
      const container = document.getElementById(mapId);
      container.dispatchEvent(new CustomEvent('starmap:selectstar', {
        detail: { 
          slug: eventData.slug, 
          eventData: eventData,
          screenPosition: screenPosition
        },
        bubbles: true,
        composed: true
      }));
    }
  }

  // Get screen position of 3D object
  function getScreenPosition(object3D) {
    const container = document.getElementById(mapId);
    const vector = new THREE.Vector3();
    
    vector.setFromMatrixPosition(object3D.matrixWorld);
    vector.project(camera);
    
    const widthHalf = container.clientWidth / 2;
    const heightHalf = container.clientHeight / 2;
    
    return {
      x: (vector.x * widthHalf) + widthHalf,
      y: -(vector.y * heightHalf) + heightHalf
    };
  }

  // Update card position during camera movement
  function updateCardPosition() {
    if (!selectedEvent || !floatingCard || floatingCard.style.opacity === '0') return;
    
    const selectedSprite = starSprites.get(selectedEvent.slug);
    if (selectedSprite) {
      const screenPosition = getScreenPosition(selectedSprite);
      
      // Check if star is visible (not behind camera)
      const vector = new THREE.Vector3();
      vector.setFromMatrixPosition(selectedSprite.matrixWorld);
      vector.project(camera);
      
      if (vector.z < 1) { // Star is in front of camera
        floatingCard.style.left = `${screenPosition.x - 100}px`;
        floatingCard.style.top = `${screenPosition.y - 120}px`;
      } else {
        // Star is behind camera - hide card
        renderCard(null);
      }
    }
  }

  // Initialize scene and objects
  function initSceneAndObjects() {
    const container = document.getElementById(mapId);
    if (!container || !THREE) return;

    const width = container.clientWidth;
    const height = container.clientHeight;
    
    if (width === 0 || height === 0) {
      console.warn(`Starmap: Container dimensions are zero (W: ${width}, H: ${height}).`);
    }

    scene = new THREE.Scene();
    camera = new THREE.PerspectiveCamera(60, width / Math.max(1, height), 0.1, 2000);
    camera.position.set(0, 0, 0.01);

    renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(width, Math.max(1, height));
    renderer.setPixelRatio(window.devicePixelRatio);
    container.appendChild(renderer.domElement);

    // Setup raycaster for star interaction
    raycaster = new THREE.Raycaster();
    mouse = new THREE.Vector2();

    // Load skybox
    const textureLoader = new THREE.TextureLoader();
    const skyTexture = textureLoader.load(skyboxImageUrl,
      () => { console.log('Starmap: Skybox texture loaded.') },
      undefined,
      (err) => console.error('Starmap: Error loading skybox texture:', err)
    );
    skyTexture.mapping = THREE.EquirectangularReflectionMapping;
    const skyMaterial = new THREE.MeshBasicMaterial({ map: skyTexture, side: THREE.BackSide });
    scene.add(new THREE.Mesh(new THREE.SphereGeometry(1000, 60, 40), skyMaterial));

    // Create groups
    starsGroup = new THREE.Group();
    scene.add(starsGroup);
    
    gridGroup = new THREE.Group();
    scene.add(gridGroup);
    
    createGrid();
    createOrUpdateStars();

    // Setup controls
    controls = new OrbitControls(camera, renderer.domElement);
    Object.assign(controls, {
      enableDamping: true,
      dampingFactor: 0.25,
      rotateSpeed: 0.25,
      enablePan: false,
      enableZoom: false,
      minPolarAngle: THREE.MathUtils.degToRad(120),
      maxPolarAngle: THREE.MathUtils.degToRad(170),
      autoRotate: true,
      autoRotateSpeed: 0.05
    });
    controls.target.set(0, 0, 0);
    controls.update();

    // FOV Zoom
    const minFov = 15;
    const maxFov = 45;
    const fovStep = 2;

    renderer.domElement.addEventListener('wheel', (event) => {
      event.preventDefault();
      if (event.deltaY < 0) {
        camera.fov = Math.max(minFov, camera.fov - fovStep);
      } else {
        camera.fov = Math.min(maxFov, camera.fov + fovStep);
      }
      camera.updateProjectionMatrix();
    }, { passive: false });

    // Mouse interaction
    function onMouseClick(event) {
      const rect = container.getBoundingClientRect();
      mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
      mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;

      raycaster.setFromCamera(mouse, camera);
      const intersects = raycaster.intersectObjects(starsGroup.children);

      if (intersects.length > 0) {
        handleStarClick(intersects[0].object);
      } else {
        // Clicked empty space - deselect
        renderCard(null);
        starsGroup.children.forEach(sprite => {
          if (sprite.material) sprite.material.opacity = 1.0;
        });
      }
    }

    container.addEventListener('click', onMouseClick);
    window.addEventListener('resize', onWindowResize);
    animate();
    
    initialized = true;
    console.log('Starmap: Initialization complete');
  }

  // Create grid
  function createGrid() {
    if (!gridGroup || !THREE) return;
    
    gridGroup.clear(); 
    const gridMaterial = new THREE.LineBasicMaterial({ color: 0x224466, transparent: true, opacity: 0.25 });
    
    for (let i = 0; i < 12; i++) {
      const phi = (i / 12) * Math.PI * 2; 
      const points = [];
      for (let j = 0; j <= 50; j++) { 
        points.push(new THREE.Vector3().setFromSphericalCoords(940, (j / 50) * Math.PI, phi));
      }
      gridGroup.add(new THREE.Line(new THREE.BufferGeometry().setFromPoints(points), gridMaterial));
    }
    
    for (let i = -2; i <= 2; i++) { 
      const elevationAngleDeg = i * 30;
      const polarAngleRad = Math.PI / 2 - THREE.MathUtils.degToRad(elevationAngleDeg);
      
      if (polarAngleRad < 0.01 || polarAngleRad > Math.PI - 0.01) continue;
      
      const points = [];
      for (let j = 0; j <= 60; j++) { 
        points.push(new THREE.Vector3().setFromSphericalCoords(940, polarAngleRad, (j / 60) * Math.PI * 2));
      }
      points.push(points[0]); 
      gridGroup.add(new THREE.Line(new THREE.BufferGeometry().setFromPoints(points), gridMaterial));
    }
  }

  // Animation loop
  function animate() {
    requestAnimationFrame(animate);
    if (!initialized || !controls || !renderer || !scene || !camera) return;
    
    try {
      controls.update();
      renderer.render(scene, camera);
      updateCardPosition();
    } catch (e) {
      console.error('Starmap: Error in animate loop:', e);
    }
  }

  // Window resize handler
  function onWindowResize() {
    const container = document.getElementById(mapId);
    if (!container || !camera || !renderer) return;
    
    const width = container.clientWidth;
    const height = container.clientHeight;
    
    camera.aspect = width / Math.max(1, height);
    camera.updateProjectionMatrix();
    renderer.setSize(width, Math.max(1, height));
  }

  // Public API
  window[`starmap_${mapId}`] = {
    updateEvents: (newEvents) => {
      currentEvents = newEvents || JSON.parse(starmapEventsJson);
      createOrUpdateStars(currentEvents);
    },
    isInitialized: () => initialized,
    resetView: () => {
      if (controls) {
        controls.reset();
      }
    },
    getConstellationInfo: () => {
      const eventsByEra = {};
      currentEvents.forEach(event => {
        const era = event.era || 'unknown';
        if (!eventsByEra[era]) eventsByEra[era] = [];
        eventsByEra[era].push(event);
      });
      return {
        constellations: Object.keys(eventsByEra).map(era => ({
          era,
          events: eventsByEra[era].length,
          config: constellationConfig[era],
          color: eraColorMap[era]
        }))
      };
    }
  };

  // Initialize Three.js
  async function initializeThreeStarmap() {
    if (initialized) return;

    const container = document.getElementById(mapId);
    if (!container) {
      console.error(`Starmap: Container with ID #${mapId} not found.`);
      return;
    }
    
    const loadingMessageEl = container.querySelector('.starmap-loading-message');
    if (loadingMessageEl) loadingMessageEl.style.display = 'none';

    try {
      const loadScript = (src) => {
        return new Promise((resolve, reject) => {
          const script = document.createElement('script');
          script.src = src;
          script.onload = resolve;
          script.onerror = reject;
          document.head.appendChild(script);
        });
      };

      if (!window.THREE) {
        await loadScript('https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js');
      }
      THREE = window.THREE;

      await loadScript('https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js');
      OrbitControls = window.THREE.OrbitControls;

      console.log('Starmap: Three.js and dependencies loaded successfully');
      initSceneAndObjects();

    } catch (error) {
      console.error('Starmap: Error during Three.js initialization:', error);
      if (container && loadingMessageEl) {
        loadingMessageEl.textContent = 'Error loading 3D Starmap.';
        loadingMessageEl.style.color = 'red';
        loadingMessageEl.style.display = 'block';
      }
    }
  }

  // Auto-initialize when visible
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting && !initialized) {
        initializeThreeStarmap();
        observer.disconnect();
      }
    });
  });

  const containerElement = document.getElementById(mapId);
  if (containerElement) {
    observer.observe(containerElement);
  }
</script>