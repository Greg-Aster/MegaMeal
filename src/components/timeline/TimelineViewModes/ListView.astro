---
// src/components/timeline/TimelineViewModes/ListView.astro
console.log("Loading ListView.astro component");

import type { TimelineEvent } from '../../../services/TimelineService.client';
import { groupEventsByEra, getEraDisplayName, getEraClasses } from '../../../services/TimelineService.client';

export interface Props {
  events?: TimelineEvent[];
  background?: string;
  selectedEventSlug?: string | null; // Pass slug for easier comparison
}

const {
  events = [],
  background = '/assets/banner/0001.png',
  selectedEventSlug = null,
} = Astro.props;

const eventsByEra = groupEventsByEra(events);
const listViewId = `list-view-${Math.random().toString(36).substring(2,9)}`;
console.log("ListView.astro: Generated ID:", listViewId);
---

<div class="timeline-interface relative w-full h-full" id={listViewId}>
  <!-- Cosmic Background System -->
  <div class="absolute inset-0 -z-10 overflow-hidden">
    <img src={background} alt="Timeline background" class="w-full h-full object-cover opacity-20 dark:opacity-15" />
    <div class="absolute inset-0 bg-gradient-to-br from-[oklch(0.25_0.03_var(--hue))] via-[oklch(0.15_0.05_var(--hue))] to-[oklch(0.10_0.08_var(--hue))] opacity-60 dark:from-[oklch(0.08_0.02_var(--hue))] dark:via-[oklch(0.04_0.03_var(--hue))] dark:to-[oklch(0.02_0.04_var(--hue))] dark:opacity-95"></div>
    <div class="scanlines absolute inset-0 opacity-10 dark:opacity-5"></div>
  </div>

  <!-- Compact Interface Header -->
  <div class="absolute top-2 left-2 right-2 z-20">
    <div class="flex items-center justify-between">
      <!-- Terminal Status -->
      <div class="flex items-center gap-2">
        <div class="w-2 h-2 rounded-full bg-[var(--primary)] animate-pulse"></div>
        <span class="text-xs font-mono text-75 tracking-wider">TEMPORAL_DB</span>
      </div>
      
      <!-- Interaction Guide -->
      <div class="flex items-center gap-2 card-base2 px-2 py-1">
        <svg class="w-3 h-3 text-[var(--primary)]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        <span class="text-xs font-mono text-75">SELECT â†’ ACCESS</span>
      </div>
    </div>
  </div>

  <!-- Main Data Stream -->
  <div class="data-stream relative z-10 overflow-y-auto scrollbar-timeline pt-12 pb-8" style="max-height: calc(100vh - 120px);">
    <div class="px-3 space-y-4">
      {Object.entries(eventsByEra).map(([era, eraEvents]) => (
        <div class="era-window card-base relative overflow-hidden">
          <!-- Era Window Frame -->
          <div class="era-window-header px-3 py-2 bg-[var(--surface-1)] border-b border-[var(--border-color)]">
            <div class="flex items-center justify-between">
              <div class="flex items-center gap-2">
                <div class="window-controls flex gap-1">
                  <div class="w-2 h-2 rounded-full bg-red-500"></div>
                  <div class="w-2 h-2 rounded-full bg-yellow-500"></div>
                  <div class="w-2 h-2 rounded-full bg-green-500"></div>
                </div>
                <h3 class="text-sm font-mono font-bold text-90 tracking-wide">
                  {getEraDisplayName(era)}
                </h3>
              </div>
              <div class="era-count text-xs font-mono text-50">
                {eraEvents.length} entries
              </div>
            </div>
          </div>

          <!-- Era Window Content -->
          <div class="era-window-content p-3 space-y-2 bg-[var(--card-bg)]/50">
            {eraEvents.map((event, index) => (
              <button
                class:list={[
                  "data-record group relative w-full text-left transition-all duration-200 ease-out rounded-md",
                  "hover:scale-[1.01] hover:z-10",
                  selectedEventSlug === event.slug 
                    ? 'record-selected scale-[1.005] z-20 bg-[var(--primary)]/10 border-[var(--primary)]/30' 
                    : 'record-inactive hover:bg-[var(--surface-1)]'
                ]}
                data-era={event.era}
                data-slug={event.slug}
                data-title={event.title}
                title={selectedEventSlug === event.slug ? "Click to access record" : "Click to select record"}
              >
                <!-- Record Background -->
                <div class="absolute inset-0 rounded-md border border-[var(--border-color)] group-hover:border-[var(--primary)]/30 transition-colors duration-200"></div>
                
                <!-- Selection Indicator -->
                <div class:list={[
                  "absolute left-0 top-0 bottom-0 w-1 bg-[var(--primary)] rounded-l-md transition-all duration-200",
                  selectedEventSlug === event.slug ? 'opacity-100' : 'opacity-0 group-hover:opacity-50'
                ]}></div>

                <!-- Record Content -->
                <div class="relative flex items-start gap-3 p-3 pl-4">
                  <!-- Data Node -->
                  <div class="data-node flex-shrink-0 mt-1">
                    <div class:list={[
                      "w-2.5 h-2.5 rounded-full border transition-all duration-200",
                      event.isKeyEvent 
                        ? 'bg-[var(--primary)] border-[var(--primary)] shadow-md shadow-[var(--primary)]/30' 
                        : 'bg-[var(--card-bg)] border-[var(--primary)]/60',
                      selectedEventSlug === event.slug ? 'scale-125' : 'group-hover:scale-110 group-hover:border-[var(--primary)]'
                    ]}></div>
                  </div>

                  <!-- Record Information -->
                  <div class="record-info flex-1 min-w-0">
                    <div class="flex items-start justify-between gap-2 mb-1">
                      <h4 class="font-mono font-semibold text-sm text-75 group-hover:text-[var(--primary)] transition-colors duration-200 leading-tight">
                        {event.title}
                      </h4>
                      
                      {event.isKeyEvent && (
                        <span class="px-1.5 py-0.5 text-xs font-mono font-bold bg-[var(--primary)]/20 text-[var(--primary)] border border-[var(--primary)]/30 rounded flex-shrink-0">
                          KEY
                        </span>
                      )}
                    </div>

                    <p class="text-xs text-50 group-hover:text-75 transition-colors duration-200 line-clamp-2 leading-relaxed">
                      {event.description}
                    </p>

                    {event.location && (
                      <div class="mt-2 flex items-center gap-1.5">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 text-30 flex-shrink-0" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                          <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                          <circle cx="12" cy="10" r="3"></circle>
                        </svg>
                        <span class="text-xs font-mono text-50 group-hover:text-75 transition-colors truncate">
                          {event.location}
                        </span>
                      </div>
                    )}
                  </div>

                  <!-- Status Indicator -->
                  <div class="status-indicator flex-shrink-0 transition-all duration-200">
                    {selectedEventSlug === event.slug ? (
                      <div class="flex items-center gap-1 text-[var(--primary)] text-xs">
                        <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                        </svg>
                      </div>
                    ) : (
                      <div class="opacity-40 group-hover:opacity-70 transition-opacity">
                        <svg class="w-3 h-3 text-[var(--primary)]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                        </svg>
                      </div>
                    )}
                  </div>
                </div>
              </button>
            ))}
          </div>
        </div>
      ))}

      {Object.keys(eventsByEra).length === 0 && (
        <div class="empty-database card-base p-6 text-center">
          <div class="mb-4">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-[var(--primary)] opacity-60 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4" />
            </svg>
          </div>
          <div class="text-90 font-mono font-bold mb-2">No Timeline Events Found</div>
          <div class="text-50 text-sm font-mono">
            Add timelineYear to your posts to populate the database
          </div>
        </div>
      )}
      
      <!-- Bottom Buffer Space -->
      <div class="h-60"></div>
    </div>
  </div>
</div>

<script define:vars={{ listViewId, initialSelectedSlug: selectedEventSlug }}>
  const rootElement = document.getElementById(listViewId);
  let currentSelectedSlug = initialSelectedSlug;

  if (rootElement) {
    console.log("ListView.astro script loaded for:", listViewId);

    // Enhanced visual feedback
    rootElement.addEventListener('mousedown', (e) => {
      const recordButton = e.target.closest('.data-record');
      if (recordButton) {
        recordButton.style.transform = 'scale(0.995)';
      }
    });

    rootElement.addEventListener('mouseup', (e) => {
      const recordButton = e.target.closest('.data-record');
      if (recordButton) {
        setTimeout(() => {
          recordButton.style.transform = '';
        }, 100);
      }
    });

    rootElement.addEventListener('click', (e) => {
      const recordButton = e.target.closest('.data-record');
      if (recordButton) {
        const slug = recordButton.dataset.slug;
        const title = recordButton.dataset.title;

        // If already selected, navigate to the event
        if (currentSelectedSlug && currentSelectedSlug === slug) {
          console.log(`ListView.astro: Navigating to /posts/${slug}/`);
          
          recordButton.classList.add('scale-95');
          setTimeout(() => {
            window.location.href = `/posts/${slug}/`;
          }, 150);
          return;
        }

        // Update selection
        rootElement.querySelectorAll('.data-record').forEach(btn => {
          btn.classList.remove('record-selected', 'z-20', 'bg-[var(--primary)]/10', 'border-[var(--primary)]/30');
          btn.classList.add('record-inactive');
        });
        
        recordButton.classList.remove('record-inactive');
        recordButton.classList.add('record-selected', 'z-20', 'bg-[var(--primary)]/10', 'border-[var(--primary)]/30');
        currentSelectedSlug = slug;

        console.log(`ListView.astro: Selected event - ${title} (${slug})`);

        // Dispatch selection event
        const selectEvent = new CustomEvent('list:select', {
          detail: { slug, title },
          bubbles: true,
          composed: true
        });
        rootElement.dispatchEvent(selectEvent);
      }
    });

    // Double-click for quick access
    rootElement.addEventListener('dblclick', (e) => {
      const recordButton = e.target.closest('.data-record');
      if (recordButton) {
        const slug = recordButton.dataset.slug;
        window.location.href = `/posts/${slug}/`;
      }
    });

    // Update selected state based on external changes
    const observer = new MutationObserver(() => {
        const newSelectedSlug = rootElement.dataset.selectedEventSlug;
        if (newSelectedSlug !== currentSelectedSlug) {
            currentSelectedSlug = newSelectedSlug;
            rootElement.querySelectorAll('.data-record').forEach(btn => {
                const isSelected = btn.dataset.slug === currentSelectedSlug;
                btn.classList.toggle('record-selected', isSelected);
                btn.classList.toggle('record-inactive', !isSelected);
                btn.classList.toggle('z-20', isSelected);
                btn.classList.toggle('bg-[var(--primary)]/10', isSelected);
                btn.classList.toggle('border-[var(--primary)]/30', isSelected);
            });
        }
    });
  }
</script>

<style>
/* Enhanced Scrollbar */
.scrollbar-timeline::-webkit-scrollbar {
  width: 6px;
}

.scrollbar-timeline::-webkit-scrollbar-track {
  background: var(--surface-1);
}

.scrollbar-timeline::-webkit-scrollbar-thumb {
  background: var(--primary);
  opacity: 0.6;
  border-radius: 3px;
}

.scrollbar-timeline::-webkit-scrollbar-thumb:hover {
  opacity: 0.8;
}

/* Animated Scanlines */
.scanlines {
  background: repeating-linear-gradient(
    0deg,
    transparent,
    transparent 2px,
    var(--primary) 2px,
    var(--primary) 4px
  );
  animation: scanlineMove 4s linear infinite;
}

@keyframes scanlineMove {
  0% { transform: translateY(-4px); }
  100% { transform: translateY(0px); }
}

/* Line Clamp */
.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

/* Era Windows */
.era-window {
  background: var(--card-bg);
  border: 1px solid var(--border-color);
}

/* Record Transitions */
.data-record {
  transform-origin: center;
  will-change: transform;
}

.data-record:active {
  transform: scale(0.995) !important;
}

/* Focus States */
.data-record:focus,
.data-record:focus-visible {
  outline: 2px solid var(--primary);
  outline-offset: 2px;
}

/* Mobile Responsive */
@media (max-width: 768px) {
  .data-stream {
    padding-top: 3rem;
  }
  
  .era-window-content {
    padding: 0.75rem;
  }
  
  .data-record .p-3 {
    padding: 0.75rem;
  }
}

/* Reduced Motion */
@media (prefers-reduced-motion: reduce) {
  .scanlines {
    animation: none;
  }
  
  .animate-pulse {
    animation: none;
  }
  
  .data-record {
    transition: none !important;
  }
}
</style>