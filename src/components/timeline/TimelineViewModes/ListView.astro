---
// src/components/timeline/TimelineViewModes/ListView.astro
console.log("Loading ListView.astro component");

import type { TimelineEvent } from '../../../services/TimelineService.client';
import { groupEventsByEra, getEraDisplayName, getEraClasses } from '../../../services/TimelineService.client';

export interface Props {
  events?: TimelineEvent[];
  background?: string;
  selectedEventSlug?: string | null; // Pass slug for easier comparison
}

const {
  events = [],
  background = '/assets/banner/0001.png',
  selectedEventSlug = null,
} = Astro.props;

const eventsByEra = groupEventsByEra(events);
const listViewId = `list-view-${Math.random().toString(36).substring(2,9)}`;
console.log("ListView.astro: Generated ID:", listViewId);
---

<div class="list-view relative" id={listViewId}>
  <div class="absolute inset-0 -z-10 overflow-hidden">
    <img src={background} alt="Timeline background" class="w-full h-full object-cover opacity-25" />
    <div class="absolute inset-0 bg-gradient-to-r from-[oklch(0.35_0.05_var(--hue))] to-[oklch(0.25_0.05_var(--hue))] opacity-40 dark:opacity-30"></div>
  </div>

  <!-- Interaction Guide -->
  <div class="absolute top-2 right-2 z-20 bg-black/70 text-white text-xs px-3 py-2 rounded-md backdrop-blur-sm">
    <div class="flex items-center gap-2">
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
      </svg>
      <span>Click to select â€¢ Click again to view</span>
    </div>
  </div>

  <div class="relative z-10 overflow-y-auto scrollbar-timeline" style="max-height: calc(100vh - 160px);">
    <div class="px-4 pt-12"> <!-- Added top padding for guide -->
      {Object.entries(eventsByEra).map(([era, eraEvents]) => (
        <div class="timeline-era mb-6">
          <div class={`era-header px-3 py-2 rounded-md mb-2 font-bold ${getEraClasses(era)}`}>
            {getEraDisplayName(era)} ({eraEvents[0]?.year} - {eraEvents[eraEvents.length - 1]?.year})
          </div>

          <div class="era-events">
            {eraEvents.map(event => (
              <button
                class:list={[
                  "timeline-event-card group relative flex rounded-md p-3 mb-2 transition-all duration-200 text-left w-full border-2 border-transparent",
                  "hover:border-[var(--primary)]/30 hover:shadow-lg hover:scale-[1.02]",
                  selectedEventSlug === event.slug 
                    ? 'bg-[var(--primary)]/10 border-[var(--primary)]/50 shadow-md scale-[1.01] selected' 
                    : 'hover:bg-[var(--btn-card-bg-hover)]'
                ]}
                data-era={event.era}
                data-slug={event.slug}
                data-title={event.title}
                title={selectedEventSlug === event.slug ? "Click to view this event" : "Click to select this event"}
              >
                <!-- Selection Indicator -->
                <div class="absolute left-0 top-0 bottom-0 w-1 bg-[var(--primary)] rounded-r-full transition-all duration-200 opacity-0 group-hover:opacity-50" 
                     class:list={[selectedEventSlug === event.slug ? 'opacity-100' : 'opacity-0']}></div>

                <!-- Action Indicator -->
                <div class="absolute top-2 right-2 transition-all duration-200">
                  {selectedEventSlug === event.slug ? (
                    <!-- Go to event icon -->
                    <div class="flex items-center gap-1 text-[var(--primary)] text-xs font-medium opacity-80">
                      <span>View</span>
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                      </svg>
                    </div>
                  ) : (
                    <!-- Select indicator -->
                    <div class="text-[var(--primary)]/60 group-hover:text-[var(--primary)] transition-colors">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                      </svg>
                    </div>
                  )}
                </div>

                <div class="event-year w-16 font-bold text-center text-[var(--primary)] flex-shrink-0">
                  {event.year}
                </div>
                
                <div class="event-connector w-8 flex items-center justify-center relative flex-shrink-0">
                  <div class="h-full w-0.5 bg-[var(--primary)] opacity-30"></div>
                  <div class:list={[
                    "w-3 h-3 rounded-full absolute transition-all duration-200",
                    event.isKeyEvent 
                      ? 'bg-[var(--primary)] group-hover:scale-125' 
                      : 'border-2 border-[var(--primary)] bg-[var(--card-bg)] group-hover:scale-110',
                    selectedEventSlug === event.slug ? 'scale-125 shadow-lg' : ''
                  ]}></div>
                </div>
                
                <div class="event-content flex-1 min-w-0"> <!-- min-w-0 for text truncation -->
                  <div class="flex items-start justify-between gap-2">
                    <div class="event-title font-bold text-75 group-hover:text-[var(--primary)] transition-colors leading-tight">
                      {event.title}
                    </div>
                    {event.isKeyEvent && (
                      <span class="text-xs font-bold py-1 px-2 rounded-full bg-[var(--primary)]/20 text-[var(--primary)] flex-shrink-0">
                        Key Event
                      </span>
                    )}
                  </div>
                  
                  <div class="event-description text-50 text-sm mt-1 line-clamp-2 group-hover:text-75 transition-colors">
                    {event.description}
                  </div>
                  
                  {event.location && (
                    <div class="event-location text-xs mt-2 text-[var(--primary)]/80 flex items-center gap-1">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 flex-shrink-0" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                        <circle cx="12" cy="10" r="3"></circle>
                      </svg>
                      <span class="truncate">{event.location}</span>
                    </div>
                  )}
                </div>
              </button>
            ))}
          </div>
        </div>
      ))}

      {Object.keys(eventsByEra).length === 0 && (
        <div class="flex flex-col items-center justify-center py-10 text-center card-base p-8">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-[var(--primary)]" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 002 2z" />
          </svg>
          <div class="text-75 font-bold mt-4">No timeline events found</div>
          <div class="text-50 text-sm mt-2">
            Add timelineYear to your posts to see them in this timeline
          </div>
        </div>
      )}
      <div class="h-40"></div> <!-- Padding -->
    </div>
  </div>
</div>

<script define:vars={{ listViewId, initialSelectedSlug: selectedEventSlug }}>
  const rootElement = document.getElementById(listViewId);
  let currentSelectedSlug = initialSelectedSlug;

  if (rootElement) {
    console.log("ListView.astro script loaded for:", listViewId);

    // Add visual feedback for click states
    rootElement.addEventListener('mousedown', (e) => {
      const cardButton = e.target.closest('.timeline-event-card');
      if (cardButton) {
        cardButton.style.transform = 'scale(0.98)';
      }
    });

    rootElement.addEventListener('mouseup', (e) => {
      const cardButton = e.target.closest('.timeline-event-card');
      if (cardButton) {
        // Reset transform after short delay to show the click feedback
        setTimeout(() => {
          cardButton.style.transform = '';
        }, 100);
      }
    });

    rootElement.addEventListener('click', (e) => {
      const cardButton = e.target.closest('.timeline-event-card');
      if (cardButton) {
        const slug = cardButton.dataset.slug;
        const title = cardButton.dataset.title;

        // If already selected, navigate to the event
        if (currentSelectedSlug && currentSelectedSlug === slug) {
          console.log(`ListView.astro: Navigating to /posts/${slug}/ (already selected)`);
          
          // Add visual feedback for navigation
          cardButton.classList.add('scale-95');
          setTimeout(() => {
            window.location.href = `/posts/${slug}/`;
          }, 150);
          return;
        }

        // Update visual selection immediately for responsive feedback
        rootElement.querySelectorAll('.timeline-event-card').forEach(btn => {
          btn.classList.remove('bg-[var(--primary)]/10', 'border-[var(--primary)]/50', 'shadow-md', 'scale-[1.01]', 'selected');
        });
        
        cardButton.classList.add('bg-[var(--primary)]/10', 'border-[var(--primary)]/50', 'shadow-md', 'scale-[1.01]', 'selected');
        currentSelectedSlug = slug;

        console.log(`ListView.astro: Selected event - ${title} (${slug}). Click again to view.`);

        // Dispatch selection event
        const selectEvent = new CustomEvent('list:select', {
          detail: { slug, title },
          bubbles: true,
          composed: true
        });
        rootElement.dispatchEvent(selectEvent);
      }
    });

    // Remove double-click navigation since we have better single-click UX now
    // But keep it as backup for power users
    rootElement.addEventListener('dblclick', (e) => {
      const cardButton = e.target.closest('.timeline-event-card');
      if (cardButton) {
        const slug = cardButton.dataset.slug;
        console.log(`ListView.astro: Double-click navigation to /posts/${slug}/`);
        window.location.href = `/posts/${slug}/`;
      }
    });

    // Update selected state based on external changes
    const observer = new MutationObserver(() => {
        const newSelectedSlug = rootElement.dataset.selectedEventSlug;
        if (newSelectedSlug !== currentSelectedSlug) {
            currentSelectedSlug = newSelectedSlug;
            rootElement.querySelectorAll('.timeline-event-card').forEach(btn => {
                const isSelected = btn.dataset.slug === currentSelectedSlug;
                btn.classList.toggle('bg-[var(--primary)]/10', isSelected);
                btn.classList.toggle('border-[var(--primary)]/50', isSelected);
                btn.classList.toggle('shadow-md', isSelected);
                btn.classList.toggle('scale-[1.01]', isSelected);
                btn.classList.toggle('selected', isSelected);
            });
        }
    });
  }
</script>

<style>
/* Add line clamp utility for description truncation */
.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

/* Smooth transitions for all interactive elements */
.timeline-event-card {
  transform-origin: center;
}

.timeline-event-card:active {
  transform: scale(0.98);
}

/* Custom scrollbar for the timeline */
.scrollbar-timeline::-webkit-scrollbar {
  width: 6px;
}

.scrollbar-timeline::-webkit-scrollbar-track {
  background: transparent;
}

.scrollbar-timeline::-webkit-scrollbar-thumb {
  background: var(--primary);
  opacity: 0.3;
  border-radius: 3px;
}

.scrollbar-timeline::-webkit-scrollbar-thumb:hover {
  opacity: 0.6;
}
</style>