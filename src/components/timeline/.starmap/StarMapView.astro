---
// src/components/timeline/StarMapView.astro - More Complete Version
import type { TimelineEvent } from '../../../services/TimelineService.client';

export interface Props {
  id?: string;
  events: TimelineEvent[];
  useEraColors?: boolean;
  skyboxImageUrl?: string;
}

const {
  id = "starmap-view",
  events,
  useEraColors = false,
  skyboxImageUrl = "/assets/hdri/skywip4.webp",
} = Astro.props;

const mapId = `${id}-three-container`;
const floatingCardId = `${id}-floating-card`;

// Prepare events for starmap
const starmapEventsJson = JSON.stringify(events.map(e => ({
  slug: e.slug,
  title: e.title,
  year: e.year,
  description: e.description || "No description available.",
  era: e.era,
  isKeyEvent: e.isKeyEvent || false,
})));
---

<div id={mapId} class="w-full h-full overflow-hidden bg-slate-900 relative">
  <p class="starmap-loading-message text-white text-center pt-[20%] font-sans absolute inset-0 z-10">
    Loading 3D Starmap...
  </p>
  
  <div id={floatingCardId} class="timeline-card card-base absolute opacity-0 pointer-events-none transition-opacity duration-300 z-[200] max-w-[280px] p-3 bg-slate-800/90 backdrop-blur-sm shadow-lg">
  </div>
</div>

<script define:vars={{
  mapId,
  floatingCardId,
  starmapEventsJson,
  skyboxImageUrl,
  useEraColors,
}}>
  // =====================================================
  // SHARED UTILITIES - Import these from starUtils.ts in production
  // =====================================================
  const eraColorMap = {
    'ancient-epoch': '#3b82f6',
    'awakening-era': '#8b5cf6', 
    'golden-age': '#6366f1',
    'conflict-epoch': '#ec4899',
    'singularity-conflict': '#ef4444',
    'transcendent-age': '#14b8a6',
    'final-epoch': '#22c55e',
    'unknown': '#6366f1'
  };

  const colorSpectrum = [
    '#ef4444', '#f43f5e', '#f97316', '#f59e0b', '#eab308', '#facc15',
    '#22c55e', '#10b981', '#14b8a6', '#06b6d4', '#0ea5e9', '#3b82f6',
    '#6366f1', '#8b5cf6', '#a855f7', '#d946ef', '#ec4899',
  ];

  const starTypes = ['point', 'classic', 'sparkle', 'refraction', 'halo', 'subtle'];

  function hashCode(str) {
    if (!str) return 0;
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      hash = ((hash << 5) - hash) + str.charCodeAt(i);
      hash |= 0;
    }
    return Math.abs(hash);
  }

  function getStarColor(id, currentEra, shouldUseEraColors) {
    if (shouldUseEraColors && currentEra && eraColorMap[currentEra]) {
      return eraColorMap[currentEra];
    }
    const hash = hashCode(id);
    return colorSpectrum[hash % colorSpectrum.length];
  }

  function getStarType(id, keyEvent) {
    const hash = hashCode(id);
    if (keyEvent) {
      return ['classic', 'sparkle', 'refraction', 'halo'][hash % 4];
    }
    return starTypes[hash % starTypes.length];
  }

  function getSizeFactor(keyEvent) {
    return keyEvent ? 1.2 : 0.85 + (Math.random() * 0.3);
  }

  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

  // =====================================================
  // ENHANCED STAR TEXTURE CREATION - Restored visual quality
  // =====================================================
  function createEnhancedStarTexture(color, starType, isKeyEvent = false, size = 256) {
    const canvas = document.createElement('canvas');
    canvas.width = canvas.height = size;
    const ctx = canvas.getContext('2d');
    
    const center = size / 2;
    const baseRadius = isKeyEvent ? size * 0.04 : size * 0.03;
    const sizeFactor = getSizeFactor(isKeyEvent);
    const finalRadius = baseRadius * sizeFactor;
    
    // Clear canvas
    ctx.clearRect(0, 0, size, size);
    
    // Enhanced multi-layer glow
    const glowLayers = [
      { radius: finalRadius * 15, opacity: 0.04, blur: 25 },
      { radius: finalRadius * 10, opacity: 0.08, blur: 20 },
      { radius: finalRadius * 6, opacity: 0.15, blur: 15 },
      { radius: finalRadius * 3, opacity: 0.25, blur: 8 },
    ];
    
    glowLayers.forEach((layer) => {
      ctx.save();
      ctx.filter = `blur(${layer.blur}px)`;
      
      const gradient = ctx.createRadialGradient(center, center, 0, center, center, layer.radius);
      const alpha = Math.floor(layer.opacity * 255).toString(16).padStart(2, '0');
      gradient.addColorStop(0, color + alpha);
      gradient.addColorStop(0.5, color + Math.floor(layer.opacity * 150).toString(16).padStart(2, '0'));
      gradient.addColorStop(1, color + '00');
      
      ctx.fillStyle = gradient;
      ctx.beginPath();
      ctx.arc(center, center, layer.radius, 0, Math.PI * 2);
      ctx.fill();
      ctx.restore();
    });
    
    // Main star shape
    ctx.save();
    ctx.globalCompositeOperation = 'source-over';
    
    switch (starType) {
      case 'point':
        ctx.fillStyle = color;
        ctx.beginPath();
        ctx.arc(center, center, finalRadius * 1.2, 0, Math.PI * 2);
        ctx.fill();
        break;
        
      case 'classic':
        drawStar(ctx, center, center, 5, finalRadius * 2, finalRadius * 1, color);
        break;
        
      case 'sparkle':
        drawStar(ctx, center, center, 4, finalRadius * 1.8, finalRadius * 0.8, color);
        // Add cross lines
        ctx.strokeStyle = color + 'AA';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.moveTo(center - finalRadius * 3, center);
        ctx.lineTo(center + finalRadius * 3, center);
        ctx.moveTo(center, center - finalRadius * 3);
        ctx.lineTo(center, center + finalRadius * 3);
        ctx.stroke();
        break;
        
      case 'refraction':
        // Central core
        ctx.fillStyle = color;
        ctx.beginPath();
        ctx.arc(center, center, finalRadius * 1.2, 0, Math.PI * 2);
        ctx.fill();
        
        // Refraction lines
        ctx.strokeStyle = color + '80';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.moveTo(center - finalRadius * 4, center);
        ctx.lineTo(center + finalRadius * 4, center);
        ctx.moveTo(center, center - finalRadius * 4);
        ctx.lineTo(center, center + finalRadius * 4);
        ctx.stroke();
        break;
        
      case 'halo':
        // Multiple halos
        const haloRings = [
          { radius: finalRadius * 1.2, opacity: 1 },
          { radius: finalRadius * 2, opacity: 0.6 },
          { radius: finalRadius * 2.8, opacity: 0.3 },
        ];
        
        haloRings.forEach(ring => {
          ctx.fillStyle = color + Math.floor(ring.opacity * 255).toString(16).padStart(2, '0');
          ctx.beginPath();
          ctx.arc(center, center, ring.radius, 0, Math.PI * 2);
          ctx.fill();
        });
        break;
        
      default: // subtle
        ctx.fillStyle = color;
        ctx.beginPath();
        ctx.arc(center, center, finalRadius * 1.1, 0, Math.PI * 2);
        ctx.fill();
        
        ctx.strokeStyle = color + '99';
        ctx.lineWidth = 1;
        ctx.beginPath();
        ctx.moveTo(center - finalRadius * 2.5, center);
        ctx.lineTo(center + finalRadius * 2.5, center);
        ctx.moveTo(center, center - finalRadius * 2.5);
        ctx.lineTo(center, center + finalRadius * 2.5);
        ctx.stroke();
        break;
    }
    
    ctx.restore();
    
    return new THREE.CanvasTexture(canvas);
  }
  
  // Helper function to draw star shapes
  function drawStar(ctx, cx, cy, spikes, outerRadius, innerRadius, color) {
    let rot = Math.PI / 2 * 3;
    let x = cx;
    let y = cy;
    const step = Math.PI / spikes;
    
    ctx.beginPath();
    ctx.moveTo(cx, cy - outerRadius);
    
    for (let i = 0; i < spikes; i++) {
      x = cx + Math.cos(rot) * outerRadius;
      y = cy + Math.sin(rot) * outerRadius;
      ctx.lineTo(x, y);
      rot += step;
      
      x = cx + Math.cos(rot) * innerRadius;
      y = cy + Math.sin(rot) * innerRadius;
      ctx.lineTo(x, y);
      rot += step;
    }
    
    ctx.lineTo(cx, cy - outerRadius);
    ctx.closePath();
    ctx.fillStyle = color;
    ctx.fill();
  }

  // =====================================================
  // CONSTELLATION PATTERNS - Preserved from original
  // =====================================================
  const constellationConfig = {
    'ancient-epoch': { centerAzimuth: 0, centerElevation: 45, spread: 40, pattern: 'ancient_wisdom' },
    'awakening-era': { centerAzimuth: 60, centerElevation: 50, spread: 35, pattern: 'rising_dawn' },
    'golden-age': { centerAzimuth: 120, centerElevation: 55, spread: 45, pattern: 'crown' },
    'conflict-epoch': { centerAzimuth: 180, centerElevation: 40, spread: 40, pattern: 'crossed_swords' },
    'singularity-conflict': { centerAzimuth: 240, centerElevation: 45, spread: 35, pattern: 'supernova' },
    'transcendent-age': { centerAzimuth: 300, centerElevation: 60, spread: 40, pattern: 'ascension' },
    'final-epoch': { centerAzimuth: 340, centerElevation: 65, spread: 30, pattern: 'omega' },
    'unknown': { centerAzimuth: 30, centerElevation: 35, spread: 25, pattern: 'scattered' }
  };

  const constellationPatterns = {
    ancient_wisdom: [ { azOffset: 0, elOffset: 0 }, { azOffset: -15, elOffset: 10 }, { azOffset: 15, elOffset: 8 }, { azOffset: -8, elOffset: -12 }, { azOffset: 12, elOffset: -10 }, { azOffset: 0, elOffset: 20 }, { azOffset: -20, elOffset: -5 }, { azOffset: 25, elOffset: -8 } ],
    rising_dawn: [ { azOffset: -10, elOffset: -15 }, { azOffset: 0, elOffset: 0 }, { azOffset: 10, elOffset: 15 }, { azOffset: -5, elOffset: 8 }, { azOffset: 5, elOffset: 8 }, { azOffset: 15, elOffset: 25 }, { azOffset: -15, elOffset: 20 } ],
    crown: [ { azOffset: 0, elOffset: 15 }, { azOffset: -12, elOffset: 8 }, { azOffset: 12, elOffset: 8 }, { azOffset: -6, elOffset: 0 }, { azOffset: 6, elOffset: 0 }, { azOffset: -20, elOffset: -5 }, { azOffset: 20, elOffset: -5 }, { azOffset: 0, elOffset: -10 } ],
    crossed_swords: [ { azOffset: -15, elOffset: 15 }, { azOffset: 15, elOffset: -15 }, { azOffset: 15, elOffset: 15 }, { azOffset: -15, elOffset: -15 }, { azOffset: 0, elOffset: 0 }, { azOffset: -25, elOffset: 10 }, { azOffset: 25, elOffset: -10 } ],
    supernova: [ { azOffset: 0, elOffset: 0 }, { azOffset: 0, elOffset: 20 }, { azOffset: 17, elOffset: 10 }, { azOffset: 20, elOffset: 0 }, { azOffset: 17, elOffset: -10 }, { azOffset: 0, elOffset: -20 }, { azOffset: -17, elOffset: -10 }, { azOffset: -20, elOffset: 0 }, { azOffset: -17, elOffset: 10 } ],
    ascension: [ { azOffset: 0, elOffset: 25 }, { azOffset: -8, elOffset: 15 }, { azOffset: 8, elOffset: 15 }, { azOffset: -15, elOffset: 5 }, { azOffset: 15, elOffset: 5 }, { azOffset: -20, elOffset: -10 }, { azOffset: 20, elOffset: -10 }, { azOffset: 0, elOffset: -5 } ],
    omega: [ { azOffset: -10, elOffset: 10 }, { azOffset: 10, elOffset: 10 }, { azOffset: -15, elOffset: 0 }, { azOffset: 15, elOffset: 0 }, { azOffset: -8, elOffset: -10 }, { azOffset: 8, elOffset: -10 }, { azOffset: 0, elOffset: 5 } ],
    scattered: [ { azOffset: 5, elOffset: 8 }, { azOffset: -12, elOffset: -5 }, { azOffset: 18, elOffset: 12 }, { azOffset: -8, elOffset: 15 }, { azOffset: 10, elOffset: -10 }, { azOffset: -15, elOffset: 3 } ]
  };

  // =====================================================
  // ENHANCED CARD RENDERING - Preserved positioning logic
  // =====================================================
  function renderCard(eventData, screenPosition) {
    const floatingCard = document.getElementById(floatingCardId);
    if (!floatingCard) return;

    if (!eventData || !screenPosition || !screenPosition.isInFront) {
      floatingCard.style.opacity = '0';
      floatingCard.style.pointerEvents = 'none';
      floatingCard.innerHTML = '';
      return;
    }

    const container = document.getElementById(mapId);
    const rect = container.getBoundingClientRect();
    const { x: eventX, y: eventY } = screenPosition;

    const cardWidth = 280;
    const cardHeight = 120;
    const edgeMargin = 10;
    
    const offsetX = -35;
    const offsetY = -35;

    let cardX = eventX + offsetX;
    let cardY = eventY + offsetY;

    // Edge clamping
    if (cardX + cardWidth > rect.width - edgeMargin) {
      cardX = rect.width - cardWidth - edgeMargin;
    }
    if (cardX < edgeMargin) {
      cardX = edgeMargin;
    }
    if (cardY + cardHeight > rect.height - edgeMargin) {
      cardY = rect.height - cardHeight - edgeMargin;
    }
    if (cardY < edgeMargin) {
      cardY = edgeMargin;
    }

    // Determine position class for pointer
    const cardCenterX = cardX + cardWidth / 2;
    const cardCenterY = cardY + cardHeight / 2;
    const deltaX = eventX - cardCenterX;
    const deltaY = eventY - cardCenterY;

    let positionClass = 'timeline-card-bottom';
    if (Math.abs(deltaX) > Math.abs(deltaY) * 1.2) {
      positionClass = (deltaX > 0) ? 'timeline-card-left' : 'timeline-card-right';
    } else {
      positionClass = (deltaY > 0) ? 'timeline-card-top' : 'timeline-card-bottom';
    }

    const cardHTML = `
      <div class="timeline-card card-base absolute z-30 ${positionClass} bg-[var(--card-bg)] backdrop-blur-sm shadow-lg w-[200px] p-3">
        <div class="font-bold text-75 text-sm mb-1 card-title">${eventData.title}</div>
        <div class="text-50 text-xs line-clamp-2 card-description">${eventData.description || ''}</div>
        <a href="/posts/${eventData.slug}/#post-container" class="timeline-link text-[0.65rem] mt-1 inline-block py-0.5 px-1.5 rounded-full bg-[oklch(0.9_0.05_var(--hue))/0.1] dark:bg-[oklch(0.3_0.05_var(--hue))/0.2] text-[oklch(0.4_0.05_var(--hue))] dark:text-[oklch(0.9_0.05_var(--hue))]">View Event &rarr;</a>
        <div class="card-pointer absolute bg-inherit"></div>
      </div>
    `;
    
    floatingCard.innerHTML = cardHTML;
    floatingCard.style.left = `${cardX}px`;
    floatingCard.style.top = `${cardY}px`;
    floatingCard.style.opacity = '1';
    floatingCard.style.pointerEvents = 'auto';
  }

  // =====================================================
  // MAIN STARMAP CLASS - Enhanced with proper initialization
  // =====================================================
  class Starmap {
    constructor() {
      this.scene = null;
      this.camera = null;
      this.renderer = null;
      this.controls = null;
      this.stars = new Map();
      this.selectedEvent = null;
      this.events = JSON.parse(starmapEventsJson);
      this.raycaster = null;
      this.mouse = null;
      this.initialized = false;
    }

    async init() {
      if (!await this.loadThreeJS()) return false;
      
      this.setupScene();
      this.createStars();
      this.setupControls();
      this.setupInteraction();
      this.animate();
      
      // Hide loading message
      const loading = document.querySelector('.starmap-loading-message');
      if (loading) loading.style.display = 'none';
      
      this.initialized = true;
      console.log('Starmap: Initialization complete');
      return true;
    }

    async loadThreeJS() {
      if (window.THREE) return true;
      
      try {
        await this.loadScript('https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js');
        if (!window.THREE) throw new Error("Three.js failed to load");
        
        await this.loadScript('https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js');
        if (!window.THREE.OrbitControls) throw new Error("OrbitControls failed to load");
        
        return true;
      } catch (error) {
        console.error('Failed to load Three.js:', error);
        return false;
      }
    }

    loadScript(src) {
      return new Promise((resolve, reject) => {
        if (document.querySelector(`script[src="${src}"]`)) return resolve();
        
        const script = document.createElement('script');
        script.src = src;
        script.onload = resolve;
        script.onerror = reject;
        document.head.appendChild(script);
      });
    }

    setupScene() {
      const container = document.getElementById(mapId);
      const { clientWidth: width, clientHeight: height } = container;

      this.scene = new THREE.Scene();
      this.camera = new THREE.PerspectiveCamera(60, width / height, 0.1, 2000);
      this.camera.position.set(0, -150, 120);

      this.renderer = new THREE.WebGLRenderer({ antialias: true });
      this.renderer.setSize(width, height);
      this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 1.5));
      container.appendChild(this.renderer.domElement);

      // Skybox
      const loader = new THREE.TextureLoader();
      loader.load(skyboxImageUrl, 
        (texture) => {
          texture.mapping = THREE.EquirectangularReflectionMapping;
          const skyMaterial = new THREE.MeshBasicMaterial({ map: texture, side: THREE.BackSide, depthWrite: false });
          this.scene.add(new THREE.Mesh(new THREE.SphereGeometry(1000, 60, 40), skyMaterial));
        },
        undefined,
        (err) => console.error('Starmap: Error loading skybox texture:', err)
      );

      this.starsGroup = new THREE.Group();
      this.scene.add(this.starsGroup);

      // Setup raycaster
      this.raycaster = new THREE.Raycaster();
      this.mouse = new THREE.Vector2();
    }

    createStars() {
      // Group events by era
      const eventsByEra = {};
      this.events.forEach(event => {
        const era = event.era || 'unknown';
        if (!eventsByEra[era]) eventsByEra[era] = [];
        eventsByEra[era].push(event);
      });

      // Create constellation for each era
      Object.entries(eventsByEra).forEach(([era, eraEvents]) => {
        const config = constellationConfig[era];
        if (!config) return;

        const pattern = constellationPatterns[config.pattern] || constellationPatterns.scattered;
        
        eraEvents.forEach((event, eventIndex) => {
          const patternIndex = eventIndex % pattern.length;
          const patternPosition = pattern[patternIndex];
          
          const extraVariation = eventIndex >= pattern.length ? 
            { azOffset: (Math.random() - 0.5) * 30, elOffset: (Math.random() - 0.5) * 20 } : 
            { azOffset: 0, elOffset: 0 };

          const azimuthDeg = config.centerAzimuth + patternPosition.azOffset + extraVariation.azOffset;
          const elevationDeg = Math.max(30, Math.min(80, config.centerElevation + patternPosition.elOffset + extraVariation.elOffset));
          
          const azimuthRad = (azimuthDeg * Math.PI) / 180;
          const elevationRad = (elevationDeg * Math.PI) / 180;
          const polarAngleRad = Math.PI/2 - elevationRad;

          const uniqueStarId = `${event.slug}-${event.year}-${eventIndex}`;
          const mainColor = getStarColor(uniqueStarId, event.era, useEraColors);
          const starType = getStarType(uniqueStarId, event.isKeyEvent);
          
          const starTexture = createEnhancedStarTexture(mainColor, starType, event.isKeyEvent);
          const spriteMaterial = new THREE.SpriteMaterial({ 
            map: starTexture, 
            transparent: true,
            alphaTest: 0.01,
            blending: THREE.AdditiveBlending
          });
          
          const sprite = new THREE.Sprite(spriteMaterial);
          
          const radius = 995;
          sprite.position.setFromSphericalCoords(radius, polarAngleRad, azimuthRad);
          
          const baseScale = event.isKeyEvent ? 44 : 32;
          const scaleVariation = 0.8 + (Math.random() * 0.4);
          sprite.scale.setScalar(baseScale * scaleVariation);
          
          sprite.userData = {
            ...event,
            mainColor,
            starType,
            uniqueId: uniqueStarId,
            era: era,
            isSelected: false,
            isHovered: false
          };
          
          this.starsGroup.add(sprite);
          this.stars.set(event.slug, sprite);
        });
      });
      
      console.log(`Starmap: Created ${this.events.length} stars in ${Object.keys(eventsByEra).length} constellations`);
    }

    setupControls() {
      this.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);
      Object.assign(this.controls, {
        enableDamping: true,
        dampingFactor: 0.25,
        rotateSpeed: -0.15,
        enablePan: false,
        enableZoom: true,
        minDistance: 50,
        maxDistance: 900,
        minPolarAngle: THREE.MathUtils.degToRad(120),
        maxPolarAngle: THREE.MathUtils.degToRad(170),
        autoRotate: true,
        autoRotateSpeed: 0.05
      });
      this.controls.target.set(0, 0, 0);
      this.controls.update();

      // FIXED: FOV zoom with proper event handling to prevent jumping
      const container = document.getElementById(mapId);
      let isZooming = false;
      
      const handleWheel = (event) => {
        // Only handle wheel events if they're inside our container
        if (!container.contains(event.target)) return;
        
        event.preventDefault();
        event.stopPropagation();
        
        // Prevent control updates during zoom to avoid jumping
        if (!isZooming) {
          isZooming = true;
          this.controls.enabled = false;
          
          // Re-enable controls after a short delay
          setTimeout(() => {
            this.controls.enabled = true;
            isZooming = false;
          }, 50);
        }
        
        const minFov = 15;
        const maxFov = 45;
        const fovStep = 2;
        
        if (event.deltaY < 0) {
          this.camera.fov = Math.max(minFov, this.camera.fov - fovStep);
        } else {
          this.camera.fov = Math.min(maxFov, this.camera.fov + fovStep);
        }
        this.camera.updateProjectionMatrix();
      };

      container.addEventListener('wheel', handleWheel, { passive: false });
    }

    setupInteraction() {
      const container = document.getElementById(mapId);

      const handleInteraction = (event) => {
        const rect = container.getBoundingClientRect();
        let clientX, clientY;
        
        if (event.type === 'touchend') {
          if (!event.changedTouches?.[0]) return;
          event.preventDefault();
          clientX = event.changedTouches[0].clientX;
          clientY = event.changedTouches[0].clientY;
        } else {
          clientX = event.clientX;
          clientY = event.clientY;
        }
        
        this.mouse.x = ((clientX - rect.left) / rect.width) * 2 - 1;
        this.mouse.y = -((clientY - rect.top) / rect.height) * 2 + 1;

        this.raycaster.setFromCamera(this.mouse, this.camera);
        const starArray = Array.from(this.stars.values());
        const intersects = this.raycaster.intersectObjects(starArray);

        if (intersects.length > 0 && intersects[0].object.userData.slug) {
          this.handleStarClick(intersects[0].object);
        } else {
          // Click empty space - deselect
          if (this.selectedEvent) {
            const sprite = this.stars.get(this.selectedEvent.slug);
            if (sprite) {
              sprite.userData.isSelected = false;
            }
          }
          this.selectedEvent = null;
          renderCard(null);
        }
      };

      container.addEventListener('click', handleInteraction);
      container.addEventListener('touchend', handleInteraction);

      window.addEventListener('resize', () => {
        const { clientWidth: width, clientHeight: height } = container;
        if (width === 0 || height === 0) return;
        
        this.camera.aspect = width / height;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(width, height);
      });
    }

    handleStarClick(sprite) {
      const eventData = sprite.userData;
      
      if (this.selectedEvent && this.selectedEvent.slug === eventData.slug) {
        // Deselect same star
        sprite.userData.isSelected = false;
        this.selectedEvent = null;
        renderCard(null);
      } else {
        // Deselect previous
        if (this.selectedEvent) {
          const prevSprite = this.stars.get(this.selectedEvent.slug);
          if (prevSprite) prevSprite.userData.isSelected = false;
        }
        
        // Select new
        sprite.userData.isSelected = true;
        this.selectedEvent = eventData;
        const screenPosition = this.getScreenPosition(sprite);
        renderCard(eventData, screenPosition);
      }
    }

    getScreenPosition(object3D) {
      const vector = new THREE.Vector3();
      vector.setFromMatrixPosition(object3D.matrixWorld);
      vector.project(this.camera);
      
      const container = document.getElementById(mapId);
      const widthHalf = container.clientWidth / 2;
      const heightHalf = container.clientHeight / 2;
      
      return {
        x: (vector.x * widthHalf) + widthHalf,
        y: -(vector.y * heightHalf) + heightHalf,
        isInFront: vector.z < 1
      };
    }

    animate() {
      requestAnimationFrame(() => this.animate());
      
      if (!this.initialized) return;
      
      try {
        if (this.controls) this.controls.update();
        if (this.renderer && this.scene && this.camera) {
          this.renderer.render(this.scene, this.camera);
        }
        
        // Update card position if selected
        if (this.selectedEvent) {
          const sprite = this.stars.get(this.selectedEvent.slug);
          if (sprite) {
            const screenPos = this.getScreenPosition(sprite);
            if (!screenPos.isInFront) {
              this.selectedEvent = null;
              renderCard(null);
            } else {
              renderCard(this.selectedEvent, screenPos);
            }
          }
        }
      } catch (e) {
        console.error('Starmap: Error in animate loop:', e);
      }
    }

    updateEvents(newEvents) {
      this.events = newEvents;
      // Clear existing stars
      while (this.starsGroup.children.length > 0) {
        this.starsGroup.remove(this.starsGroup.children[0]);
      }
      this.stars.clear();
      this.selectedEvent = null;
      renderCard(null);
      // Recreate with new events
      this.createStars();
    }

    resetView() {
      if (this.controls) {
        this.controls.reset();
        this.camera.fov = 60;
        this.camera.updateProjectionMatrix();
      }
    }
  }

  // =====================================================
  // INITIALIZATION - Preserved API
  // =====================================================
  let starmap = null;

  // Public API - matches original
  window[`starmap_${mapId}`] = {
    updateEvents: (newEvents) => starmap?.updateEvents(newEvents),
    isInitialized: () => !!starmap?.initialized,
    resetView: () => starmap?.resetView(),
    getConstellationInfo: () => {
      if (!starmap) return { constellations: [] };
      const eventsByEra = {};
      starmap.events.forEach(event => {
        const era = event.era || 'unknown';
        if (!eventsByEra[era]) eventsByEra[era] = [];
        eventsByEra[era].push(event);
      });
      return {
        constellations: Object.keys(eventsByEra).map(era => ({
          era,
          events: eventsByEra[era].length,
          config: constellationConfig[era],
          color: eraColorMap[era]
        }))
      };
    }
  };

  // Initialize when container becomes visible
  const observer = new IntersectionObserver((entries) => {
    if (entries[0]?.isIntersecting && !starmap) {
      starmap = new Starmap();
      starmap.init().then(success => {
        if (success) console.log('Starmap initialized successfully');
        else console.error('Starmap initialization failed');
      });
      observer.disconnect();
    }
  }, { threshold: 0.01 });

  const container = document.getElementById(mapId);
  if (container) {
    observer.observe(container);
  } else {
    window.addEventListener('DOMContentLoaded', () => {
      const el = document.getElementById(mapId);
      if (el) observer.observe(el);
      else console.error(`Starmap: Container #${mapId} not found after DOMContentLoaded.`);
    });
  }
</script>