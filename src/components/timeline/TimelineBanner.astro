---
import TimelineController from './TimelineController.svelte';
import { getTimelineEvents } from '../../services/TimelineService';

// Define props interface
interface Props {
  id?: string;
  class?: string;
  category?: string;
  startYear?: number;
  endYear?: number;
  background?: string;
  compact?: boolean;
  asBanner?: boolean;
  bannerHeight?: string;
}

// Extract props with defaults
const { 
  id = "timeline-banner",
  class: className = "",
  category = "",
  startYear,
  endYear,
  background = "/assets/banner/0001.png",
  compact = false,
  asBanner = false,
  bannerHeight = "500px"
} = Astro.props;

// Pre-fetch initial data on the server
// This gives us better performance and SEO since the basic timeline structure 
// will be in the initial HTML
const initialEvents = await getTimelineEvents({
  category: category || undefined,
  startYear,
  endYear,
  includeBanners: true
});

// Find any banner posts to use their metadata
const bannerPost = initialEvents.find(event => event.bannerData);
const bannerBackground = bannerPost?.bannerData?.background || background;

// Helper function to safely stringify events for client-side hydration
function safeStringify(obj) {
  return JSON.stringify(obj, (key, value) => {
    // Handle Date objects
    if (value instanceof Date) {
      return {
        __type: "Date",
        iso: value.toISOString()
      };
    }
    // Handle circular references 
    const seen = new WeakSet();
    if (typeof value === 'object' && value !== null) {
      if (seen.has(value)) {
        return '[Circular]';
      }
      seen.add(value);
    }
    return value;
  });
}

// Serialize the events for client-side use to avoid astro:content import issues
const serializedEvents = safeStringify(initialEvents);

// Calculate a responsive banner height
const mobileHeight = "600px";
const desktopHeight = bannerHeight || "500px";
---

<div 
  id={id} 
  class={`timeline-banner ${className}`} 
  data-bannertype="timeline"
  style={`--mobile-height: ${mobileHeight}; --desktop-height: ${desktopHeight};`}
>
  <TimelineController
    client:load
    {id}
    {category}
    {startYear}
    {endYear}
    background={bannerBackground}
    {compact}
    {asBanner}
    bannerHeight={bannerHeight}
    initialEvents={serializedEvents}
  />
</div>

<script>
  // Add more robust error handling for mobile
  let mobileLoadAttempts = 0;
  const MAX_LOAD_ATTEMPTS = 3;
  
  // Handle initial load
  document.addEventListener('DOMContentLoaded', initTimelines);
  
  // Handle Astro page transitions
  document.addEventListener('astro:page-load', initTimelines);
  
  // Handle visibility changes (important for mobile browsers)
  document.addEventListener('visibilitychange', () => {
    if (document.visibilityState === 'visible') {
      // When tab becomes visible again, trigger resize for all timelines
      document.querySelectorAll('.timeline-banner').forEach(banner => {
        banner.dispatchEvent(new CustomEvent('timeline:resize'));
      });
    }
  });
  
  // Handle initial load with better error recovery
  function initTimelines() {
    console.log("Initializing timelines");
    
    // Find all timeline banners and initialize if needed
    document.querySelectorAll('.timeline-banner').forEach(banner => {
      try {
        const id = banner.id;
        console.log(`Initializing timeline: ${id}`);
        
        // Make sure the banner is visible with a fallback display
        banner.style.display = 'flex';
        banner.style.flexDirection = 'column';
        banner.style.visibility = 'visible';
        banner.style.opacity = '1';
        
        // Set appropriate height based on viewport
        const isMobile = window.innerWidth <= 768;
        const height = isMobile 
          ? banner.style.getPropertyValue('--mobile-height') || '600px'
          : banner.style.getPropertyValue('--desktop-height') || '500px';
        
        banner.style.minHeight = height;
        
        // Check if banner content is loaded
        const controller = banner.querySelector('.flex.flex-col');
        if (!controller && mobileLoadAttempts < MAX_LOAD_ATTEMPTS) {
          console.log(`Timeline controller not found in ${id}, retrying...`);
          mobileLoadAttempts++;
          
          // Create a fallback display while we wait
          if (!banner.querySelector('.timeline-fallback')) {
            const fallback = document.createElement('div');
            fallback.className = 'timeline-fallback';
            fallback.innerHTML = `
              <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100%; padding: 2rem; text-align: center;">
                <div style="margin-bottom: 1rem; font-weight: bold;">Loading Timeline...</div>
                <div style="width: 40px; height: 40px; border: 3px solid rgba(0,0,0,0.1); border-radius: 50%; border-top-color: var(--primary, #6366f1); animation: spin 1s linear infinite;"></div>
              </div>
              <style>
                @keyframes spin {
                  to { transform: rotate(360deg); }
                }
              </style>
            `;
            banner.appendChild(fallback);
          }
          
          // Try again after a short delay
          setTimeout(() => {
            initTimelines();
          }, 500);
          return;
        }
        
        // Mark as initialized
        banner.setAttribute('data-initialized', 'true');
        
        // Force a layout update
        setTimeout(() => {
          try {
            window.dispatchEvent(new Event('resize'));
            banner.dispatchEvent(new CustomEvent('timeline:resize'));
            console.log(`Timeline ${id} initialized successfully`);
          } catch (error) {
            console.error(`Error during timeline layout update: ${error.message}`);
          }
        }, 100);
      } catch (error) {
        console.error(`Error initializing timeline: ${error.message}`);
        // Create a basic fallback content
        createFallbackTimeline(banner);
      }
    });
  }
  
  // Create a simple fallback when timeline fails to load
  function createFallbackTimeline(banner) {
    // Check if we already have a fallback
    if (banner.querySelector('.timeline-fallback-permanent')) return;
    
    // Clear the banner
    banner.innerHTML = '';
    
    // Create a minimal fallback that at least shows something
    const fallback = document.createElement('div');
    fallback.className = 'timeline-fallback-permanent';
    fallback.innerHTML = `
      <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100%; padding: 2rem; text-align: center;">
        <div style="margin-bottom: 1rem; font-weight: bold;">Timeline</div>
        <div style="margin-bottom: 2rem;">Unable to load interactive timeline on this device.</div>
        <button id="reload-timeline" style="padding: 0.5rem 1rem; background: var(--primary, #6366f1); color: white; border: none; border-radius: 0.375rem;">
          Reload Timeline
        </button>
      </div>
    `;
    banner.appendChild(fallback);
    
    // Add reload handler
    document.getElementById('reload-timeline')?.addEventListener('click', () => {
      mobileLoadAttempts = 0;
      window.location.reload();
    });
  }
  
  // Add resize handler to update responsive elements
  window.addEventListener('resize', () => {
    document.querySelectorAll('.timeline-banner').forEach(banner => {
      // Update height based on viewport size
      const isMobile = window.innerWidth <= 768;
      const height = isMobile 
        ? banner.style.getPropertyValue('--mobile-height') || '600px'
        : banner.style.getPropertyValue('--desktop-height') || '500px';
      
      banner.style.minHeight = height;
      
      // Add a simplified timeline for very resource-constrained devices
      if (window.navigator.userAgent.includes('Mobile') && window.innerWidth < 480) {
        banner.classList.add('simplified-mobile');
      } else {
        banner.classList.remove('simplified-mobile');
      }
      
      // Dispatch a resize event that Svelte components can listen for
      banner.dispatchEvent(new CustomEvent('timeline:resize'));
    });
  });
</script>

<style>
  /* Base styles for the timeline banner container */
  .timeline-banner {
    position: relative;
    width: 100%;
    overflow-x: hidden;
    margin-bottom: 1rem;
    border-radius: var(--radius-large, 12px);
    display: flex;
    flex-direction: column;
    min-height: var(--desktop-height, 500px);
  }
  
  /* Specifically for banner mode (full-width/height) */
  [data-bannertype="timeline"] {
    margin-top: 0 !important;
    margin-bottom: 0 !important;
    padding-top: 0 !important;
    padding-bottom: 0 !important;
  }
  
  /* Match site's card shadow style */
  .timeline-banner {
    box-shadow: var(--card-shadow, 0 2px 4px rgba(0,0,0,0.005));
  }
  
  /* Mobile specific styles */
  @media (max-width: 768px) {
    .timeline-banner {
      min-height: var(--mobile-height, 600px) !important;
      height: auto !important;
    }
  }
  
  /* Quality of life improvements */
  @media (prefers-reduced-motion: no-preference) {
    .timeline-banner {
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .timeline-banner:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0,0,0,0.05);
    }
  }
  
  /* Fix for iOS Safari */
  @supports (-webkit-touch-callout: none) {
    .timeline-banner {
      height: var(--mobile-height, 600px) !important;
    }
  }
  
  /* Fallback styles */
  .timeline-fallback, 
  .timeline-fallback-permanent {
    width: 100%;
    height: 100%;
    background-color: var(--card-bg, #fff);
    border-radius: var(--radius-large, 12px);
    display: flex;
    align-items: center;
    justify-content: center;
  }
</style>