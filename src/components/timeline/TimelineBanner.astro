---
// src/components/timeline/TimelineBanner.astro
// RESTORED CONTROLLER COMPONENT - All features working

import InfoCard from './InfoCard.astro'
import ListView from './TimelineViewModes/ListView.astro'
import MapView from './TimelineViewModes/MapView.astro'
import StarMapView from './TimelineViewModes/StarMapView.astro'
import TimelineView from './TimelineViewModes/TimelineView.astro'
import TreeView from './TimelineViewModes/TreeView.astro'

import type { TimelineFact } from '../../config/timelineFacts'
import { megaMealUniverseFacts } from '../../config/timelineFacts'
import { defaultTimelineViewConfig } from '../../config/timelineconfig'
import { getTimelineEvents } from '../../services/TimelineService'
import type { TimelineEvent } from '../../services/TimelineService.client'
import {
  type EraConfigMap,
  extractEraConfig,
} from '../../services/TimelineService.client'

export interface Props {
  id?: string
  class?: string
  category?: string
  startYear?: number
  endYear?: number
  background?: string
  compact?: boolean
  asBanner?: boolean
  bannerHeight?: string
  mobileHeight?: string
  initialViewMode?: 'timeline' | 'list' | 'tree' | 'map' | 'starmap'
  useEraColorsForStars?: boolean
  initialScale?: number
  initialOffsetX?: number
  initialOffsetY?: number
  useEraColors?: boolean
}

const {
  id = 'unified-timeline-area',
  class: classList = '',
  category = '',
  startYear: propStartYear,
  endYear: propEndYear,
  background: initialBackground = '/assets/banner/0001.png',
  compact = false,
  asBanner = true,
  bannerHeight = '500px',
  mobileHeight = '400px',
  initialViewMode = 'starmap',
  useEraColorsForStars = false,
  useEraColors = false,
  initialScale = defaultTimelineViewConfig.defaultZoom,
  initialOffsetX = 0,
  initialOffsetY = 0,
} = Astro.props

// Server-side data fetching & processing
let events: TimelineEvent[] = []
let currentBackground = initialBackground

try {
  events = await getTimelineEvents({
    category: category || undefined,
    startYear: propStartYear,
    endYear: propEndYear,
    includeBanners: true,
  })

  const bannerPostWithBg = events.find(event => event.bannerData?.background)
  if (bannerPostWithBg?.bannerData?.background) {
    currentBackground = bannerPostWithBg.bannerData.background
  }
} catch (error) {
  console.error('Error fetching timeline events:', error)
}

// Configuration Extraction
const eraConfig: EraConfigMap = extractEraConfig(events)
const initialEra = Object.keys(eraConfig).length > 0 ? 'all-eras' : ''

// Determine Effective Background
let effectiveBackground = currentBackground
if (events.length > 0 && !effectiveBackground) {
  const firstEraKey = Object.keys(eraConfig).find(
    key => key !== 'all-eras' && key !== 'all-time',
  )
  if (firstEraKey && eraConfig[firstEraKey]?.backgroundImage) {
    effectiveBackground = eraConfig[firstEraKey].backgroundImage
  } else if (eraConfig['all-eras']?.backgroundImage) {
    effectiveBackground = eraConfig['all-eras'].backgroundImage
  }
}

// Determine Year Range
let startYear = propStartYear
let endYear = propEndYear
if (!startYear || !endYear) {
  if (events.length > 0) {
    const years = events.map(event => event.year)
    const minYear = Math.min(...years)
    const maxYear = Math.max(...years)
    const yearPadding = Math.max(5, Math.ceil((maxYear - minYear) * 0.1))
    if (!startYear) startYear = minYear - yearPadding
    if (!endYear) endYear = maxYear + yearPadding
  } else {
    startYear = startYear || 2000
    endYear = endYear || 2100
  }
}

// Generate Unique IDs
const wrapperId = `${id}-wrapper`
const timelineViewId = `${id}-timeline-view`
const starmapViewId = `${id}-starmap-view`
const listViewId = `${id}-list-view`
const treeViewId = `${id}-tree-view`
const mapViewId = `${id}-map-view`
const factsInfoCardId = `${id}-facts-infocard`

// Initial fact for info card
const initialFact: TimelineFact | null =
  megaMealUniverseFacts.length > 0
    ? megaMealUniverseFacts[
        Math.floor(Math.random() * megaMealUniverseFacts.length)
      ]
    : null

const factsInfoCardFact = initialFact
  ? {
      ...initialFact,
      bgColorClass: 'bg-slate-800/90',
      textColorClass: 'text-white',
      headlineColorClass: 'text-white',
      ctaButtonClass: 'bg-sky-600 hover:bg-sky-500 text-white',
    }
  : undefined

// View modes configuration
// View modes configuration
const viewModes = [
  {
    id: 'starmap',
    label: 'StarMap',
    svgPath:
      'M12 2l1.5 3h3.5l-2.5 2.5 1 3.5-3-2-3 2 1-3.5L8 5h3.5L12 2zM6 12l1 2h2l-1.5 1.5.5 2-2-1.5-2 1.5.5-2L3 14h2l1-2zM18 16l.8 1.6h1.8l-1.2 1.2.4 1.8-1.6-1.2-1.6 1.2.4-1.8-1.2-1.2h1.8L18 16z',
  },
  {
    id: 'timeline',
    label: 'Timeline',
    svgPath:
      'M3 12h18M7 8v8M12 6v12M17 9v6M7 7a1 1 0 1 0 0 2 1 1 0 0 0 0-2zM12 4a1 1 0 1 0 0 2 1 1 0 0 0 0-2zM17 8a1 1 0 1 0 0 2 1 1 0 0 0 0-2z',
  },
  {
    id: 'list',
    label: 'List',
    svgPath:
      'M6 7a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM6 12a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM6 17a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM8 6h12a1 1 0 0 1 0 2H8a1 1 0 1 1 0-2zM8 11h12a1 1 0 0 1 0 2H8a1 1 0 1 1 0-2zM8 16h12a1 1 0 0 1 0 2H8a1 1 0 1 1 0-2z',
  },
  {
    id: 'tree',
    label: 'Tree',
    svgPath:
      'M12 3v3m0 0c1.5 0 3 .5 3 2v2c0 1.5-1.5 2-3 2m0-6c-1.5 0-3 .5-3 2v2c0 1.5 1.5 2 3 2m0 0v3m0 0v3M8 15h1.5M14.5 15H16M8 21h1.5M14.5 21H16M12 18a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zM12 6a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z',
  },
  {
    id: 'map',
    label: 'Map',
    svgPath:
      'M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zM12 11.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z',
  },
]
---

<div
  class:list={["timeline-wrapper relative w-full overflow-hidden", asBanner ? "timeline-banner-mode" : "", classList]}
  id={wrapperId}
  style={`height: ${bannerHeight}; overflow-x: hidden !important;`}
>
  <div class="relative w-full h-full">
    <div class="timeline-viewport w-full h-full overflow-hidden" style="overflow-x: hidden !important;">
      
      <!-- Timeline View -->
      <div id={timelineViewId} class={`timeline-view-container w-full h-full ${initialViewMode === 'timeline' ? '' : 'hidden'}`}>
        <TimelineView
          id={`${id}-timeline`}
          events={events}
          background={effectiveBackground}
          compact={compact}
          initialScale={initialScale}
          initialOffsetX={initialOffsetX}
          initialOffsetY={initialOffsetY}
          useEraColors={useEraColors}
          startYear={startYear}
          endYear={endYear}
          eraConfig={eraConfig}
        />
      </div>

      <!-- Starmap View -->
      <div id={starmapViewId} class={`starmap-view-container w-full h-full ${initialViewMode === 'starmap' ? '' : 'hidden'}`}>
        <StarMapView
          id={`${id}-starmap`}
          events={events}
          useEraColors={useEraColorsForStars}
        />
      </div>

      <!-- List View -->
      <div id={listViewId} class={`list-view-container w-full h-full ${initialViewMode === 'list' ? '' : 'hidden'}`}>
        <ListView events={events} background={effectiveBackground} selectedEventSlug={null} />
      </div>

      <!-- Tree View -->
      <div id={treeViewId} class={`tree-view-container w-full h-full ${initialViewMode === 'tree' ? '' : 'hidden'}`}>
        <TreeView events={events} background={effectiveBackground} selectedEventSlug={null} />
      </div>

      <!-- Map View -->
      <div id={mapViewId} class={`map-view-container w-full h-full ${initialViewMode === 'map' ? '' : 'hidden'}`}>
        <MapView events={events} background={effectiveBackground} selectedEventSlug={null} />
      </div>
    </div>

    <!-- InfoCard for Facts/Ads -->
    <InfoCard 
      cardId={factsInfoCardId}
      initialFact={factsInfoCardFact}
      initialIsVisible={false}
    />

    <!-- Timeline Controls -->
    <div id="timelineTopControls" class="timeline-custom-controls absolute top-0 left-0 right-0 flex flex-row items-center justify-between p-2 z-[999] gap-4" style="background-color: rgba(0,0,0,0.4); backdrop-filter: blur(4px); color: white;">
      <div class="flex items-center space-x-2">
        <label for={id + '-era-select'} class="text-sm sr-only">Select Era:</label>
        <select id={id + '-era-select'} name="era" class="era-select p-1 bg-gray-800 text-white rounded text-xs sm:text-sm focus:ring-sky-500 focus:border-sky-500">
          {Object.entries(eraConfig).map(([key, era]) => (
            <option value={key} selected={key === initialEra}>{era.displayName}</option>
          ))}
        </select>
      </div>
      <div class="flex space-x-1">
        {viewModes.map(vm => (
          <button 
            data-viewmode={vm.id} 
            class:list={[
              "view-switcher-button p-1 px-1 sm:px-2 bg-gray-700 hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-opacity-50 rounded text-xs sm:text-sm", 
              initialViewMode === vm.id && "bg-sky-600 text-white"
            ]} 
            title={vm.label}
          >
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 sm:w-5 sm:h-5 inline-block">
              <path fill-rule="evenodd" d={vm.svgPath} clip-rule="evenodd"></path>
            </svg>
            <span class="hidden md:inline ml-1">{vm.label}</span>
          </button>
        ))}
      </div>
    </div>

    <!-- Bottom Controls (for timeline zoom) -->
    <div id="timelineBottomControls" class="timeline-custom-controls absolute bottom-0 left-0 right-0 flex items-center justify-between p-2 z-[999]" style="background-color: rgba(0,0,0,0.4); backdrop-filter: blur(4px); color: white; height: 44px; overflow: hidden;">
      <div class="timeline-zoom-controls flex items-center space-x-2" style="display: none;">
        <button class="zoom-out p-1 hover:bg-gray-700 rounded" title="Zoom Out">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM13 10H7"></path>
          </svg>
        </button>
        <button class="zoom-in p-1 hover:bg-gray-700 rounded" title="Zoom In">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v6m3-3H7"></path>
          </svg>
        </button>
        <button class="reset-view p-1 hover:bg-gray-700 rounded" title="Reset View">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>
</div>

<script define:vars={{
  controllerId: id,
  wrapperId,
  timelineViewId,
  starmapViewId,
  listViewId,
  treeViewId,
  mapViewId,
  factsInfoCardId,
  initialViewMode,
  initialEra,
  eraConfig,
  events: JSON.stringify(events),
  megaMealFactsData: megaMealUniverseFacts,
  effectiveBackground,
  startYear,
  endYear,
  timelineContainerId: `${id}-timeline-container`,
  starmapContainerId: `${id}-starmap-three-container`,
}}>
  // Timeline Banner Controller Script - RESTORED VERSION

  const LAST_VIEW_MODE_KEY = 'timelineBannerLastViewMode';

  // --- Global Variables & DOM Elements ---
  const views = {
    timeline: document.getElementById(timelineViewId),
    starmap: document.getElementById(starmapViewId),
    list: document.getElementById(listViewId),
    tree: document.getElementById(treeViewId),
    map: document.getElementById(mapViewId),
  };
  
  const eraSelectElement = document.getElementById(controllerId + '-era-select');
  const viewSwitcherButtons = document.querySelectorAll(`#timelineTopControls .view-switcher-button`);
  const zoomControls = document.querySelector('.timeline-zoom-controls');

  let currentViewMode = initialViewMode;
  let currentEvents = JSON.parse(events);
  let currentBackground = effectiveBackground;
  let currentEra = initialEra;

  // InfoCard (for facts) state
  let showInfoCard = false;
  let infoCardTimerId = null;
  let infoCardsDismissedForSession = false;

  // --- View Management ---
  function updateViewSwitcherButtonStates(activeMode) {
    viewSwitcherButtons.forEach(button => {
      if (button.dataset.viewmode === activeMode) {
        button.classList.add('bg-sky-600', 'text-white');
        button.classList.remove('bg-gray-700');
      } else {
        button.classList.remove('bg-sky-600', 'text-white');
        button.classList.add('bg-gray-700');
      }
    });
  }

  function setActiveView(mode) {
    currentViewMode = mode;
    localStorage.setItem(LAST_VIEW_MODE_KEY, mode); // Save the new mode

    Object.keys(views).forEach(viewKey => {
      if (views[viewKey]) {
        views[viewKey].classList.toggle('hidden', viewKey !== mode);
      }
    });

    updateViewSwitcherButtonStates(mode);

    if (zoomControls) {
      zoomControls.style.display = mode === 'timeline' ? 'flex' : 'none';
    }

    // Handle view-specific initialization
    if (mode === 'timeline') {
      const timelineCore = window[`timelineCore_${timelineContainerId}`];
      if (timelineCore) {
        timelineCore.updateBackground(currentBackground);
        const currentEraConfig = eraConfig[currentEra];
        if (currentEraConfig && currentEraConfig.startYear && currentEraConfig.endYear) {
          timelineCore.navigateToEraRange(currentEraConfig.startYear, currentEraConfig.endYear);
        }
      }
    }

    if (mode === 'starmap') {
      const starmap = window[`starmap_${starmapContainerId}`];
      if (!starmap || !starmap.isInitialized()) {
        // Starmap will auto-initialize when visible
        console.log('Starmap view activated, waiting for initialization...');
      }
    }
  }

  // --- Era Management ---
  function handleEraChange(selectedEraKey) {
    currentEra = selectedEraKey;
    const config = eraConfig[selectedEraKey];
    let newBackground = effectiveBackground;

    if (config && config.backgroundImage) {
      newBackground = config.backgroundImage;
    }
    currentBackground = newBackground;

    // Filter events based on era
    const allEventsUnfiltered = JSON.parse(events);
    if (selectedEraKey === 'all-eras' || selectedEraKey === 'all-time' || !config || !config.startYear || !config.endYear) {
      currentEvents = allEventsUnfiltered;
    } else {
      currentEvents = allEventsUnfiltered.filter(event => {
        return event.year >= config.startYear && event.year <= config.endYear;
      });
    }

    // Update timeline view
    if (currentViewMode === 'timeline') {
      const timelineCore = window[`timelineCore_${timelineContainerId}`];
      if (timelineCore) {
        timelineCore.updateBackground(currentBackground);
        timelineCore.updateEvents(currentEvents);
        if (config && config.startYear !== undefined && config.endYear !== undefined) {
          timelineCore.navigateToEraRange(config.startYear, config.endYear);
        } else {
          timelineCore.resetView();
        }
      }
    }

    // Update starmap view
    if (currentViewMode === 'starmap') {
      const starmap = window[`starmap_${starmapContainerId}`];
      if (starmap && starmap.isInitialized()) {
        starmap.updateEvents(currentEvents);
      }
    }

    // TODO: Update other views (list, tree, map) when they support dynamic updates
  }

  // --- InfoCard (Facts) Management ---
  function showNextFactOrAd() {
    if (infoCardsDismissedForSession || megaMealFactsData.length === 0) return;

    const displayFact = () => {
      const currentFact = megaMealFactsData[Math.floor(Math.random() * megaMealFactsData.length)];
      
      // Prepare fact with custom styling for dark theme
      const factWithStyling = {
        ...currentFact,
        bgColorClass: 'bg-slate-800/90',
        textColorClass: 'text-white',
        headlineColorClass: 'text-white',
        ctaButtonClass: 'bg-sky-600 hover:bg-sky-500 text-white'
      };

      // Dispatch event to update InfoCard
      document.body.dispatchEvent(new CustomEvent('displayStarInfoCard', {
        detail: {
          fact: factWithStyling,
          cardIdToTarget: factsInfoCardId
        }
      }));
      
      showInfoCard = true;
    };

    displayFact();
  }

  function handleDismissInfoCard() {
    showInfoCard = false;
    infoCardsDismissedForSession = true;
    if (infoCardTimerId) {
      clearInterval(infoCardTimerId);
      infoCardTimerId = null;
    }
  }

  // --- Event Listeners & Initialization ---
  function initialize() {
    // Try to load the last view mode from localStorage
    const savedViewMode = localStorage.getItem(LAST_VIEW_MODE_KEY);
    const validViewModes = ["timeline", "starmap", "list", "tree", "map"]; // Ensure these match your viewModes array
    if (savedViewMode && validViewModes.includes(savedViewMode)) {
      currentViewMode = savedViewMode; // Override with saved mode
    }
    
    // Set initial view (this will now use the potentially updated currentViewMode)
    setActiveView(currentViewMode);

    // Era selector
    if (eraSelectElement) {
      eraSelectElement.addEventListener('change', (event) => handleEraChange(event.target.value));
      if (eraSelectElement.value !== currentEra) {
        handleEraChange(eraSelectElement.value);
      } else if (initialViewMode !== 'starmap') {
        handleEraChange(currentEra);
      }
    } else {
      handleEraChange(currentEra);
    }

    // View switcher buttons
    viewSwitcherButtons.forEach(button => {
      button.addEventListener('click', () => {
        const viewMode = button.dataset.viewmode;
        if (viewMode) setActiveView(viewMode);
      });
    });

    // Zoom controls
    const zoomInBtn = document.querySelector(`#${wrapperId} .zoom-in`);
    const zoomOutBtn = document.querySelector(`#${wrapperId} .zoom-out`);
    const resetViewBtn = document.querySelector(`#${wrapperId} .reset-view`);

    if (zoomInBtn) {
      zoomInBtn.addEventListener('click', () => {
        const timelineCore = window[`timelineCore_${timelineContainerId}`];
        if (timelineCore) timelineCore.zoomIn();
      });
    }
    if (zoomOutBtn) {
      zoomOutBtn.addEventListener('click', () => {
        const timelineCore = window[`timelineCore_${timelineContainerId}`];
        if (timelineCore) timelineCore.zoomOut();
      });
    }
    if (resetViewBtn) {
      resetViewBtn.addEventListener('click', () => {
        const timelineCore = window[`timelineCore_${timelineContainerId}`];
        if (timelineCore) timelineCore.resetView();
      });
    }

    // InfoCard close button
    const infoCardElement = document.getElementById(factsInfoCardId);
    if (infoCardElement) {
      const closeButton = infoCardElement.querySelector('.info-card-close-button');
      if (closeButton) {
        closeButton.addEventListener('click', handleDismissInfoCard);
      }
    }

    // Start facts rotation
    if (megaMealFactsData.length > 0) {
      setTimeout(showNextFactOrAd, 5000 + Math.random() * 2000);
      infoCardTimerId = setInterval(showNextFactOrAd, 15000 + Math.random() * 5000);
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initialize);
  } else {
    initialize();
  }
</script>

<style is:global>
  /* Import external timeline styles */
  @import '../../styles/timeline-styles.css';
  
  /* Additional controller-specific styles */
  .timeline-wrapper {
    position: relative;
  }
  
  .timeline-viewport {
    position: relative;
    width: 100%;
    height: 100%;
  }
  
  .view-switcher-button.bg-sky-600 {
    background-color: rgb(2 132 199) !important;
  }
</style>