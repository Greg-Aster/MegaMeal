---
import TimelineController from './TimelineController.svelte';
import SimpleTimelineBanner from './SimpleTimelineBanner.astro';
import { getTimelineEvents } from '../../services/TimelineService';

// Define props interface
interface Props {
  id?: string;
  class?: string;
  category?: string;
  startYear?: number;
  endYear?: number;
  background?: string;
  compact?: boolean;
  asBanner?: boolean;
  bannerHeight?: string;
}

// Extract props with defaults
const { 
  id = "timeline-banner",
  class: className = "",
  category = "",
  startYear,
  endYear,
  background = "/assets/banner/0001.png",
  compact = false,
  asBanner = false,
  bannerHeight = "500px"
} = Astro.props;

// Try to detect Android server-side (may not always work)
const userAgent = Astro.request.headers.get('user-agent') || '';
const isAndroid = /Android/i.test(userAgent);

// Pre-fetch initial data on the server
const initialEvents = await getTimelineEvents({
  category: category || undefined,
  startYear,
  endYear,
  includeBanners: true
});

// Find any banner posts to use their metadata
const bannerPost = initialEvents.find(event => event.bannerData);
const bannerBackground = bannerPost?.bannerData?.background || background;

// Helper function to safely stringify events for client-side hydration
function safeStringify(obj) {
  return JSON.stringify(obj, (key, value) => {
    // Handle Date objects
    if (value instanceof Date) {
      return {
        __type: "Date",
        iso: value.toISOString()
      };
    }
    // Handle circular references 
    const seen = new WeakSet();
    if (typeof value === 'object' && value !== null) {
      if (seen.has(value)) {
        return '[Circular]';
      }
      seen.add(value);
    }
    return value;
  });
}

// Serialize the events for client-side use to avoid astro:content import issues
const serializedEvents = safeStringify(initialEvents);
---

<div id="timeline-wrapper">
  <!-- Full interactive timeline -->
  <div id="complex-timeline" class={isAndroid ? "hidden" : ""}>
    <div id={id} class={`timeline-banner ${className}`} data-bannertype="timeline">
      <TimelineController
        client:load
        id={id}
        category={category}
        startYear={startYear}
        endYear={endYear}
        background={bannerBackground}
        compact={compact}
        asBanner={asBanner}
        bannerHeight={bannerHeight}
        initialEvents={serializedEvents}
      />
    </div>
  </div>
  
  <!-- Simple Astro-only timeline -->
  <div id="simple-timeline" class={isAndroid ? "" : "hidden"}>
    <SimpleTimelineBanner
      id={`${id}-simple`}
      class={className}
      category={category}
      startYear={startYear}
      endYear={endYear}
      background={bannerBackground}
      compact={compact}
      asBanner={asBanner}
      bannerHeight={bannerHeight}
    />
  </div>
</div>

<script>
  // Client-side Android detection and timeline switching
  function isAndroid() {
    return /Android/i.test(navigator.userAgent);
  }
  
  function switchTimeline() {
    const isAndroidDevice = isAndroid();
    
    document.getElementById('complex-timeline')?.classList.toggle('hidden', isAndroidDevice);
    document.getElementById('simple-timeline')?.classList.toggle('hidden', !isAndroidDevice);
  }
  
  // Run on initial load
  switchTimeline();
  
  // Handle Astro page transitions
  document.addEventListener('astro:page-load', () => {
    switchTimeline();
    
    // Find all timeline banners and initialize if needed
    document.querySelectorAll('.timeline-banner').forEach(banner => {
      const id = banner.id;
      const isInitialized = banner.hasAttribute('data-initialized');
      
      if (!isInitialized) {
        console.log(`Initializing timeline banner: ${id}`);
        banner.setAttribute('data-initialized', 'true');
      }
    });
  });
  
  // Add resize handler to update any responsive elements
  window.addEventListener('resize', () => {
    document.querySelectorAll('.timeline-banner').forEach(banner => {
      // Dispatch a resize event that Svelte components can listen for
      banner.dispatchEvent(new CustomEvent('timeline:resize'));
    });
  });
</script>

<style>
  /* Base styles for the timeline banner container */
  .timeline-banner {
    position: relative;
    width: 100%;
    overflow-x: hidden;
    margin-bottom: 1rem;
    border-radius: var(--radius-large, 12px);
  }
  
  /* Specifically for banner mode (full-width/height) */
  [data-bannertype="timeline"] {
    margin-top: 0 !important;
    margin-bottom: 0 !important;
    padding-top: 0 !important;
    padding-bottom: 0 !important;
  }
  
  /* Match site's card shadow style */
  .timeline-banner {
    box-shadow: var(--card-shadow, 0 2px 4px rgba(0,0,0,0.005));
  }
  
  /* Quality of life improvements */
  @media (prefers-reduced-motion: no-preference) {
    .timeline-banner {
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .timeline-banner:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0,0,0,0.05);
    }
  }
</style>