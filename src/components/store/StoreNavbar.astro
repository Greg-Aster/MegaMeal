---
import { Icon } from 'astro-icon/components'
import DisplaySettings from '../widget/DisplaySettings.svelte'
import { LinkPreset, type NavBarLink } from '../../types/config'
import { navBarConfig, siteConfig, profileConfig } from '../../config/config'
import NavMenuPanel from '../widget/NavMenuPanel.astro'
import { LinkPresets } from '../../constants/link-presets'
import LightDarkSwitch from '../LightDarkSwitch.svelte'
import { url } from '../../utils/url-utils'

const className = Astro.props.class

let links: NavBarLink[] = navBarConfig.links.map(
  (item: NavBarLink | LinkPreset): NavBarLink => {
    if (typeof item === 'number') {
      return LinkPresets[item]
    }
    return item
  },
)
---

<div id="store-navbar" class="z-50 onload-animation">
    <div class="absolute h-8 left-0 right-0 -top-8 bg-[var(--card-bg)] transition"></div> <!-- used for onload animation -->
    <div class:list={[
        className,
        "card-base !overflow-visible max-w-[var(--page-width)] h-[4.5rem] !rounded-t-none mx-auto flex items-center justify-between px-4"]}>
        
        <!-- Site Title/Logo Area (similar to original, but without AdminNavbar taking its place) -->
        <a href={url('/')} class="flex items-center space-x-2 rtl:space-x-reverse">
            <Icon name="mdi:storefront-outline" class="h-8 w-8 dark:text-white" />
            <span class="self-center text-2xl font-semibold whitespace-nowrap dark:text-white sm:inline-block">{siteConfig.title}</span>
        </a>
        
        <!-- Regular Navigation Links -->
        <div id="standard-store-nav" class="hidden md:flex">
            {links.map((l) => {
                return l.dropdown ? (
                    <div class="relative group">
                        <a aria-label={l.name} href={l.external ? l.url : url(l.url)} target={l.external ? "_blank" : null}
                          class="btn-plain scale-animation rounded-lg h-11 font-bold px-5 active:scale-95"
                        >
                            <div class="flex items-center">
                                {l.name}
                                {l.external && <Icon name="fa6-solid:arrow-up-right-from-square" class="text-[0.875rem] transition -translate-y-[1px] ml-1 text-black/[0.2] dark:text-white/[0.2]"></Icon>}
                                <Icon name="material-symbols:keyboard-arrow-down-rounded" class="text-[1.25rem] transition ml-1"></Icon>
                            </div>
                        </a>
                        <div class="absolute left-0 mt-1 w-48 rounded-lg shadow-lg bg-[var(--card-bg)] invisible opacity-0 translate-y-2 group-hover:visible group-hover:opacity-100 group-hover:translate-y-0 transition-all duration-200 z-50">
                            <div class="py-1 rounded-lg overflow-hidden">
                                {l.dropdown.map((item) => (
                                    <a href={item.external ? item.url : url(item.url)} target={item.external ? "_blank" : null}
                                       class="block px-4 py-2 text-black/75 dark:text-white/75 hover:bg-[var(--btn-plain-bg-hover)] hover:text-[var(--primary)] transition-colors duration-200"
                                    >
                                        <div class="flex items-center justify-between">
                                            <span>{item.name}</span>
                                            {item.external && <Icon name="fa6-solid:arrow-up-right-from-square" class="text-[0.75rem] transition -translate-y-[1px] ml-1 text-black/[0.2] dark:text-white/[0.2]"></Icon>}
                                        </div>
                                    </a>
                                ))}
                            </div>
                        </div>
                    </div>
                ) : (
                    <a aria-label={l.name} href={l.external ? l.url : url(l.url)} target={l.external ? "_blank" : null}
                      class="btn-plain scale-animation rounded-lg h-11 font-bold px-5 active:scale-95"
                    >
                        <div class="flex items-center">
                            {l.name}
                            {l.external && <Icon name="fa6-solid:arrow-up-right-from-square" class="text-[0.875rem] transition -translate-y-[1px] ml-1 text-black/[0.2] dark:text-white/[0.2]"></Icon>}
                        </div>
                    </a>
                );
            })}
        </div>
        
        <div class="flex items-center">
            <!-- Shopping Cart Icon/Link -->
            <a href={url('/posts/store/store-placeholder/')} aria-label="Shopping Cart" class="btn-plain scale-animation rounded-lg h-11 w-11 flex items-center justify-center active:scale-90">
                <Icon name="mdi:cart-outline" class="text-[1.25rem]"></Icon>
            </a>

            {!siteConfig.themeColor.fixed && (
                    <button aria-label="Display Settings" class="btn-plain scale-animation rounded-lg h-11 w-11 active:scale-90" id="display-settings-switch">
                        <Icon name="material-symbols:palette-outline" class="text-[1.25rem]"></Icon>
                    </button>
            )}
            <LightDarkSwitch client:load></LightDarkSwitch>
            <button aria-label="Menu" name="Nav Menu" class="btn-plain scale-animation rounded-lg w-11 h-11 active:scale-90 md:!hidden" id="nav-menu-switch">
                <Icon name="material-symbols:menu-rounded" class="text-[1.25rem]"></Icon>
            </button>
        </div>
        
        <NavMenuPanel links={links} isAuthenticated={false}></NavMenuPanel> <!-- isAuthenticated is false as this is public store -->
        <DisplaySettings client:only="svelte"></DisplaySettings>
    </div>
</div>

<script>
function switchTheme() {
    if (localStorage.theme === 'dark') {
        document.documentElement.classList.remove('dark');
        localStorage.theme = 'light';
    } else {
        document.documentElement.classList.add('dark');
        localStorage.theme = 'dark';
    }
}

function loadButtonScript() {
    // Theme switch
    let switchBtn = document.getElementById("scheme-switch");
    if (switchBtn) {
        switchBtn.addEventListener("click", function () {
            switchTheme();
        });
    }

    // Display settings button
    let settingBtn = document.getElementById("display-settings-switch");
    if (settingBtn) {
        settingBtn.addEventListener("click", function () {
            let settingPanel = document.getElementById("display-setting");
            if (settingPanel) {
                settingPanel.classList.toggle("float-panel-closed");
            }
        });
    }

    // Nav menu button
    let menuBtn = document.getElementById("nav-menu-switch");
    if (menuBtn) {
        menuBtn.addEventListener("click", function () {
            let menuPanel = document.getElementById("nav-menu-panel");
            if (menuPanel) {
                menuPanel.classList.toggle("float-panel-closed");
            }
        });
    }
}

loadButtonScript();
document.addEventListener('astro:after-swap', loadButtonScript); // Ensure script re-runs on view transitions
</script>