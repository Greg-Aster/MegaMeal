---
// =====================================================================
// COMPONENT IMPORTS - CLEAN AND SIMPLE
// =====================================================================
import Footer from '@components/Footer.astro';
import Navbar from '@components/Navbar.astro';
import BackToTop from '@components/control/BackToTop.astro';
import SideBar from '@components/widget/SideBar.astro';
import Layout from './Layout.astro';
import { Icon } from 'astro-icon/components';
import { siteConfig } from '../config/config';
import type { MarkdownHeading } from 'astro';
import TOC from "../components/widget/TOC.astro";
import ImageWrapper from "../components/misc/ImageWrapper.astro";
import { Image } from 'astro:assets';
import TimelineController from '../components/timeline/TimelineBanner.astro';
import '../styles/timeline-styles.css';
import { url } from '../utils/url-utils';

// Bleepy (AI Assistant) related imports
import Bleepy from '@components/bleepy/Bleepy.astro';
import BleepyBanner from '@components/bleepy/BleepyBanner.astro';

// ⭐ NEW: Import Svelte components for client-side functionality
import SidenavPanels from '@components/client/SidenavPanels.svelte';
import MobileProfileOverlay from '@components/client/MobileProfileOverlay.svelte';
import SpecialPageFeatures from '@components/client/SpecialPageFeatures.svelte';
import ScrollEffects from '@components/client/ScrollEffects.svelte';
import PageAnimations from '@components/client/PageAnimations.svelte';
import Profile from '@components/client/Profile.svelte';

// Profile and avatar configs for Svelte components
import { profileConfig } from '../config/config';
import { avatarConfig } from '../config/avatar.config';

// ⭐ RESTORED: Import working banner configuration
import {
  determineBannerConfiguration,
  getDynamicBackgroundImage,
  getShouldShowParallaxBackground,
  getBannerAnimationSettings,
  getFallbackBannerCSS,
  getBannerLink,
  bannerConfig
} from '../config/banner.config';

// =====================================================================
// TYPESCRIPT INTERFACES
// =====================================================================

interface Props {
  title?: string;
  banner?: string;              
  description?: string;
  lang?: string;
  setOGTypeArticle?: boolean;
  headings?: MarkdownHeading[];
  post?: any;                   
  bannerLink?: string;          
  isPostPage?: boolean;         
  pageMascotContext?: string;  
  backgroundImage?: string | null;
  // ⭐ NEW: OneColumn layout prop
  oneColumn?: boolean;
  // ⭐ NEW: Custom author data prop
  customAuthorData?: {
    avatarImage?: string;
    authorName?: string;
    authorBio?: string;
    authorLink?: string;
  };
}

// =====================================================================
// PROPS DESTRUCTURING AND SETUP
// =====================================================================

const { 
  title, 
  banner = siteConfig.banner.src,
  description, 
  lang, 
  setOGTypeArticle, 
  headings = [], 
  post,
  bannerLink = '',
  isPostPage = false,
  backgroundImage,
  oneColumn = false,        // ⭐ NEW: Accept oneColumn prop
  customAuthorData  // ⭐ NEW: Extract custom author data
} = Astro.props;

// =====================================================================
// ⭐ NEW: Determine oneColumn mode from props or post data
// =====================================================================
const oneColumnMode = oneColumn || post?.data?.oneColumn || false;
console.log('MainGridLayout - oneColumn mode:', oneColumnMode);

// =====================================================================
// ⭐ RESTORED: Use working banner configuration system
// =====================================================================

// Get current path for page type determination
const currentPath = Astro.url.pathname;

// ⭐ RESTORED: Use the working banner configuration function
const bannerConfiguration = determineBannerConfiguration(post, 'default', bannerLink);

// Destructure the processed configuration - WORKING STRUCTURE
const {
  postData,
  bannerType,
  bannerDataSources,
  layout,
  finalBannerLink,
  currentBannerType
} = bannerConfiguration;

// ⭐ NEW: Process custom author data - merge with existing postData
const processedAuthorData = {
  slug: postData?.slug || '',
  customAvatar: customAuthorData?.avatarImage || postData?.customAvatar || '',
  customName: customAuthorData?.authorName || postData?.customName || '',
  customBio: customAuthorData?.authorBio || postData?.customBio || '',
  customLink: customAuthorData?.authorLink || '', // ⭐ NEW: Custom link support
};

console.log('MainGridLayout - Processed author data:', processedAuthorData);

// Destructure banner type flags
const {
  hasTimelineBanner,
  hasVideoBanner,
  hasImageBanner,
  hasAssistantBanner,
  hasStandardBanner,
  hasPostBanner,
  isStandardPage
} = bannerType;

// ⭐ RESTORED: Use working layout values
const {
  mainPanelTop,        // This controls the overlap (WORKING)
  navbarSpacing,       // This controls navbar spacing (WORKING + MOBILE PORTRAIT FIX)
  bannerHeight,
  mainContentOffset
} = layout;

// =====================================================================
// ⭐ RESTORED: Background image logic (working)
// =====================================================================

const currentBackgroundImage = getDynamicBackgroundImage(backgroundImage);
const shouldShowParallaxBackground = getShouldShowParallaxBackground(backgroundImage);

// =====================================================================
// BLEEPY CONTEXT SETUP
// =====================================================================

let contextForBleepy = null;
if (post && post.data) {
  contextForBleepy = {
    title: post.data.title,
    description: post.data.description,
    tags: post.data.tags,
    category: post.data.category,
    timelineEra: post.data.timelineEra,
    timelineLocation: post.data.timelineLocation,
    mascotContext: post.data.mascotContext,
  };
}
---

<Layout 
  title={title} 
  banner={banner} 
  description={description} 
  lang={lang} 
  setOGTypeArticle={setOGTypeArticle}
  post={post} 
>

  <!-- =============================================================== -->
  <!-- PARALLAX BACKGROUND SECTION                                   -->
  <!-- =============================================================== -->
  {shouldShowParallaxBackground && 
    <div id="parallax-banner" class="fixed top-0 left-0 w-full h-screen z-[-1] overflow-hidden">
      <ImageWrapper 
        id="parallax-image" 
        alt="Site background image" 
        class="parallax-bg object-cover w-full h-[120vh]"
        src={currentBackgroundImage} 
        position={siteConfig.banner.position || 'center'}
      />
      {siteConfig.banner.credit?.enable && 
        <div class="absolute bottom-4 right-4 text-white/50 text-xs bg-black/30 px-2 py-1 rounded">
          {siteConfig.banner.credit.text && 
            <a href={siteConfig.banner.credit.url || '#'} class="hover:text-white/80 transition">
              {siteConfig.banner.credit.text}
            </a>
          }
        </div>
      }
      <div class="absolute inset-0 bg-gradient-to-b from-black/20 to-black/50 pointer-events-none"></div>
    </div>
  }

  <!-- =============================================================== -->
  <!-- ⭐ SIMPLIFIED: NAVBAR - TAILWIND ONLY                         -->
  <!-- =============================================================== -->
  <slot slot="head" name="head"></slot>
  <div id="top-row" class="z-50 pointer-events-none relative transition-all duration-700 max-w-[var(--page-width)] px-2 md:px-4 mx-auto">
    <div id="navbar-wrapper" class="pointer-events-auto sticky top-0 transition-all duration-300 hidden md:block">
      <Navbar></Navbar>
    </div>
  </div>

  <!-- =============================================================== -->
  <!-- ⭐ SIMPLIFIED: Banner container - TAILWIND ONLY               -->
  <!-- =============================================================== -->
  <div id="banner-container" 
    class={`z-10 w-full relative transition-all duration-500
      ${hasTimelineBanner ? 'has-timeline-banner' : ''}
      ${hasVideoBanner ? 'has-video-banner' : ''}
      ${hasImageBanner ? 'has-image-banner' : ''}
      ${hasAssistantBanner ? 'has-assistant-banner' : ''}
      ${hasStandardBanner ? 'has-standard-banner' : ''}`}
  >

    <!-- VIDEO BANNER -->
    {hasVideoBanner && (
      <div class="banner-container-video">
        <div class="banner-aspect-container">
          <div class="banner-content-wrapper">
            <iframe
              src={`https://www.youtube.com/embed/${hasPostBanner && post?.data?.bannerType === "video" ? post.data.bannerData.videoId : bannerDataSources.videoBannerData?.videoId}?autoplay=0&mute=0&controls=1`}
              title="YouTube video player"
              frameborder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture;"
              allowfullscreen
              class="absolute top-0 left-0 w-full h-full"
            ></iframe>
          </div>
        </div>
      </div>
    )}

    <!-- ASSISTANT BANNER -->
    {hasAssistantBanner && (
      <div class="banner-container-assistant">
        <div class="banner-aspect-container">
          <div class="banner-content-wrapper">
            <BleepyBanner backgroundImageUrl={bannerDataSources.assistantBannerData?.imageUrl} />
          </div>
        </div>
      </div>
    )}

    <!-- TIMELINE BANNER -->
    {hasTimelineBanner && (
      <div class="banner-container-timeline">
        <div class="banner-aspect-container">
          <div class="banner-content-wrapper">
            <TimelineController
              category={hasPostBanner && post?.data?.bannerType === "timeline" ? post.data.bannerData.category : (bannerDataSources.timelineBannerData?.category || "MEGA MEAL")}
              startYear={hasPostBanner && post?.data?.bannerType === "timeline" ? post.data.bannerData.startYear : bannerDataSources.timelineBannerData?.startYear}
              endYear={hasPostBanner && post?.data?.bannerType === "timeline" ? post.data.bannerData.endYear : bannerDataSources.timelineBannerData?.endYear}
              background={hasPostBanner && post?.data?.bannerType === "timeline" ? (post.data.bannerData.background || "/posts/timeline/universe.png") : (bannerDataSources.timelineBannerData?.background || "/posts/timeline/universe.png")}
              compact={hasPostBanner && post?.data?.bannerType === "timeline" ? (post.data.bannerData.compact || false) : (bannerDataSources.timelineBannerData?.compact || false)}
              class="w-full h-full"
              asBanner={true}
              bannerHeight="100%"
            />
          </div>
        </div>
      </div>
    )}

    <!-- IMAGE BANNER -->
    {hasImageBanner && (
      <div class="banner-container-image">
        <div class="banner-aspect-container">
          <div class="banner-content-wrapper">
            {finalBannerLink ? (
              <a 
                href={finalBannerLink} 
                aria-label="Banner Link" 
                class="group block w-full h-full"
              >
                <div class="absolute transition pointer-events-none group-hover:bg-black/30 group-active:bg-black/50 w-full h-full z-50 flex items-center justify-center">
                  <Icon
                    name="fa6-solid:link"
                    class="text-white drop-shadow-lg"
                    style="font-size: clamp(2rem, 4vw, 4rem);"
                  ></Icon>
                </div>
                <img
                  src={hasPostBanner && post?.data?.bannerType === "image" ? (post.data.bannerData?.imageUrl || post.data.image) : (bannerDataSources.imageBannerData?.imageUrl || siteConfig.banner.src)}
                  alt={hasPostBanner ? (post.data.title || "Post banner image") : (title || "Banner image")}
                  class="w-full h-full object-cover"
                />
              </a>
            ) : (
              <img
                src={hasPostBanner && post?.data?.bannerType === "image" ? (post.data.bannerData?.imageUrl || post.data.image) : (bannerDataSources.imageBannerData?.imageUrl || siteConfig.banner.src)}
                alt={hasPostBanner ? (post.data.title || "Post banner image") : (title || "Banner image")}
                class="w-full h-full object-cover"
              />
            )}
          </div>
        </div>
      </div>
    )}

    <!-- STANDARD BANNER -->
    {hasStandardBanner && (
      <div class="banner-container-standard">
        <div class="banner-aspect-container">
          <div class="banner-content-wrapper">
            <div id="standard-banner-container">
              {bannerConfig.standardBannerConfig.bannerList.length > 0 ? bannerConfig.standardBannerConfig.bannerList.map((item, index) => {
                const bannerLink = getBannerLink(index);
                const isClickable = bannerLink !== null;
                const isVideoItem = bannerConfig.standardBannerConfig.isVideoBannerItem(item);
                const isImageItem = bannerConfig.standardBannerConfig.isImageBannerItem(item);
                
                return (
                  <div 
                    class="banner-slide absolute inset-0 w-full h-full transition-opacity"
                    style={`
                      transition-duration: ${bannerConfig.standardBannerConfig.animation.transitionDuration}ms;
                      opacity: ${index === 0 ? '1' : '0'};
                    `}
                    data-banner-index={index}
                  >
                    <div
                      class="banner-link group w-full h-full relative cursor-pointer"
                      data-has-link={isClickable}
                      data-href={bannerLink}
                      aria-label={`Banner ${index + 1}${isClickable ? ' - Click to visit link' : ' - Click for information'}`}
                      role="button"
                      tabindex="0"
                    >
                      <div class="absolute inset-0 w-full h-full transition-all duration-300 opacity-0 group-hover:opacity-30 bg-black pointer-events-none z-10"></div>
                      
                      <div class="absolute inset-0 w-full h-full flex items-center justify-center transition-all duration-300 opacity-0 group-hover:opacity-100 z-20 pointer-events-none">
                        <Icon
                          name="fa6-solid:circle-info"
                          class="text-white drop-shadow-lg"
                          style="font-size: clamp(2rem, 4vw, 4rem);"
                        />
                      </div>
                      
                      {isVideoItem ? (
                        <>
                          <video
                            src={item.src}
                            autoplay={bannerConfig.standardBannerConfig.video.autoplay}
                            muted={bannerConfig.standardBannerConfig.video.muted}
                            loop={bannerConfig.standardBannerConfig.video.loop}
                            playsinline={bannerConfig.standardBannerConfig.video.playsInLine}
                            controls={bannerConfig.standardBannerConfig.video.controls}
                            preload={item.preload || bannerConfig.standardBannerConfig.video.preload}
                            class={`banner-video w-full h-full object-${bannerConfig.visual.objectFit} object-${bannerConfig.visual.objectPosition} transition-transform duration-300 group-hover:scale-105`}
                            style={`border-radius: ${bannerConfig.visual.borderRadius};`}
                            onerror="this.style.display='none'; var ne = this.nextElementSibling; if (ne) ne.style.display='block';"
                          >
                            Your browser does not support the video tag.
                          </video>
                          <Image
                            src={item.fallbackImage}
                            alt={item.alt}
                            width={bannerConfig.layout.maxWidth}
                            height={Math.round(bannerConfig.layout.maxWidth * 0.5625)}
                            class={`banner-image-fallback w-full h-full object-${bannerConfig.visual.objectFit} object-${bannerConfig.visual.objectPosition} transition-transform duration-300 group-hover:scale-105`}
                            style={`border-radius: ${bannerConfig.visual.borderRadius}; display: none;`}
                            loading="lazy"
                          />
                        </>
                      ) : isImageItem ? (
                        <Image
                          src={item.src}
                          alt={item.alt}
                          width={bannerConfig.layout.maxWidth}
                          height={Math.round(bannerConfig.layout.maxWidth * 0.5625)}
                          class={`banner-image w-full h-full object-${bannerConfig.visual.objectFit} object-${bannerConfig.visual.objectPosition} transition-transform duration-300 group-hover:scale-105`}
                          style={`border-radius: ${bannerConfig.visual.borderRadius};`}
                          loading={index === 0 ? 'eager' : 'lazy'}
                        />
                      ) : null}
                    </div>
                  </div>
                );
              }) : (
                <div class="w-full h-full rounded-lg" style={`background: ${getFallbackBannerCSS()};`}></div>
              )}
              
              {bannerConfig.visual.applyGradientOverlay && (
                <div class="absolute inset-0 w-full h-full pointer-events-none" style={`background: ${bannerConfig.visual.gradientOverlay}; border-radius: ${bannerConfig.visual.borderRadius};`}></div>
              )}
            </div>
          </div>
        </div>
      </div>
    )}
  </div>

  <!-- =============================================================== -->
  <!-- ⭐ FIXED: Main content with clean single breakpoint           -->
  <!-- =============================================================== -->
  <div class={`w-full z-30 pointer-events-none relative`}>
    <div id="main-panel-wrapper" class="responsive-panel-wrapper relative max-w-[var(--page-width)] mx-auto pointer-events-auto">
      <div id="main-grid" class="transition duration-700 w-full left-0 right-0 grid grid-cols-[4.5rem_1fr] md:grid-cols-[16.5rem_auto] grid-rows-[auto_1fr_auto] md:grid-rows-[auto] mx-auto gap-4 md:gap-4 px-2 md:px-4 relative" style={`margin-top: ${mainContentOffset};`}>
         
        <!-- SIDEBAR SECTION - NARROW ON MOBILE, WIDE ON DESKTOP -->
        <div class="mb-4 col-span-1 md:max-w-[17.5rem] onload-animation">
          <!-- ⭐ UPDATED: Svelte Profile Component with custom author data -->
          <div class="hidden md:block mb-4">
            <Profile
              client:load
              slug={processedAuthorData.slug}
              customAvatar={processedAuthorData.customAvatar}
              customName={processedAuthorData.customName}
              customBio={processedAuthorData.customBio}
              customLink={processedAuthorData.customLink}
              isHomePage={currentPath === '/'}
              profileConfig={profileConfig}
              avatarConfig={avatarConfig}
            />
          </div>
          
          <!-- ⭐ UPDATED: Sidebar with custom author data -->
          <SideBar 
            class="flex-1" 
            headings={headings}
            postSlug={processedAuthorData.slug}
            customAvatar={processedAuthorData.customAvatar}
            customName={processedAuthorData.customName}
            customBio={processedAuthorData.customBio}
            pageMascotContext={Astro.props.pageMascotContext}
            hideProfile={true}
          ></SideBar>
        </div>
        
        <!-- MAIN CONTENT SECTION -->
        <main id="main" class="transition-swup-fade col-span-1 overflow-hidden">
          <div id="main-content-wrapper" class="onload-animation">
            <slot></slot>
            <div class="footer onload-animation hidden md:block">
              <Footer></Footer>
            </div>
          </div>
        </main>
        
        <!-- Footer for mobile screens - spans both columns -->
        <div class="footer col-span-2 onload-animation block md:hidden">
          <Footer></Footer>
        </div>
      </div>

      <BackToTop></BackToTop>
    </div>
  </div>

  <!-- =============================================================== -->
  <!-- TABLE OF CONTENTS SECTION                                      -->
  <!-- =============================================================== -->
  <div class="absolute w-full z-0 hidden 2xl:block">
    <div class="relative max-w-[var(--page-width)] mx-auto">
      {siteConfig.toc.enable && <div id="toc-wrapper" class="hidden md:block transition absolute top-0 -right-[var(--toc-width)] w-[var(--toc-width)] flex items-center toc-animated">
        <div id="toc-inner-wrapper" class="fixed top-14 w-[var(--toc-width)] h-[calc(100vh_-_20rem)] overflow-y-scroll overflow-x-hidden hide-scrollbar">
          <div id="toc" class="w-full h-full transition-swup-fade ">
            <div class="h-8 w-full"></div>
            <TOC headings={headings}></TOC>
            <div class="h-8 w-full"></div>
          </div>
        </div>
      </div>}

      {!siteConfig.toc.enable && <div id="toc"></div>}
    </div>
  </div>

  <!-- =============================================================== -->
  <!-- BLEEPY INTEGRATION                                             -->
  <!-- =============================================================== -->
  {contextForBleepy && (
    <div id="bleepy-page-context" style="display: none;" data-context={JSON.stringify(contextForBleepy)}></div>
  )}
  <Bleepy mascotContext={Astro.props.pageMascotContext} instanceIdentifier="LAYOUT_BLEEPY" />

  <!-- =============================================================== -->
  <!-- ⭐ NEW: CLIENT-SIDE SVELTE COMPONENTS                          -->
  <!-- =============================================================== -->
  
  <!-- Sidenav panels with settings and navigation -->
  <SidenavPanels client:load siteConfig={siteConfig} />
  
  <!-- ⭐ UPDATED: Mobile profile overlay with custom author data -->
  <MobileProfileOverlay 
    client:load 
    postSlug={processedAuthorData.slug}
    customAvatar={processedAuthorData.customAvatar}
    customName={processedAuthorData.customName}
    customBio={processedAuthorData.customBio}
    customLink={processedAuthorData.customLink}
    profileConfig={profileConfig}
    avatarConfig={avatarConfig}
  />
  
  <!-- ⭐ UPDATED: Special page features with oneColumn support -->
  <SpecialPageFeatures 
    client:load 
    currentPath={currentPath} 
    oneColumn={oneColumnMode}
  />
  
  <!-- Scroll effects and parallax -->
  <ScrollEffects client:load bannerConfig={bannerConfig} siteConfig={siteConfig} />
  
  <!-- Page load animations -->
  <PageAnimations client:load />

</Layout>

<!-- =============================================================== -->
<!-- ⭐ SUPER SIMPLIFIED: CSS with only essential positioning       -->
<!-- =============================================================== -->
<style define:vars={{
  'main-content-offset': mainContentOffset,
  'main-panel-top': mainPanelTop,
  'navbar-spacing': navbarSpacing,
  'mobile-navbar-spacing': bannerConfig.navbar.mobilePortraitSpacing, /* ⭐ ADD THIS LINE */
}}>
  /* ⭐ ESSENTIAL: Main grid margin */
  #main-grid {
    margin-top: var(--main-content-offset);
  }
  
  /* ⭐ ESSENTIAL: Main panel positioning */
  .responsive-panel-wrapper {
    top: var(--main-panel-top);
    transition: top 0.3s ease;
  }
  
  /* ⭐ ESSENTIAL: Banner spacing from navbar */
  #banner-container {
    margin-top: var(--navbar-spacing);
    transition: margin-top 0.3s ease;
  }
  
  /* ⭐ THE MISSING PIECE: Mobile spacing when navbar is hidden */
  @media (max-width: 767px) {
    #banner-container {
      margin-top: var(--mobile-navbar-spacing);
    }
  }
</style>

<!-- =============================================================== -->
<!-- ⭐ MINIMAL: Only essential banner animation script remains      -->
<!-- =============================================================== -->
<script>
  import { createBannerAnimation } from '@/utils/bannerAnimation';
  import { getBannerAnimationSettings, bannerConfig } from '../config/banner.config';

  // Only initialize banner animation - everything else is handled by Svelte components
  document.addEventListener('DOMContentLoaded', () => {
    const bannerController = createBannerAnimation({
      containerId: 'standard-banner-container',
      animationConfig: getBannerAnimationSettings(),
      getBannerItemPreviewDetails: bannerConfig.standardBannerConfig.getBannerItemPreviewDetails,
      isVideoBannerItem: bannerConfig.standardBannerConfig.isVideoBannerItem,
      isImageBannerItem: bannerConfig.standardBannerConfig.isImageBannerItem
    });

    const initialized = bannerController.initialize();
    
    if (initialized) {
      console.log('Banner animation system initialized successfully');
    }
  });
</script>