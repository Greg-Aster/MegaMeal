---
// =====================================================================
// COMPONENT IMPORTS - CLEAN AND SIMPLE
// =====================================================================
import Footer from '@components/Footer.astro'
import Navbar from '@components/Navbar.astro'
import BackToTop from '@components/control/BackToTop.astro'
import SideBar from '@components/widget/SideBar.astro'
import Profile from '@components/widget/Profile.astro'
import Layout from './Layout.astro'
import { Icon } from 'astro-icon/components'
import { siteConfig } from '../config/config'
import type { MarkdownHeading } from 'astro'
import TOC from "../components/widget/TOC.astro";
import ImageWrapper from "../components/misc/ImageWrapper.astro";
import { Image } from 'astro:assets';
import TimelineController from '../components/timeline/TimelineBanner.astro';
import '../styles/timeline-styles.css';
import '../styles/banner-styles.css';
import { url } from '../utils/url-utils';

// Bleepy (AI Assistant) related imports
import Bleepy from '@components/bleepy/Bleepy.astro';
import BleepyBanner from '@components/bleepy/BleepyBanner.astro';

// Banner configuration - ONLY import what works in Astro frontmatter
import {
  bannerConfig,
  determineBannerConfiguration,
  getFallbackBannerCSS,
  getBannerAnimationSettings,
  getBannerLink,
  getPageSpecificOverlap
} from '../config/banner.config';

// =====================================================================
// TYPESCRIPT INTERFACES
// =====================================================================

interface Props {
  title?: string
  banner?: string              
  description?: string
  lang?: string
  setOGTypeArticle?: boolean
  headings?: MarkdownHeading[] 
  post?: any                   
  bannerLink?: string          
  isPostPage?: boolean         
  pageMascotContext?: string;  
  backgroundImage?: string | null; 
}

// =====================================================================
// PROPS DESTRUCTURING AND SETUP
// =====================================================================

const { 
  title, 
  banner = siteConfig.banner.src,
  description, 
  lang, 
  setOGTypeArticle, 
  headings = [], 
  post,
  bannerLink = '',
  isPostPage = false,
  backgroundImage 
} = Astro.props

// =====================================================================
// DYNAMIC BACKGROUND IMAGE LOGIC
// =====================================================================

const getDynamicBackgroundImage = () => {
  if (backgroundImage === "none" || backgroundImage === "") {
    return null;
  }
  if (backgroundImage) {
    return backgroundImage;
  }
  if (siteConfig.banner.enable && siteConfig.banner.src) {
    return siteConfig.banner.src;
  }
  return null;
};

const currentBackgroundImage = getDynamicBackgroundImage();
const shouldShowParallaxBackground = currentBackgroundImage && siteConfig.banner.enable && bannerConfig.parallax.enabled;

// =====================================================================
// BANNER CONFIGURATION PROCESSING
// =====================================================================

// Determine current page type
let currentPageType = 'default';
const currentPath = Astro.url.pathname;

if (currentPath === '/' || currentPath === '/home/') {
  currentPageType = 'home';
} else if (currentPath.startsWith('/posts/') || currentPath.startsWith('/blog/')) {
  currentPageType = 'post';
} else if (currentPath.startsWith('/archive/') || currentPath.startsWith('/categories/') || currentPath.startsWith('/tags/')) {
  currentPageType = 'archive';
} else if (currentPath.startsWith('/about/')) {
  currentPageType = 'about';
}

// Get banner configuration
const bannerConfiguration = determineBannerConfiguration(post, currentPageType, bannerLink);

// Destructure the configuration
const {
  postData,
  bannerType,
  bannerDataSources,
  layout,
  finalBannerLink,
  currentBannerType
} = bannerConfiguration;

// Destructure banner type flags
const {
  hasTimelineBanner,
  hasVideoBanner,
  hasImageBanner,
  hasAssistantBanner,
  hasStandardBanner,
  hasPostBanner,
  isStandardPage
} = bannerType;

// Destructure layout values - UPDATED FOR RESPONSIVE NAVBAR
const {
  mainPanelTop,
  bannerHeight: BANNER_HEIGHT,
  bannerOverlap: BANNER_OVERLAP,
  mainContentOffset,
  dynamicOverlap
} = layout;

// ‚≠ê NEW: Use CSS variable for responsive navbar spacing
const responsiveNavbarSpacing = 'var(--navbar-spacing)';

// =====================================================================
// BLEEPY CONTEXT SETUP
// =====================================================================

let contextForBleepy = null;
if (post && post.data) {
  contextForBleepy = {
    title: post.data.title,
    description: post.data.description,
    tags: post.data.tags,
    category: post.data.category,
    timelineEra: post.data.timelineEra,
    timelineLocation: post.data.timelineLocation,
    mascotContext: post.data.mascotContext,
  };
}
---

<Layout 
  title={title} 
  banner={banner} 
  description={description} 
  lang={lang} 
  setOGTypeArticle={setOGTypeArticle}
  post={post} 
>

  <!-- =============================================================== -->
  <!-- PARALLAX BACKGROUND SECTION                                   -->
  <!-- =============================================================== -->
  {shouldShowParallaxBackground && 
    <div id="parallax-banner" class="fixed top-0 left-0 w-full h-screen z-[-1] overflow-hidden">
      <ImageWrapper 
        id="parallax-image" 
        alt="Site background image" 
        class="parallax-bg object-cover w-full h-[120vh]"
        src={currentBackgroundImage} 
        position={siteConfig.banner.position || 'center'}
      />
      {siteConfig.banner.credit?.enable && 
        <div class="absolute bottom-4 right-4 text-white/50 text-xs bg-black/30 px-2 py-1 rounded">
          {siteConfig.banner.credit.text && 
            <a href={siteConfig.banner.credit.url || '#'} class="hover:text-white/80 transition">
              {siteConfig.banner.credit.text}
            </a>
          }
        </div>
      }
      <div class="absolute inset-0 bg-gradient-to-b from-black/20 to-black/50 pointer-events-none"></div>
    </div>
  }

  <!-- =============================================================== -->
  <!-- NAVIGATION BAR SECTION - RESPONSIVE VISIBILITY                -->
  <!-- =============================================================== -->
  <slot slot="head" name="head"></slot>
  <div id="top-row" class="z-50 pointer-events-none relative transition-all duration-700 max-w-[var(--page-width)] px-2 md:px-4 mx-auto">
    <div id="navbar-wrapper" class="pointer-events-auto sticky top-0 transition-all duration-300">
      <Navbar></Navbar>
    </div>
  </div>

  <!-- =============================================================== -->
  <!-- UNIFIED BANNER CONTAINER - RESPONSIVE SPACING                 -->
  <!-- =============================================================== -->
  <div id="banner-container" 
    class={`z-10 w-full relative transition-all duration-500
      ${hasTimelineBanner ? 'has-timeline-banner' : ''}
      ${hasVideoBanner ? 'has-video-banner' : ''}
      ${hasImageBanner ? 'has-image-banner' : ''}
      ${hasAssistantBanner ? 'has-assistant-banner' : ''}
      ${hasStandardBanner ? 'has-standard-banner' : ''}`}
    style={`margin-top: ${responsiveNavbarSpacing};`}
  >

    <!-- VIDEO BANNER -->
    {hasVideoBanner && (
      <div class="banner-container-video">
        <div class="banner-aspect-container">
          <div class="banner-content-wrapper">
            <iframe
              src={`https://www.youtube.com/embed/${hasPostBanner && post?.data?.bannerType === "video" ? post.data.bannerData.videoId : bannerDataSources.videoBannerData?.videoId}?autoplay=0&mute=0&controls=1`}
              title="YouTube video player"
              frameborder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture;"
              allowfullscreen
              class="absolute top-0 left-0 w-full h-full"
            ></iframe>
          </div>
        </div>
      </div>
    )}

    <!-- ASSISTANT BANNER -->
    {hasAssistantBanner && (
      <div class="banner-container-assistant">
        <div class="banner-aspect-container">
          <div class="banner-content-wrapper">
            <BleepyBanner backgroundImageUrl={bannerDataSources.assistantBannerData?.imageUrl} />
          </div>
        </div>
      </div>
    )}

    <!-- TIMELINE BANNER -->
    {hasTimelineBanner && (
      <div class="banner-container-timeline">
        <div class="banner-aspect-container">
          <div class="banner-content-wrapper">
            <TimelineController
              category={hasPostBanner && post?.data?.bannerType === "timeline" ? post.data.bannerData.category : (bannerDataSources.timelineBannerData?.category || "MEGA MEAL")}
              startYear={hasPostBanner && post?.data?.bannerType === "timeline" ? post.data.bannerData.startYear : bannerDataSources.timelineBannerData?.startYear}
              endYear={hasPostBanner && post?.data?.bannerType === "timeline" ? post.data.bannerData.endYear : bannerDataSources.timelineBannerData?.endYear}
              background={hasPostBanner && post?.data?.bannerType === "timeline" ? (post.data.bannerData.background || "/posts/timeline/universe.png") : (bannerDataSources.timelineBannerData?.background || "/posts/timeline/universe.png")}
              compact={hasPostBanner && post?.data?.bannerType === "timeline" ? (post.data.bannerData.compact || false) : (bannerDataSources.timelineBannerData?.compact || false)}
              class="w-full h-full"
              asBanner={true}
              bannerHeight="100%"
            />
          </div>
        </div>
      </div>
    )}

    <!-- IMAGE BANNER -->
    {hasImageBanner && (
      <div class="banner-container-image">
        <div class="banner-aspect-container">
          <div class="banner-content-wrapper">
            {finalBannerLink ? (
              <a 
                href={finalBannerLink} 
                aria-label="Banner Link" 
                class="group block w-full h-full"
              >
                <div class="absolute transition pointer-events-none group-hover:bg-black/30 group-active:bg-black/50 w-full h-full z-50 flex items-center justify-center">
                  <Icon
                    name="fa6-solid:link"
                    class="text-white drop-shadow-lg"
                    style="font-size: clamp(2rem, 4vw, 4rem);"
                  ></Icon>
                </div>
                <img
                  src={hasPostBanner && post?.data?.bannerType === "image" ? (post.data.bannerData?.imageUrl || post.data.image) : (bannerDataSources.imageBannerData?.imageUrl || siteConfig.banner.src)}
                  alt={hasPostBanner ? (post.data.title || "Post banner image") : (title || "Banner image")}
                  class="w-full h-full object-cover"
                />
              </a>
            ) : (
              <img
                src={hasPostBanner && post?.data?.bannerType === "image" ? (post.data.bannerData?.imageUrl || post.data.image) : (bannerDataSources.imageBannerData?.imageUrl || siteConfig.banner.src)}
                alt={hasPostBanner ? (post.data.title || "Post banner image") : (title || "Banner image")}
                class="w-full h-full object-cover"
              />
            )}
          </div>
        </div>
      </div>
    )}

    <!-- STANDARD BANNER - FIXED HIERARCHY -->
    {hasStandardBanner && (
      <div class="banner-container-standard">
        <div class="banner-aspect-container">
          <div class="banner-content-wrapper">
            <div id="standard-banner-container">
              {bannerConfig.standardBannerConfig.bannerList.length > 0 ? bannerConfig.standardBannerConfig.bannerList.map((item, index) => {
                const bannerLink = getBannerLink(index);
                const isClickable = bannerLink !== null;
                const isVideoItem = bannerConfig.standardBannerConfig.isVideoBannerItem(item);
                const isImageItem = bannerConfig.standardBannerConfig.isImageBannerItem(item);
                
                return (
                  <div 
                    class="banner-slide absolute inset-0 w-full h-full transition-opacity"
                    style={`
                      transition-duration: ${bannerConfig.standardBannerConfig.animation.transitionDuration}ms;
                      opacity: ${index === 0 ? '1' : '0'};
                    `}
                    data-banner-index={index}
                  >
                    <div
                      class="banner-link group w-full h-full relative cursor-pointer"
                      data-has-link={isClickable}
                      data-href={bannerLink}
                      aria-label={`Banner ${index + 1}${isClickable ? ' - Click to visit link' : ' - Click for information'}`}
                      role="button"
                      tabindex="0"
                    >
                      <div class="absolute inset-0 w-full h-full transition-all duration-300 opacity-0 group-hover:opacity-30 bg-black pointer-events-none z-10"></div>
                      
                      <div class="absolute inset-0 w-full h-full flex items-center justify-center transition-all duration-300 opacity-0 group-hover:opacity-100 z-20 pointer-events-none">
                        <Icon
                          name="fa6-solid:circle-info"
                          class="text-white drop-shadow-lg"
                          style="font-size: clamp(2rem, 4vw, 4rem);"
                        />
                      </div>
                      
                      {isVideoItem ? (
                        <>
                          <video
                            src={item.src}
                            autoplay={bannerConfig.standardBannerConfig.video.autoplay}
                            muted={bannerConfig.standardBannerConfig.video.muted}
                            loop={bannerConfig.standardBannerConfig.video.loop}
                            playsinline={bannerConfig.standardBannerConfig.video.playsInline}
                            controls={bannerConfig.standardBannerConfig.video.controls}
                            preload={item.preload || bannerConfig.standardBannerConfig.video.preload}
                            class={`banner-video w-full h-full object-${bannerConfig.visual.objectFit} object-${bannerConfig.visual.objectPosition} transition-transform duration-300 group-hover:scale-105`}
                            style={`border-radius: ${bannerConfig.visual.borderRadius};`}
                            onerror="this.style.display='none'; var ne = this.nextElementSibling; if (ne) ne.style.display='block';"
                          >
                            Your browser does not support the video tag.
                          </video>
                          <Image
                            src={item.fallbackImage}
                            alt={item.alt}
                            width={bannerConfig.layout.maxWidth}
                            height={Math.round(bannerConfig.layout.maxWidth * 0.5625)}
                            class={`banner-image-fallback w-full h-full object-${bannerConfig.visual.objectFit} object-${bannerConfig.visual.objectPosition} transition-transform duration-300 group-hover:scale-105`}
                            style={`border-radius: ${bannerConfig.visual.borderRadius}; display: none;`}
                            loading="lazy"
                          />
                        </>
                      ) : isImageItem ? (
                        <Image
                          src={item.src}
                          alt={item.alt}
                          width={bannerConfig.layout.maxWidth}
                          height={Math.round(bannerConfig.layout.maxWidth * 0.5625)}
                          class={`banner-image w-full h-full object-${bannerConfig.visual.objectFit} object-${bannerConfig.visual.objectPosition} transition-transform duration-300 group-hover:scale-105`}
                          style={`border-radius: ${bannerConfig.visual.borderRadius};`}
                          loading={index === 0 ? 'eager' : 'lazy'}
                        />
                      ) : null}
                    </div>
                  </div>
                );
              }) : (
                <div class="w-full h-full rounded-lg" style={`background: ${getFallbackBannerCSS()};`}></div>
              )}
              
              {bannerConfig.visual.applyGradientOverlay && (
                <div class="absolute inset-0 w-full h-full pointer-events-none" style={`background: ${bannerConfig.visual.gradientOverlay}; border-radius: ${bannerConfig.visual.borderRadius};`}></div>
              )}
            </div>
          </div>
        </div>
      </div>
    )}
  </div>

  <!-- =============================================================== -->
  <!-- MAIN CONTENT WRAPPER - RESPONSIVE POSITIONING                 -->
  <!-- =============================================================== -->
  <div class={`w-full z-30 pointer-events-none relative`}>
    <div id="main-panel-wrapper" class="responsive-panel-wrapper relative max-w-[var(--page-width)] mx-auto pointer-events-auto" style={`top: ${mainPanelTop}; position: relative;`}>
      <div id="main-grid" class="transition duration-700 w-full left-0 right-0 grid grid-cols-[5rem_1fr] md:grid-cols-[12rem_1fr] lg:grid-cols-[16.5rem_auto] grid-rows-[auto_1fr_auto] lg:grid-rows-[auto]
         mx-auto gap-2 sm:gap-3 md:gap-4 px-2 md:px-4 relative" style={`margin-top: ${mainContentOffset};`}>
         
        <!-- =============================================================== -->
        <!-- MOBILE PROFILE OVERLAY - POSITIONED RELATIVE TO PROFILE BUTTON -->
        <!-- =============================================================== -->
        <!-- This overlay shows the Profile widget positioned near the profile button -->
        <div 
          id="mobile-profile-overlay" 
          class="opacity-0 translate-y-4 pointer-events-none transition-all duration-300 z-[60] md:hidden"
          style="position: fixed; width: 17.5rem;"
        >
          <div class="p-2">
            <div class="card-base p-3 shadow-xl">
              <!-- Close button -->
              <div class="flex justify-end mb-2">
                <button id="mobile-profile-close" aria-label="Close Profile" class="btn-plain rounded-full w-6 h-6 flex items-center justify-center text-sm hover:bg-black/10 dark:hover:bg-white/10">
                  ‚úï
                </button>
              </div>
              <!-- Profile widget content -->
              <div id="mobile-profile-content">
                <Profile 
                  slug={postData?.slug || ''} 
                  customAvatar={postData?.customAvatar || ''}
                  customName={postData?.customName || ''}
                  customBio={postData?.customBio || ''}
                />
              </div>
            </div>
          </div>
        </div>
         
        <!-- SIDEBAR SECTION -->
        <SideBar 
          class="mb-4 col-span-1 lg:max-w-[17.5rem] onload-animation" 
          headings={headings}
          postSlug={postData?.slug || ''}
          customAvatar={postData?.customAvatar || ''}
          customName={postData?.customName || ''}
          customBio={postData?.customBio || ''}
          pageMascotContext={Astro.props.pageMascotContext}
        ></SideBar>
        
        <!-- =============================================================== -->
        <!-- SIDENAV SUBMENU PANELS - POSITIONED RELATIVE TO MAIN LAYOUT    -->
        <!-- =============================================================== -->
        <!-- These panels need to be in MainGridLayout to escape sidebar constraints -->
        
        <!-- MENU TOGGLE PANEL (ARCHIVE/ABOUT + ALL LINKS) -->
        <div 
          id="sidenav-menu-panel" 
          class="sidenav-panel opacity-0 -translate-x-4 pointer-events-none transition-all duration-200 ease-in-out fixed z-[100] card-base shadow-lg rounded-lg w-48 md:w-56 lg:w-64"
        >
          <div class="p-2">
            <div class="text-xs font-medium text-center mb-2 text-neutral-400 px-2">Navigation</div>
            
            <!-- Archive and About Links (Priority) -->
            <div class="flex flex-col gap-1 mb-3 border-b border-black/10 dark:border-white/10 pb-2">
              <a href={url('/archive/')} class="nav-menu-link btn-plain rounded-md px-3 py-2.5 text-sm font-medium active:scale-95 transition-all duration-200 flex items-center gap-2 text-left w-full">
                <Icon name="material-symbols:archive-outline" class="text-base flex-shrink-0" />
                <span class="flex-1 min-w-0 truncate">Archive</span>
              </a>
              <a href={url('/about/')} class="nav-menu-link btn-plain rounded-md px-3 py-2.5 text-sm font-medium active:scale-95 transition-all duration-200 flex items-center gap-2 text-left w-full">
                <Icon name="material-symbols:person-outline" class="text-base flex-shrink-0" />
                <span class="flex-1 min-w-0 truncate">About</span>
              </a>
            </div>
            
            <!-- All Other Links -->
            <div class="flex flex-col gap-1">
              <a href={url('/')} class="nav-menu-link btn-plain rounded-md px-3 py-2.5 text-sm font-medium active:scale-95 transition-all duration-200 flex items-center gap-2 text-left w-full">
                <Icon name="material-symbols:home-outline" class="text-base flex-shrink-0" />
                <span class="flex-1 min-w-0 truncate">Home</span>
              </a>
              <a href={url('/projects/')} class="nav-menu-link btn-plain rounded-md px-3 py-2.5 text-sm font-medium active:scale-95 transition-all duration-200 flex items-center gap-2 text-left w-full">
                <Icon name="material-symbols:work-outline" class="text-base flex-shrink-0" />
                <span class="flex-1 min-w-0 truncate">Projects</span>
              </a>
              <a href={url('/posts/')} class="nav-menu-link btn-plain rounded-md px-3 py-2.5 text-sm font-medium active:scale-95 transition-all duration-200 flex items-center gap-2 text-left w-full">
                <Icon name="material-symbols:article-outline" class="text-base flex-shrink-0" />
                <span class="flex-1 min-w-0 truncate">Blog</span>
              </a>
              <a href={url('/timeline/')} class="nav-menu-link btn-plain rounded-md px-3 py-2.5 text-sm font-medium active:scale-95 transition-all duration-200 flex items-center gap-2 text-left w-full">
                <Icon name="material-symbols:timeline" class="text-base flex-shrink-0" />
                <span class="flex-1 min-w-0 truncate">Timeline</span>
              </a>
              <a href={url('/cookbook/')} class="nav-menu-link btn-plain rounded-md px-3 py-2.5 text-sm font-medium active:scale-95 transition-all duration-200 flex items-center gap-2 text-left w-full">
                <Icon name="material-symbols:menu-book-outline" class="text-base flex-shrink-0" />
                <span class="flex-1 min-w-0 truncate">Cookbook</span>
              </a>
            </div>
          </div>
        </div>

        <!-- SETTINGS SUBMENU PANEL -->
        <div 
          id="sidenav-settings-panel" 
          class="sidenav-panel opacity-0 -translate-x-4 pointer-events-none transition-all duration-200 ease-in-out fixed z-[100] card-base shadow-lg rounded-lg w-48 md:w-56 lg:w-64"
        >
          <div class="p-2">
            <div class="text-xs font-medium text-center mb-2 text-neutral-400 px-2">Settings</div>
            <div class="flex flex-col gap-1">
              
              <!-- SEARCH BUTTON -->
              <button id="sidenav-search-btn" class="btn-plain rounded-md px-3 py-2.5 text-sm font-medium active:scale-95 transition-all duration-200 flex items-center gap-2 text-left w-full">
                <Icon name="material-symbols:search" class="text-base flex-shrink-0" />
                <span class="flex-1 min-w-0 truncate">Search</span>
              </button>
              
              <!-- THEME TOGGLE -->
              <button id="sidenav-theme-btn" class="btn-plain rounded-md px-3 py-2.5 text-sm font-medium active:scale-95 transition-all duration-200 flex items-center gap-2 text-left w-full">
                <Icon name="material-symbols:dark-mode-outline" class="text-base flex-shrink-0 dark:hidden" />
                <Icon name="material-symbols:light-mode-outline" class="text-base flex-shrink-0 hidden dark:block" />
                <span class="flex-1 min-w-0 truncate">Theme</span>
              </button>
              
              <!-- FULLSCREEN TOGGLE -->
              <button id="sidenav-fullscreen-btn" class="btn-plain rounded-md px-3 py-2.5 text-sm font-medium active:scale-95 transition-all duration-200 items-center gap-2 text-left w-full hidden md:flex">
                <Icon name="fa6-solid:expand" class="fullscreen-icon text-base flex-shrink-0"></Icon>
                <Icon name="fa6-solid:compress" class="fullscreen-exit-icon text-base flex-shrink-0 hidden"></Icon>
                <span class="flex-1 min-w-0 truncate">Fullscreen</span>
              </button>
              
              <!-- DISPLAY SETTINGS (HUE SLIDER) -->
              {!siteConfig.themeColor.fixed && (
                <>
                  <button id="sidenav-display-btn" class="btn-plain rounded-md px-3 py-2.5 text-sm font-medium active:scale-95 transition-all duration-200 flex items-center gap-2 text-left w-full">
                    <Icon name="material-symbols:palette-outline" class="text-base flex-shrink-0" />
                    <span class="flex-1 min-w-0 truncate">Colors</span>
                  </button>
                  
                  <!-- INLINE HUE SLIDER -->
                  <div id="inline-hue-slider" class="hidden mt-1 px-2 py-2 bg-[var(--card-bg)] rounded-md border border-black/10 dark:border-white/10">
                    <div class="flex items-center justify-between gap-1 mb-2 text-xs">
                      <span class="font-medium text-neutral-600 dark:text-neutral-400 flex-shrink-0">Hue</span>
                      <div id="hue-value-display" class="bg-[var(--btn-regular-bg)] text-[var(--btn-content)] px-1 py-1 rounded text-xs font-bold min-w-[1.5rem] text-center flex-shrink-0">
                        230
                      </div>
                      <button id="hue-reset-btn" aria-label="Reset Hue" class="btn-plain rounded px-1 py-1 text-xs active:scale-90 flex-shrink-0">
                        <Icon name="fa6-solid:arrow-rotate-left" class="text-xs" />
                      </button>
                    </div>
                    <!-- VERTICAL HUE SLIDER -->
                    <div class="w-full flex justify-center">
                      <div class="w-6 h-24 rounded relative overflow-hidden hue-gradient">
                        <input 
                          type="range" 
                          id="inline-hue-input"
                          min="0" 
                          max="360" 
                          value="230" 
                          step="5"
                          orient="vertical"
                          class="absolute inset-0 w-full h-full opacity-0 cursor-pointer hue-slider"
                          aria-label="Theme Hue"
                        />
                        <div id="hue-thumb" class="absolute left-0 w-full h-0.5 bg-white border border-black/30 rounded-sm pointer-events-none shadow-sm hue-thumb"></div>
                      </div>
                    </div>
                  </div>
                </>
              )}
            </div>
          </div>
        </div>
        
        <!-- MAIN CONTENT SECTION -->
        <main id="main" class="transition-swup-fade col-span-1 overflow-hidden">
          <div id="main-content-wrapper" class="onload-animation">
            <slot></slot>
            <div class="footer onload-animation hidden lg:block">
              <Footer></Footer>
            </div>
          </div>
        </main>
        
        <!-- Footer for mobile screens - spans both columns -->
        <div class="footer col-span-2 onload-animation block lg:hidden">
          <Footer></Footer>
        </div>
      </div>

      <BackToTop></BackToTop>
    </div>
  </div>

  <!-- =============================================================== -->
  <!-- TABLE OF CONTENTS SECTION                                      -->
  <!-- =============================================================== -->
  <div class="absolute w-full z-0 hidden 2xl:block">
    <div class="relative max-w-[var(--page-width)] mx-auto">
      {siteConfig.toc.enable && <div id="toc-wrapper" class="hidden lg:block transition absolute top-0 -right-[var(--toc-width)] w-[var(--toc-width)] flex items-center toc-animated">
        <div id="toc-inner-wrapper" class="fixed top-14 w-[var(--toc-width)] h-[calc(100vh_-_20rem)] overflow-y-scroll overflow-x-hidden hide-scrollbar">
          <div id="toc" class="w-full h-full transition-swup-fade ">
            <div class="h-8 w-full"></div>
            <TOC headings={headings}></TOC>
            <div class="h-8 w-full"></div>
          </div>
        </div>
      </div>}

      {!siteConfig.toc.enable && <div id="toc"></div>}
    </div>
  </div>

  <!-- =============================================================== -->
  <!-- BLEEPY INTEGRATION                                             -->
  <!-- =============================================================== -->
  {contextForBleepy && (
    <div id="bleepy-page-context" style="display: none;" data-context={JSON.stringify(contextForBleepy)}></div>
  )}
  <Bleepy mascotContext={Astro.props.pageMascotContext} instanceIdentifier="LAYOUT_BLEEPY" />

</Layout>

<!-- =============================================================== -->
<!-- RESPONSIVE LAYOUT STYLES - NAVBAR-AWARE POSITIONING            -->
<!-- =============================================================== -->
<style define:vars={{
  'main-content-offset': mainContentOffset,
}}>
  /* Main content positioning - responsive to navbar visibility */
  #main-grid {
    margin-top: var(--main-content-offset);
  }
  
  /* ‚≠ê NEW: Responsive panel wrapper adjustments */
  .responsive-panel-wrapper {
    /* Adjust top positioning based on navbar visibility */
    transition: top 0.3s ease;
  }
  
  /* ‚≠ê NEW: Banner container responsive spacing */
  #banner-container {
    /* Smooth transition when navbar appears/disappears */
    transition: margin-top 0.3s ease, transform 0.3s ease;
  }
  
  /* ‚≠ê NEW: Mobile portrait specific adjustments */
  @media (max-width: 768px) and (orientation: portrait) {
    .responsive-panel-wrapper {
      /* Optimize spacing when navbar is hidden */
      top: 0 !important;
    }
    
    #banner-container {
      /* Remove extra top margin when navbar is hidden */
      margin-top: 0 !important;
    }
    
    /* Adjust main grid top margin for better mobile portrait experience */
    #main-grid {
      margin-top: 1rem;
    }
  }
  
  /* ‚≠ê NEW: Mobile landscape and desktop consistency */
  @media (min-width: 769px), (max-width: 768px) and (orientation: landscape) {
    .responsive-panel-wrapper {
      /* Standard positioning when navbar is visible */
      top: var(--main-panel-top, 0);
    }
    
    #banner-container {
      /* Standard navbar spacing when visible */
      margin-top: var(--navbar-spacing);
    }
  }
  
  /* ‚≠ê NEW: Sidenav panel states and hue slider styles */
  .sidenav-panel.panel-open {
    @apply opacity-100 translate-x-0 pointer-events-auto;
  }
  
  .hue-gradient {
    background: linear-gradient(to bottom, 
      hsl(360, 100%, 50%), 
      hsl(300, 100%, 50%), 
      hsl(240, 100%, 50%), 
      hsl(180, 100%, 50%), 
      hsl(120, 100%, 50%), 
      hsl(60, 100%, 50%), 
      hsl(0, 100%, 50%));
  }
  
  .hue-slider {
    writing-mode: bt-lr; 
    -webkit-appearance: slider-vertical;
  }
  
  .hue-thumb {
    top: calc((360 - 230)/360 * 100% - 1px);
  }
</style>

<!-- =============================================================== -->
<!-- JAVASCRIPT - ENHANCED WITH RESPONSIVE NAVBAR AWARENESS         -->
<!-- =============================================================== -->
<script>
  import { createBannerAnimation, VideoLoadingState } from '@/utils/bannerAnimation';
  import {
    getBannerAnimationSettings,
    bannerConfig,
    standardBannerConfig
  } from '../config/banner.config';

  // ‚≠ê ENHANCED: Function to inject config values and handle responsive navbar
  function updateBannerDimensions() {
    try {
      const config = bannerConfig?.dimensions;
      if (config) {
        document.documentElement.style.setProperty('--banner-aspect-ratio', config.aspectRatio);
        document.documentElement.style.setProperty('--banner-max-width', config.maxWidth);
        document.documentElement.style.setProperty('--banner-padding', config.padding);
        document.documentElement.style.setProperty('--banner-border-radius', config.borderRadius);
        console.log('Banner dimensions updated from config:', config);
      } else {
        console.warn('Banner config dimensions not available');
      }
    } catch (error) {
      console.error('Failed to set banner dimensions:', error);
    }
  }

  // ‚≠ê NEW: Handle responsive navbar height and spacing updates
  function updateResponsiveNavbarSpacing() {
    const navbar = document.getElementById('navbar-wrapper');
    if (navbar) {
      const navbarHeight = navbar.offsetHeight;
      const isNavbarVisible = window.getComputedStyle(navbar).display !== 'none';
      
      // Update CSS variables based on navbar visibility
      if (isNavbarVisible) {
        document.documentElement.style.setProperty('--navbar-height', `${navbarHeight}px`);
        document.documentElement.style.setProperty('--navbar-spacing', `${navbarHeight}px`);
      } else {
        document.documentElement.style.setProperty('--navbar-height', '0px');
        document.documentElement.style.setProperty('--navbar-spacing', '0px');
      }
      
      console.log(`Navbar spacing updated: visible=${isNavbarVisible}, height=${navbarHeight}px`);
    }
  }

  // ‚≠ê NEW: Initialize sidenav panel functionality
  function initializeSidenavPanels() {
    const menuToggleBtn = document.getElementById('sidenav-menu-toggle');
    const menuPanel = document.getElementById('sidenav-menu-panel');
    const settingsToggleBtn = document.getElementById('sidenav-settings-toggle');
    const settingsPanel = document.getElementById('sidenav-settings-panel');
    const searchBtn = document.getElementById('sidenav-search-btn');
    const themeBtn = document.getElementById('sidenav-theme-btn');
    const fsBtn = document.getElementById('sidenav-fullscreen-btn');
    const displayBtn = document.getElementById('sidenav-display-btn');

    // ‚≠ê NEW: Dynamic panel positioning function
    function positionPanelRelativeToButton(panel, button) {
      if (!panel || !button) return;
      
      const buttonRect = button.getBoundingClientRect();
      const panelWidth = panel.offsetWidth;
      const screenWidth = window.innerWidth;
      const screenHeight = window.innerHeight;
      
      // Calculate position to the left of the button
      let left = buttonRect.left - panelWidth - 8; // 8px gap
      let top = buttonRect.top;
      
      // Ensure panel doesn't go off the left edge
      if (left < 8) {
        left = buttonRect.right + 8; // Show on right instead
      }
      
      // Ensure panel doesn't go off the right edge
      if (left + panelWidth > screenWidth - 8) {
        left = screenWidth - panelWidth - 8;
      }
      
      // Ensure panel doesn't go off the bottom
      if (top + panel.offsetHeight > screenHeight - 8) {
        top = screenHeight - panel.offsetHeight - 8;
      }
      
      // Ensure panel doesn't go off the top
      if (top < 8) {
        top = 8;
      }
      
      // Apply positioning
      panel.style.left = `${left}px`;
      panel.style.top = `${top}px`;
    }

    // Close all panels utility
    function closeAllSidenavPanels(except = null) {
      const allPanels = document.querySelectorAll('.sidenav-panel');
      allPanels.forEach(panel => {
        if (panel !== except && panel.classList.contains('panel-open')) {
          panel.classList.remove('panel-open');
        }
      });
    }

    // Menu toggle panel
    if (menuToggleBtn && menuPanel) {
      menuToggleBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        closeAllSidenavPanels(menuPanel);
        
        // Position panel relative to button before showing
        positionPanelRelativeToButton(menuPanel, menuToggleBtn);
        
        menuPanel.classList.toggle('panel-open');
      });
    }

    // Settings panel toggle
    if (settingsToggleBtn && settingsPanel) {
      settingsToggleBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        closeAllSidenavPanels(settingsPanel);
        
        // Position panel relative to button before showing
        positionPanelRelativeToButton(settingsPanel, settingsToggleBtn);
        
        settingsPanel.classList.toggle('panel-open');
      });
    }

    // Search functionality
    searchBtn?.addEventListener('click', () => {
      const searchPanel = document.getElementById('search-panel'); 
      if (searchPanel) {
        closeAllSidenavPanels();
        searchPanel.classList.toggle('float-panel-closed');
        
        const searchInput = searchPanel.querySelector('input[type="search"]');
        if (searchInput && !searchPanel.classList.contains('float-panel-closed')) {
          setTimeout(() => (searchInput as HTMLInputElement).focus(), 100);
        }
      }
    });

    // Theme toggle
    themeBtn?.addEventListener('click', () => {
      const isDark = document.documentElement.classList.toggle('dark');
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
    });

    // Fullscreen toggle
    if (fsBtn) {
      const expandIcon = fsBtn.querySelector('.fullscreen-icon');
      const compressIcon = fsBtn.querySelector('.fullscreen-exit-icon');
      
      const updateIcon = () => {
        const isFullscreen = !!document.fullscreenElement;
        expandIcon?.classList.toggle('hidden', isFullscreen);
        compressIcon?.classList.toggle('hidden', !isFullscreen);
      };
      
      fsBtn.addEventListener('click', () => {
        if (!document.fullscreenElement) {
          document.documentElement.requestFullscreen();
        } else {
          document.exitFullscreen();
        }
      });
      
      document.addEventListener('fullscreenchange', updateIcon);
      updateIcon();
    }

    // Hue slider functionality
    const inlineSlider = document.getElementById('inline-hue-slider');
    const hueInput = document.getElementById('inline-hue-input');
    const hueDisplay = document.getElementById('hue-value-display');
    const hueThumb = document.getElementById('hue-thumb');
    const hueResetBtn = document.getElementById('hue-reset-btn');
    
    function getCurrentHue() {
      return parseInt(localStorage.getItem('hue') || '230');
    }
    
    function setHue(newHue) {
      localStorage.setItem('hue', newHue.toString());
      document.documentElement.style.setProperty('--hue', newHue);
      
      if (hueDisplay) hueDisplay.textContent = newHue;
      if (hueInput) hueInput.value = newHue;
      if (hueThumb) {
        hueThumb.style.top = `calc((360 - ${newHue})/360 * 100% - 1px)`;
      }
    }
    
    const currentHue = getCurrentHue();
    setHue(currentHue);
    
    displayBtn?.addEventListener('click', (e) => {
      e.stopPropagation();
      if (inlineSlider) {
        inlineSlider.classList.toggle('hidden');
      }
    });
    
    hueInput?.addEventListener('input', (e) => {
      const newHue = parseInt(e.target.value);
      setHue(newHue);
    });
    
    hueResetBtn?.addEventListener('click', () => {
      const defaultHue = 230;
      setHue(defaultHue);
    });

    // ‚≠ê NEW: Handle window resize - reposition open panels
    window.addEventListener('resize', () => {
      const openMenuPanel = document.querySelector('#sidenav-menu-panel.panel-open');
      const openSettingsPanel = document.querySelector('#sidenav-settings-panel.panel-open');
      
      if (openMenuPanel && menuToggleBtn) {
        positionPanelRelativeToButton(openMenuPanel, menuToggleBtn);
      }
      
      if (openSettingsPanel && settingsToggleBtn) {
        positionPanelRelativeToButton(openSettingsPanel, settingsToggleBtn);
      }
    });

    // Outside click handler for sidenav panels
    document.addEventListener('click', (e) => {
      const target = e.target;
      
      if (target instanceof Element) {
        const clickedPanel = target.closest('.sidenav-panel');
        const clickedButton = target.closest('#sidenav-menu-toggle, #sidenav-settings-toggle, #sidenav-display-btn');
        
        // Close inline slider if clicking outside
        if (inlineSlider && !inlineSlider.classList.contains('hidden')) {
          if (!inlineSlider.contains(target) && !displayBtn?.contains(target)) {
            inlineSlider.classList.add('hidden');
          }
        }
        
        if (!clickedPanel && !clickedButton) {
          closeAllSidenavPanels();
        }
      }
    });
  }

  // ‚≠ê NEW: Orientation change handler for responsive navbar
  function handleOrientationChange() {
    console.log('Orientation changed, updating navbar spacing');
    
    // Small delay to allow CSS media queries to apply
    setTimeout(() => {
      updateResponsiveNavbarSpacing();
      updateNavbarHeight(); // Legacy function for compatibility
    }, 100);
  }

  // ===================================================================
  // MOBILE PROFILE OVERLAY FUNCTIONALITY
  // ===================================================================
  
  function initializeMobileProfileOverlay() {
    const overlay = document.getElementById('mobile-profile-overlay');
    const closeBtn = document.getElementById('mobile-profile-close');
    const profileBtn = document.getElementById('sidenav-profile-btn');
    
    if (!overlay || !closeBtn) {
      console.warn('Profile overlay elements not found');
      return;
    }
    
    console.log('Mobile profile overlay initialized');
    
    // ‚≠ê NEW: Position overlay relative to profile button
    function positionProfileOverlay() {
      if (!profileBtn) return;
      
      const buttonRect = profileBtn.getBoundingClientRect();
      const overlayWidth = overlay.offsetWidth;
      const screenWidth = window.innerWidth;
      const screenHeight = window.innerHeight;
      
      // Calculate position to the left of the button
      let left = buttonRect.left - overlayWidth - 8; // 8px gap
      let top = buttonRect.top;
      
      // Ensure overlay doesn't go off the left edge
      if (left < 8) {
        left = buttonRect.right + 8; // Show on right instead
      }
      
      // Ensure overlay doesn't go off the right edge
      if (left + overlayWidth > screenWidth - 8) {
        left = screenWidth - overlayWidth - 8;
      }
      
      // Ensure overlay doesn't go off the bottom
      if (top + overlay.offsetHeight > screenHeight - 8) {
        top = screenHeight - overlay.offsetHeight - 8;
      }
      
      // Ensure overlay doesn't go off the top
      if (top < 8) {
        top = 8;
      }
      
      // Apply positioning - need to convert to fixed positioning
      overlay.style.position = 'fixed';
      overlay.style.left = `${left}px`;
      overlay.style.top = `${top}px`;
    }
    
    // Function to show the overlay
    function showProfileOverlay() {
      console.log('Showing profile overlay');
      
      // Position first, then show
      positionProfileOverlay();
      
      overlay.classList.remove('pointer-events-none', 'opacity-0', 'translate-y-4');
      overlay.classList.add('opacity-100', 'translate-y-0');
    }
    
    // Function to hide the overlay
    function hideProfileOverlay() {
      console.log('Hiding profile overlay');
      overlay.classList.add('pointer-events-none', 'opacity-0', 'translate-y-4');
      overlay.classList.remove('opacity-100', 'translate-y-0');
    }
    
    // Listen for the custom event from SideNavbar
    document.addEventListener('profile:toggle', (e) => {
      console.log('Profile toggle event received');
      const isVisible = overlay.classList.contains('opacity-100');
      
      if (isVisible) {
        hideProfileOverlay();
      } else {
        showProfileOverlay();
      }
    });
    
    // Close button functionality
    closeBtn.addEventListener('click', hideProfileOverlay);
    
    // Click outside to close (only if clicking on main content area or banner)
    document.addEventListener('click', (e) => {
      const target = e.target as Element;
      const isVisible = overlay.classList.contains('opacity-100');
      
      if (isVisible && 
          !overlay.contains(target) && 
          !target.closest('#unified-sidenav')) {
        hideProfileOverlay();
      }
    });
    
    // Escape key to close
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && overlay.classList.contains('opacity-100')) {
        hideProfileOverlay();
      }
    });
    
    // ‚≠ê NEW: Handle window resize - reposition if open
    window.addEventListener('resize', () => {
      const isVisible = overlay.classList.contains('opacity-100');
      if (isVisible) {
        positionProfileOverlay();
      }
    });
  }

  // Initialize everything when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    updateBannerDimensions();         // ‚≠ê CRITICAL: Set CSS variables first
    updateResponsiveNavbarSpacing();  // ‚≠ê NEW: Set responsive navbar spacing
    initializePageAnimations();
    initializeBannerAnimation();
    initializeParallaxEffect();
    initializeEventListeners();
    initializeSpecialPageFeatures();
    initializeMobileProfileOverlay(); // ‚≠ê Initialize profile overlay
    initializeSidenavPanels();        // ‚≠ê NEW: Initialize sidenav panels
  });

  function initializePageAnimations() {
    updateNavbarHeight();
    
    const elements = document.querySelectorAll('.onload-animation');
    elements.forEach((element, index) => {
      setTimeout(() => {
        element.classList.add('loaded');
      }, 100 + (index * 50));
    });
    
    const postImage = document.getElementById('post-image');
    if (postImage) {
      setTimeout(() => {
        postImage.classList.remove('opacity-0', 'scale-105');
      }, 100);
    }
  }

  function initializeBannerAnimation() {
    const bannerController = createBannerAnimation({
      containerId: 'standard-banner-container',
      animationConfig: getBannerAnimationSettings(),
      getBannerItemPreviewDetails: standardBannerConfig.getBannerItemPreviewDetails,
      isVideoBannerItem: bannerConfig.standardBannerConfig.isVideoBannerItem,
      isImageBannerItem: bannerConfig.standardBannerConfig.isImageBannerItem
    });

    const initialized = bannerController.initialize();
    
    if (initialized) {
      console.log('Banner animation system initialized successfully');
    } else {
      console.log('Banner animation system initialization skipped (not applicable)');
    }
  }

  function initializeParallaxEffect() {
    const parallaxBanner = document.getElementById('parallax-banner');
    if (!parallaxBanner) return;
    
    const parallaxImage = document.getElementById('parallax-image');
    if (!parallaxImage) return;
    
    const scrollFactor = bannerConfig.parallax.scrollFactor;
    let ticking = false;

    function updateParallax() {
      const scrollY = window.scrollY;
      const offset = scrollY * scrollFactor;
      
      if (parallaxImage) {
        parallaxImage.style.transform = `translate3d(0, ${offset}px, 0)`;
      }
      ticking = false;
    }

    window.addEventListener('scroll', () => {
      if (!ticking) {
        requestAnimationFrame(updateParallax);
        ticking = true;
      }
    });

    window.addEventListener('load', () => {
      setTimeout(() => {
        parallaxBanner.classList.add('loaded');
      }, 100);
    });
  }

  function updateNavbarHeight() {
    const navbar = document.getElementById('navbar-wrapper');
    if (navbar) {
      const navbarHeight = navbar.offsetHeight;
      document.documentElement.style.setProperty('--navbar-height', `${navbarHeight}px`);
    }
  }

  function initializeEventListeners() {
    window.addEventListener('scroll', () => {
      const scrollY = window.scrollY;
      const tocWrapper = document.querySelector('#toc-wrapper');
      if (tocWrapper) {
        if (scrollY > 300) {
          tocWrapper.classList.remove('toc-hide');
        } else {
          tocWrapper.classList.add('toc-hide');
        }
      }
    });
    
    // ‚≠ê ENHANCED: Listen for resize AND orientation changes
    window.addEventListener('resize', () => {
      updateNavbarHeight();
      updateResponsiveNavbarSpacing();
    });

    // ‚≠ê NEW: Handle orientation changes specifically
    window.addEventListener('orientationchange', handleOrientationChange);
    
    // ‚≠ê NEW: Handle media query changes for navbar visibility
    if (window.matchMedia) {
      const portraitQuery = window.matchMedia('(max-width: 768px) and (orientation: portrait)');
      const landscapeQuery = window.matchMedia('(max-width: 768px) and (orientation: landscape)');
      
      portraitQuery.addListener(handleOrientationChange);
      landscapeQuery.addListener(handleOrientationChange);
    }

    if ((window as any).siteConfig && (window as any).siteConfig.transparency) {
      document.documentElement.style.setProperty('--bg-opacity', (window as any).siteConfig.transparency);
    }
  }

  function initializeSpecialPageFeatures() {
    const currentPath = window.location.pathname;
    const isCookbookPage = currentPath.includes('cookbook');
    const isFirstContactPage = currentPath.includes('first-contact');
    const isSpecialPage = isCookbookPage || isFirstContactPage;
    
    if (!isSpecialPage) {
      restoreNormalState();
      return;
    }
    
    const pageType = isCookbookPage ? 'cookbook' : 'first-contact';
    console.log(`${pageType} page detected, enabling fullscreen features`);
    
    if (!localStorage.getItem('specialPageOriginalState')) {
      const originalState = localStorage.getItem('fullscreenMode') === 'true';
      localStorage.setItem('specialPageOriginalState', originalState.toString());
      console.log('Saved original fullscreen state:', originalState);
    }
    
    localStorage.setItem('fullscreenMode', 'true');
    localStorage.setItem('fullscreenBannerOverride', 'true');
    document.body.classList.add('force-mobile-view');
    
    if (isCookbookPage) {
      initializeViewToggle();
    }
  }

  function restoreNormalState() {
    const originalState = localStorage.getItem('specialPageOriginalState');
    
    if (originalState !== null) {
      const wasOriginallyFullscreen = originalState === 'true';
      
      if (!wasOriginallyFullscreen) {
        localStorage.setItem('fullscreenMode', 'false');
        localStorage.removeItem('fullscreenBannerOverride');
        document.body.classList.remove('force-mobile-view');
        console.log('Restored to non-fullscreen (original state)');
      } else {
        console.log('Keeping fullscreen (was original state)');
      }
    }
  }

  function initializeViewToggle() {
    const galleryBtn = document.getElementById('gallery-view-btn');
    const listBtn = document.getElementById('list-view-btn');
    const galleryView = document.getElementById('gallery-view');
    const listView = document.getElementById('list-view');
    
    if (!galleryBtn || !listBtn || !galleryView || !listView) return;
    
    const savedView = localStorage.getItem('cookbookView') || 'gallery';
    
    if (savedView === 'list') {
      showListView();
    } else {
      showGalleryView();
    }
    
    galleryBtn.addEventListener('click', () => {
      showGalleryView();
      localStorage.setItem('cookbookView', 'gallery');
    });
    
    listBtn.addEventListener('click', () => {
      showListView();
      localStorage.setItem('cookbookView', 'list');
    });
    
    function showGalleryView() {
      galleryView.classList.remove('hidden');
      listView.classList.add('hidden');
      galleryBtn.className = "px-3 py-1 rounded-md text-sm font-medium transition-all duration-200 bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow-sm";
      listBtn.className = "px-3 py-1 rounded-md text-sm font-medium transition-all duration-200 text-gray-600 dark:text-neutral-400 hover:text-gray-900 dark:hover:text-white";
    }
    
    function showListView() {
      galleryView.classList.add('hidden');
      listView.classList.remove('hidden');
      listBtn.className = "px-3 py-1 rounded-md text-sm font-medium transition-all duration-200 bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow-sm";
      galleryBtn.className = "px-3 py-1 rounded-md text-sm font-medium transition-all duration-200 text-gray-600 dark:text-neutral-400 hover:text-gray-900 dark:hover:text-white";
    }
  }

  // TypeScript interfaces for global types
  interface BannerAnimationAPI {
    start: () => void;
    stop: () => void;
    next: () => void;
    pause: (reason?: string) => void;
    resume: (reason?: string) => void;
    navigateToIndex: (index: number) => void;
    navigateToPrevious: () => void;
    navigateToNext: () => void;
    getCurrentIndex: () => number;
    isPaused: () => boolean;
    getTotalSlides: () => number;
    isManuallyNavigating: () => boolean;
    isVideoSlide: (index: number) => boolean;
    getVideoLoadingState: (index: number) => VideoLoadingState;
    getVideoStats: () => {
      totalVideos: number;
      loadedCount: number;
      loadingCount: number;
      errorCount: number;
      unloadedCount: number;
    };
    showPreview: (index: number) => void;
    hidePreview: (index: number) => void;
    hideAllPreviews: () => void;
    getStatus: () => {
      isPaused: boolean;
      pauseReason: string;
      currentIndex: number;
      isAnimating: boolean;
      hasTimeout: boolean;
    };
  }

  declare global {
    interface Window {
      siteConfig?: {
        transparency?: string | number;
      };
      bannerAnimation?: BannerAnimationAPI;
    }
  }

  // ‚≠ê NEW: Debug helper for responsive navbar
  window.debugNavbar = function() {
    const navbar = document.getElementById('navbar-wrapper');
    const isVisible = navbar ? window.getComputedStyle(navbar).display !== 'none' : false;
    const navbarHeight = navbar ? navbar.offsetHeight : 0;
    const navbarSpacing = getComputedStyle(document.documentElement).getPropertyValue('--navbar-spacing');
    
    console.log('Navbar Debug Info:', {
      isVisible,
      navbarHeight,
      navbarSpacing,
      orientation: screen.orientation?.type || 'unknown',
      windowWidth: window.innerWidth,
      windowHeight: window.innerHeight
    });
  };

  // Debug helper
  window.resetSpecialPageState = function() {
    localStorage.removeItem('specialPageOriginalState');
    localStorage.removeItem('cookbookView');
    console.log('Special page state reset. Refresh page to test.');
  };
</script>