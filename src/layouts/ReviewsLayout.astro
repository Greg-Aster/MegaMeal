---
// =====================================================================
// REVIEWS LAYOUT COMPONENT (ReviewsLayout.astro)
// =====================================================================
//
// PURPOSE:
// This layout component is designed for review sections of the website.
// It provides a structure with a navigation bar, a main content area,
// a specialized ReviewsSideBar, and a footer. It is inspired by
// MainGridLayout.astro but tailored for review content.
//
// MAIN FEATURES:
// - Responsive layout structure
// - Integration of Navbar and Footer
// - Specialized ReviewsSideBar for review-related navigation/widgets
// - Main content slot for individual review pages
// - Utilizes the site's banner system (configurable via banner.config.ts)
//
// PROPS INTERFACE (similar to MainGridLayout):
// - title: Page title (defaults to "Reviews Page")
// - banner: Banner image URL (fallback)
// - description: Page description (defaults to "Product and service reviews.")
// - headings: Array of headings for TOC generation
// - post: Post data object (for banner configuration)
// - bannerLink: Optional link for banner clicks
// - isPostPage: Boolean flag for post-specific behavior
// - pageMascotContext: Context data for Bleepy mascot
//
// =====================================================================

// =====================================================================
// COMPONENT IMPORTS
// =====================================================================
// Import all necessary components and utilities
import Footer from '@components/Footer.astro'
import Navbar from '@components/Navbar.astro'
import BackToTop from '@components/control/BackToTop.astro'
import ReviewsSideBar from '@components/widget/ReviewsSideBar.astro' // MODIFIED: ReviewsSideBar import
import Layout from './Layout.astro'
import { Icon } from 'astro-icon/components'
import { siteConfig } from '../config/config'
import type { MarkdownHeading } from 'astro'
import TOC from "../components/widget/TOC.astro";
import ImageWrapper from "../components/misc/ImageWrapper.astro";
import { Image } from 'astro:assets';
import TimelineController from '../components/timeline/TimelineBanner.astro';
import '../styles/timeline-styles.css';

// Bleepy (AI Assistant) related imports
import Bleepy from '@components/bleepy/Bleepy.astro';
import BleepyBanner from '@components/bleepy/BleepyBanner.astro';

// Banner configuration - ALL banner logic is now in banner.config.ts
import {
  bannerConfig,
  determineBannerConfiguration,
  getResponsiveBannerDimensions,
  getFallbackBannerCSS,
  getBannerAnimationSettings,
  getBannerLink,
  hasAnyBannerLinks,
  getLinkPreviewData,
  getIconSVG
} from '../config/banner.config';

// =====================================================================
// TYPESCRIPT INTERFACES
// =====================================================================

interface Props {
  title?: string
  banner?: string              // Fallback banner image URL
  description?: string
  lang?: string
  setOGTypeArticle?: boolean
  headings?: MarkdownHeading[] // For TOC generation
  post?: any                   // Post data object (contains banner configuration)
  bannerLink?: string          // Optional link for banner clicks
  isPostPage?: boolean         // Flag for post-specific behavior
  pageMascotContext?: string;  // Context data for Bleepy mascot
}

// =====================================================================
// PROPS DESTRUCTURING AND SETUP
// =====================================================================

const {
  title = "Reviews Page", // MODIFIED: Default title
  banner = siteConfig.banner.src, // Use site default if no banner provided
  description = "Product and service reviews.", // MODIFIED: Default description
  lang,
  setOGTypeArticle,
  headings = [],
  post,
  bannerLink = '',
  isPostPage = false
} = Astro.props

// Debug logging for development
console.log('REVIEWS_LAYOUT - isPostPage prop received:', Astro.props.isPostPage);
console.log('REVIEWS_LAYOUT - pageMascotContext prop received:', Astro.props.pageMascotContext);

// =====================================================================
// BANNER CONFIGURATION PROCESSING - SINGLE SOURCE OF TRUTH
// =====================================================================
// ALL banner logic is now handled by banner.config.ts functions

// Get complete banner configuration from banner.config.ts
const bannerConfiguration = determineBannerConfiguration(post, bannerLink);

// Destructure the configuration for easy access
const {
  postData, // Used by banner system, not directly by sidebar here
  bannerType,
  bannerDataSources,
  layout,
  finalBannerLink,
  currentBannerType
} = bannerConfiguration;

// Destructure banner type flags for template use
const {
  hasTimelineBanner,
  hasVideoBanner,
  hasImageBanner,
  hasAssistantBanner,
  hasStandardBanner,
  hasPostBanner,
  isStandardPage
} = bannerType;

// Destructure layout values
const {
  mainPanelTop,
  navbarSpacing,
  bannerHeight: BANNER_HEIGHT,
  bannerOverlap: BANNER_OVERLAP,
  mainContentOffset
} = layout;

// =====================================================================
// BLEEPY (AI ASSISTANT) CONTEXT SETUP
// =====================================================================
// Prepare context data for the Bleepy mascot if post data is available

let contextForBleepy = null;
if (post && post.data) {
  contextForBleepy = {
    title: post.data.title,
    description: post.data.description,
    tags: post.data.tags,
    category: post.data.category,
    timelineEra: post.data.timelineEra,
    timelineLocation: post.data.timelineLocation,
    mascotContext: post.data.mascotContext,
  };
}
---

<Layout
  title={title}
  banner={banner}
  description={description}
  lang={lang}
  setOGTypeArticle={setOGTypeArticle}
  post={post}
>

  <!-- =============================================================== -->
  <!-- PARALLAX BACKGROUND SECTION                                   -->
  <!-- =============================================================== -->
  {siteConfig.banner.enable && bannerConfig.parallax.enabled &&
    <div id="parallax-banner" class="fixed top-0 left-0 w-full h-screen z-[-1] overflow-hidden">
      <ImageWrapper
        id="parallax-image"
        alt="Site background image"
        class="parallax-bg object-cover w-full h-[120vh]"
        src={siteConfig.banner.src}
        position={siteConfig.banner.position || 'center'}
      />
      {siteConfig.banner.credit?.enable &&
        <div class="absolute bottom-4 right-4 text-white/50 text-xs bg-black/30 px-2 py-1 rounded">
          {siteConfig.banner.credit.text &&
            <a href={siteConfig.banner.credit.url || '#'} class="hover:text-white/80 transition">
              {siteConfig.banner.credit.text}
            </a>
          }
        </div>
      }
      <div class="absolute inset-0 bg-gradient-to-b from-black/20 to-black/50 pointer-events-none"></div>
    </div>
  }

  <!-- =============================================================== -->
  <!-- NAVIGATION BAR SECTION                                        -->
  <!-- =============================================================== -->
  <slot slot="head" name="head"></slot>
  <div id="top-row" class="z-50 pointer-events-none relative transition-all duration-700 max-w-[var(--page-width)] px-0 md:px-4 mx-auto">
    <div id="navbar-wrapper" class="pointer-events-auto sticky top-0 transition-all">
      <Navbar></Navbar>
    </div>
  </div>

<!-- =============================================================== -->
<!-- UNIFIED BANNER CONTAINER                                       -->
<!-- =============================================================== -->
<div id="banner-container"
  class={`z-10 w-full relative transition-all duration-500
    ${hasTimelineBanner ? 'has-timeline-banner' : ''}
    ${hasVideoBanner ? 'has-video-banner' : ''}
    ${hasImageBanner ? 'has-image-banner' : ''}
    ${hasAssistantBanner ? 'has-assistant-banner' : ''}
    ${hasStandardBanner ? 'has-standard-banner' : ''}
    ${hasTimelineBanner || hasAssistantBanner ? '' : 'overflow-hidden'}`}
  style={`margin-top: ${navbarSpacing};`}
>

  <!-- ============================================================= -->
  <!-- VIDEO BANNER CONTENT                                         -->
  <!-- ============================================================= -->
  {hasVideoBanner && (
    <div class="video-banner-content max-w-screen-2xl mx-auto px-4">
      <div class="relative w-full pb-[56.25%] bg-black overflow-hidden shadow-lg rounded-lg">
        <iframe
          src={`https://www.youtube.com/embed/${hasPostBanner && post?.data?.bannerType === "video" ? post.data.bannerData.videoId : bannerDataSources.videoBannerData?.videoId}?autoplay=0&mute=0&controls=1`}
          title="YouTube video player"
          frameborder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture;"
          allowfullscreen
          class="absolute top-0 left-0 w-full h-full"
        ></iframe>
      </div>
    </div>
  )}

  <!-- ============================================================= -->
  <!-- ASSISTANT BANNER CONTENT (BLEEPY)                            -->
  <!-- ============================================================= -->
  {hasAssistantBanner && (
    <div class="assistant-banner-content max-w-screen-2xl mx-auto px-0 py-0" style="height: 70vh;">
      <BleepyBanner backgroundImageUrl={bannerDataSources.assistantBannerData?.imageUrl} />
    </div>
  )}

  <!-- ============================================================= -->
  <!-- TIMELINE BANNER CONTENT                                      -->
  <!-- ============================================================= -->
  {hasTimelineBanner && (
    <div class="timeline-banner-content max-w-screen-2xl mx-auto px-0 py-0">
      <div class="timeline-banner-container">
        <div class="timeline-banner-inner">
          <TimelineController
            category={hasPostBanner && post?.data?.bannerType === "timeline" ? post.data.bannerData.category : (bannerDataSources.timelineBannerData?.category || "MEGA MEAL")}
            startYear={hasPostBanner && post?.data?.bannerType === "timeline" ? post.data.bannerData.startYear : bannerDataSources.timelineBannerData?.startYear}
            endYear={hasPostBanner && post?.data?.bannerType === "timeline" ? post.data.bannerData.endYear : bannerDataSources.timelineBannerData?.endYear}
            background={hasPostBanner && post?.data?.bannerType === "timeline" ? (post.data.bannerData.background || "/posts/timeline/universe.png") : (bannerDataSources.timelineBannerData?.background || "/posts/timeline/universe.png")}
            compact={hasPostBanner && post?.data?.bannerType === "timeline" ? (post.data.bannerData.compact || false) : (bannerDataSources.timelineBannerData?.compact || false)}
            class="timeline-banner-controller"
            asBanner={true}
            bannerHeight={hasPostBanner && post?.data?.bannerType === "timeline" ? (post.data.bannerData.height || "70vh") : (bannerDataSources.timelineBannerData?.height || "70vh")}
          />
        </div>
      </div>
    </div>
  )}

  <!-- ============================================================= -->
  <!-- IMAGE BANNER CONTENT                                         -->
  <!-- ============================================================= -->
  {hasImageBanner && (
    <div class="image-banner-content max-w-screen-2xl mx-auto px-0">
      <div class="relative w-full overflow-hidden shadow-lg rounded-lg">
        {finalBannerLink ? (
          <a
            href={finalBannerLink}
            aria-label="Banner Link"
            class="group block relative"
          >
            <div class="absolute transition pointer-events-none group-hover:bg-black/30 group-active:bg-black/50 w-full h-full z-50 flex items-center justify-center">
              <Icon
                name="fa6-solid:link"
                class="transition opacity-0 scale-90 group-hover:scale-100 group-hover:opacity-100 text-white text-5xl"
              ></Icon>
            </div>
            <img
              src={hasPostBanner && post?.data?.bannerType === "image" ? (post.data.bannerData?.imageUrl || post.data.image) : ((bannerDataSources.imageBannerData as any)?.imageUrl || siteConfig.banner.src)}
              alt={hasPostBanner ? (post.data.title || "Post banner image") : (title || "Banner image")}
              class="w-full object-cover"
            />
          </a>
        ) : (
          <img
            src={hasPostBanner && post?.data?.bannerType === "image" ? (post.data.bannerData?.imageUrl || post.data.image) : ((bannerDataSources.imageBannerData as any)?.imageUrl || siteConfig.banner.src)}
            alt={hasPostBanner ? (post.data.title || "Post banner image") : (title || "Banner image")}
            class="w-full object-cover"
          />
        )}
      </div>
    </div>
  )}

<!-- ============================================================= -->
  <!-- STANDARD ANIMATED BANNER - ENHANCED UX WITH VIDEO SUPPORT    -->
  <!-- ============================================================= -->
  {hasStandardBanner && (
    <div id="standard-banner-container" class="animated-banner-content max-w-screen-2xl mx-auto h-full relative" style={`height: ${BANNER_HEIGHT};`}>
      {bannerConfig.standardBannerConfig.bannerList.length > 0 ? bannerConfig.standardBannerConfig.bannerList.map((item, index) => {
        const bannerLink = getBannerLink(index);
        const isClickable = bannerLink !== null;
        const isVideoItem = bannerConfig.standardBannerConfig.isVideoBannerItem(item);
        const isImageItem = bannerConfig.standardBannerConfig.isImageBannerItem(item);

        return (
          <div
            class="banner-slide absolute inset-0 w-full h-full transition-opacity"
            style={`
              transition-duration: ${bannerConfig.standardBannerConfig.animation.transitionDuration}ms;
              opacity: ${index === 0 ? '1' : '0'};
            `}
            data-banner-index={index}
          >
            {isClickable ? (
              <a
                href={bannerLink}
                class="banner-link block w-full h-full relative group"
                aria-label={`Banner Link ${index + 1}`}
              >
                <div class="absolute inset-0 w-full h-full transition-all duration-300 opacity-0 group-hover:opacity-30 bg-black pointer-events-none z-10"></div>
                <div class="absolute inset-0 w-full h-full flex items-center justify-center transition-all duration-300 opacity-0 group-hover:opacity-100 z-20 pointer-events-none">
                  <Icon
                    name="fa6-solid:arrow-up-right-from-square"
                    class="text-white text-4xl drop-shadow-lg"
                  />
                </div>
                {isVideoItem ? (
                  <>
                    <video
                      src={item.src}
                      autoplay={bannerConfig.standardBannerConfig.video.autoplay}
                      muted={bannerConfig.standardBannerConfig.video.muted}
                      loop={bannerConfig.standardBannerConfig.video.loop}
                      playsinline={bannerConfig.standardBannerConfig.video.playsInline}
                      controls={bannerConfig.standardBannerConfig.video.controls}
                      preload={item.preload || bannerConfig.standardBannerConfig.video.preload}
                      class={`banner-video w-full h-full object-${bannerConfig.visual.objectFit} object-${bannerConfig.visual.objectPosition} transition-transform duration-300 group-hover:scale-105`}
                      style={`border-radius: ${bannerConfig.visual.borderRadius};`}
                      onerror="this.style.display='none'; this.nextElementSibling.style.display='block';"
                    >
                      Your browser does not support the video tag.
                    </video>
                    <Image
                      src={item.fallbackImage}
                      alt={item.alt}
                      width={bannerConfig.layout.maxWidth}
                      height={Math.round(bannerConfig.layout.maxWidth * 0.5625)}
                      class={`banner-image-fallback w-full h-full object-${bannerConfig.visual.objectFit} object-${bannerConfig.visual.objectPosition} transition-transform duration-300 group-hover:scale-105`}
                      style={`border-radius: ${bannerConfig.visual.borderRadius}; display: none;`}
                      loading="lazy"
                    />
                  </>
                ) : isImageItem ? (
                  <Image
                    src={item.src}
                    alt={item.alt}
                    width={bannerConfig.layout.maxWidth}
                    height={Math.round(bannerConfig.layout.maxWidth * 0.5625)}
                    class={`banner-image w-full h-full object-${bannerConfig.visual.objectFit} object-${bannerConfig.visual.objectPosition} transition-transform duration-300 group-hover:scale-105`}
                    style={`border-radius: ${bannerConfig.visual.borderRadius};`}
                    loading={index === 0 ? 'eager' : 'lazy'}
                  />
                ) : null}
              </a>
            ) : (
              <>
                {isVideoItem ? (
                  <>
                    <video
                      src={item.src}
                      autoplay={bannerConfig.standardBannerConfig.video.autoplay}
                      muted={bannerConfig.standardBannerConfig.video.muted}
                      loop={bannerConfig.standardBannerConfig.video.loop}
                      playsinline={bannerConfig.standardBannerConfig.video.playsInline}
                      controls={bannerConfig.standardBannerConfig.video.controls}
                      preload={item.preload || bannerConfig.standardBannerConfig.video.preload}
                      class={`banner-video w-full h-full object-${bannerConfig.visual.objectFit} object-${bannerConfig.visual.objectPosition}`}
                      style={`border-radius: ${bannerConfig.visual.borderRadius};`}
                      onerror="this.style.display='none'; this.nextElementSibling.style.display='block';"
                    >
                      Your browser does not support the video tag.
                    </video>
                    <Image
                      src={item.fallbackImage}
                      alt={item.alt}
                      width={bannerConfig.layout.maxWidth}
                      height={Math.round(bannerConfig.layout.maxWidth * 0.5625)}
                      class={`banner-image-fallback w-full h-full object-${bannerConfig.visual.objectFit} object-${bannerConfig.visual.objectPosition}`}
                      style={`border-radius: ${bannerConfig.visual.borderRadius}; display: none;`}
                      loading="lazy"
                    />
                  </>
                ) : isImageItem ? (
                  <Image
                    src={item.src}
                    alt={item.alt}
                    width={bannerConfig.layout.maxWidth}
                    height={Math.round(bannerConfig.layout.maxWidth * 0.5625)}
                    class={`banner-image w-full h-full object-${bannerConfig.visual.objectFit} object-${bannerConfig.visual.objectPosition}`}
                    style={`border-radius: ${bannerConfig.visual.borderRadius};`}
                    loading={index === 0 ? 'eager' : 'lazy'}
                  />
                ) : null}
              </>
            )}
          </div>
        );
      }) : (
        <div class="w-full h-full rounded-lg" style={`background: ${getFallbackBannerCSS()};`}></div>
      )}

      {bannerConfig.visual.applyGradientOverlay && (
        <div class="absolute inset-0 w-full h-full pointer-events-none" style={`background: ${bannerConfig.visual.gradientOverlay}; border-radius: ${bannerConfig.visual.borderRadius};`}></div>
      )}
    </div>
  )}

</div>

<!-- =============================================================== -->
<!-- MAIN CONTENT WRAPPER                                           -->
<!-- =============================================================== -->
<div class={`w-full z-30 pointer-events-none relative`}
  style={`margin-top: ${mainContentOffset};`}>
  <div class="relative max-w-[var(--page-width)] mx-auto pointer-events-auto">
    <div id="main-grid" class="transition duration-700 w-full left-0 right-0 grid grid-cols-[17.5rem_auto] grid-rows-[auto_1fr_auto] lg:grid-rows-[auto]
       mx-auto gap-4 px-0 md:px-4">

      <!-- ========================================================= -->
      <!-- SIDEBAR SECTION (ReviewsSideBar)                         -->
      <!-- ========================================================= -->
      <ReviewsSideBar
        class="mb-4 row-start-2 row-end-3 col-span-2 lg:row-start-1 lg:row-end-2 lg:col-span-1 lg:max-w-[17.5rem] onload-animation"
      ></ReviewsSideBar>

      <!-- ========================================================= -->
      <!-- MAIN CONTENT SECTION                                     -->
      <!-- ========================================================= -->
      <main id="main" class="transition-swup-fade col-span-2 lg:col-span-1 overflow-hidden">
        <div id="main-content-wrapper" class="onload-animation">
          <slot></slot>
          <div class="footer col-span-2 onload-animation hidden lg:block">
            <Footer></Footer>
          </div>
        </div>
      </main>

      <div class="footer col-span-2 onload-animation block lg:hidden">
        <Footer></Footer>
      </div>
    </div>

    <BackToTop></BackToTop>
  </div>
</div>

<!-- =============================================================== -->
<!-- TABLE OF CONTENTS (TOC) SECTION                                -->
<!-- =============================================================== -->
<div class="absolute w-full z-0 hidden 2xl:block">
  <div class="relative max-w-[var(--page-width)] mx-auto">
    {siteConfig.toc.enable && <div id="toc-wrapper" class="hidden lg:block transition absolute top-0 -right-[var(--toc-width)] w-[var(--toc-width)] flex items-center toc-animated">
      <div id="toc-inner-wrapper" class="fixed top-14 w-[var(--toc-width)] h-[calc(100vh_-_20rem)] overflow-y-scroll overflow-x-hidden hide-scrollbar">
        <div id="toc" class="w-full h-full transition-swup-fade ">
          <div class="h-8 w-full"></div>
          <TOC headings={headings}></TOC>
          <div class="h-8 w-full"></div>
        </div>
      </div>
    </div>}

    {!siteConfig.toc.enable && <div id="toc"></div>}
  </div>
</div>

<!-- =============================================================== -->
<!-- BLEEPY (AI ASSISTANT) INTEGRATION                              -->
<!-- =============================================================== -->
{contextForBleepy && (
  <div id="bleepy-page-context" style="display: none;" data-context={JSON.stringify(contextForBleepy)}></div>
)}
<Bleepy mascotContext={Astro.props.pageMascotContext} instanceIdentifier="LAYOUT_BLEEPY_REVIEWS" />

</Layout>

<style define:vars={{
  'banner-height': bannerConfig.layout.height.desktop,
  'banner-height-mobile': bannerConfig.layout.height.mobile,
  'banner-overlap': bannerConfig.layout.overlap.desktop,
  'banner-overlap-mobile': bannerConfig.layout.overlap.mobile,
  'navbar-height': bannerConfig.navbar.height.desktop,
  'navbar-height-mobile': bannerConfig.navbar.height.mobile,
  'main-content-offset': bannerConfig.layout.mainContentOffset.desktop,
  'main-content-offset-mobile': bannerConfig.layout.mainContentOffset.mobile,
  'standard-navbar-spacing': bannerConfig.navbar.spacing.standard,
  'timeline-navbar-spacing': bannerConfig.navbar.spacing.timeline,
  'video-navbar-spacing': bannerConfig.navbar.spacing.video,
  'image-navbar-spacing': bannerConfig.navbar.spacing.image,
  'assistant-navbar-spacing': bannerConfig.navbar.spacing.assistant,
}}>
  /* Banner type-specific spacing */
  .has-standard-banner {
    margin-top: var(--standard-navbar-spacing) !important;
  }

  .has-timeline-banner {
    margin-top: var(--timeline-navbar-spacing) !important;
  }

  .has-video-banner {
    margin-top: var(--video-navbar-spacing) !important;
  }

  .has-image-banner {
    margin-top: var(--image-navbar-spacing) !important;
  }

  .has-assistant-banner {
    margin-top: var(--assistant-navbar-spacing) !important;
  }

  /* Main content positioning */
  .banner-slide {
    will-change: opacity;
    backface-visibility: hidden;
    transform: translateZ(0);
  }

  .banner-image {
    will-change: opacity, transform;
    backface-visibility: hidden;
    transform: translateZ(0);
  }

  #standard-banner-container {
    position: relative;
    overflow: hidden;
  }

  #standard-banner-container .banner-slide {
    transition-property: opacity;
    transition-timing-function: ease-in-out;
  }

  @media (max-width: 768px) {
    #banner-container.absolute, #animated-banner {
      height: var(--banner-height-mobile);
    }

    .video-banner-content, .image-banner-content {
      padding: 0 0.5rem;
    }
  }

  .onload-animation {
    opacity: 0;
    transform: translateY(10px);
    transition: opacity 0.5s ease, transform 0.5s ease;
  }

  .onload-animation.loaded {
    opacity: 1;
    transform: translateY(0);
  }

  .toc-animated {
    transition: opacity 0.3s ease;
  }

  .toc-hide {
    opacity: 0;
    pointer-events: none;
  }

  @media (min-width: 1921px) {
    .animated-banner-content:after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(to right, rgba(0,0,0,0.15), transparent 10%, transparent 90%, rgba(0,0,0,0.15));
      z-index: 1;
    }
  }
</style>

<script>
  // Import banner animation utility and configuration
  import { createBannerAnimation } from '@/utils/bannerAnimation';
  import {
    getBannerAnimationSettings,
    getBannerLink,
    getLinkPreviewData,
    getIconSVG,
    bannerConfig
  } from '../config/banner.config';

  document.addEventListener('DOMContentLoaded', () => {
    initializePageAnimations();
    initializeBannerAnimation();
    initializeParallaxEffect();
    initializeEventListeners();
  });

  function initializePageAnimations() {
    updateNavbarHeight();

    const elements = document.querySelectorAll('.onload-animation');
    elements.forEach((element, index) => {
      setTimeout(() => {
        element.classList.add('loaded');
      }, 100 + (index * 50));
    });

    const postImage = document.getElementById('post-image');
    if (postImage) {
      setTimeout(() => {
        postImage.classList.remove('opacity-0', 'scale-105');
      }, 100);
    }
  }

  function initializeBannerAnimation() {
    const bannerController = createBannerAnimation({
      containerId: 'standard-banner-container',
      animationConfig: getBannerAnimationSettings(),
      getBannerLink: getBannerLink,
      getLinkPreviewData: getLinkPreviewData,
      getIconSVG: getIconSVG,
      isVideoBannerItem: bannerConfig.standardBannerConfig.isVideoBannerItem,
      isImageBannerItem: bannerConfig.standardBannerConfig.isImageBannerItem
    });

    const initialized = bannerController.initialize();

    if (initialized) {
      console.log('Banner animation system initialized successfully for ReviewsLayout');
    } else {
      console.log('Banner animation system initialization skipped for ReviewsLayout (not applicable)');
    }
  }

  function initializeParallaxEffect() {
    const parallaxBanner = document.getElementById('parallax-banner');
    if (!parallaxBanner) return;

    const parallaxImage = document.getElementById('parallax-image');
    if (!parallaxImage) return;

    const scrollFactor = bannerConfig.parallax.scrollFactor;
    let ticking = false;

    function updateParallax() {
      const scrollY = window.scrollY;
      const offset = scrollY * scrollFactor;

      if (parallaxImage) {
        parallaxImage.style.transform = `translate3d(0, ${offset}px, 0)`;
      }
      ticking = false;
    }

    window.addEventListener('scroll', () => {
      if (!ticking) {
        requestAnimationFrame(updateParallax);
        ticking = true;
      }
    });

    window.addEventListener('load', () => {
      setTimeout(() => {
        parallaxBanner.classList.add('loaded');
      }, 100);
    });
  }

  function updateNavbarHeight() {
    const navbar = document.getElementById('navbar-wrapper');
    if (navbar) {
      const navbarHeight = navbar.offsetHeight;
      document.documentElement.style.setProperty('--navbar-height', `${navbarHeight}px`);
    }
  }

  function initializeEventListeners() {
    window.addEventListener('scroll', () => {
      const scrollY = window.scrollY;
      const tocWrapper = document.querySelector('#toc-wrapper');
      if (tocWrapper) {
        if (scrollY > 300) {
          tocWrapper.classList.remove('toc-hide');
        } else {
          tocWrapper.classList.add('toc-hide');
        }
      }
    });

    window.addEventListener('resize', () => {
      updateNavbarHeight();
    });

    if ((window as any).siteConfig && (window as any).siteConfig.transparency) {
      document.documentElement.style.setProperty('--bg-opacity', (window as any).siteConfig.transparency);
    }
  }

  declare global {
    interface Window {
      bannerAnimation?: {
        start: () => void;
        stop: () => void;
        next: () => void;
        pause: (reason?: string) => void;
        resume: (reason?: string) => void;
        isPaused: () => boolean;
        getCurrentIndex: () => number;
        getCurrentLink: () => string | null;
        selectBanner: (index: number) => void;
        deselectBanner: () => void;
      };
    }
  }
</script>