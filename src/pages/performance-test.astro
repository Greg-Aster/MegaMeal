---
// Performance Test Page
// Compare Three.js vs Threlte performance
import Layout from '../layouts/Layout.astro'
---

<Layout title="Performance Test - Three.js vs Threlte">
  <main class="w-full h-screen bg-black text-white overflow-hidden">
    <!-- Header -->
    <div class="absolute top-0 left-0 right-0 z-50 bg-black bg-opacity-80 p-4">
      <h1 class="text-2xl font-bold mb-4">ðŸš€ Performance Test Suite</h1>
      <div class="flex gap-4">
        <button 
          id="test-threejs" 
          class="bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded text-white"
        >
          Test Three.js Original
        </button>
        <button 
          id="test-threlte" 
          class="bg-green-600 hover:bg-green-700 px-4 py-2 rounded text-white"
        >
          Test Threlte Version
        </button>
        <button 
          id="run-benchmark" 
          class="bg-purple-600 hover:bg-purple-700 px-4 py-2 rounded text-white"
        >
          Run Full Benchmark
        </button>
        <button 
          id="toggle-performance" 
          class="bg-yellow-600 hover:bg-yellow-700 px-4 py-2 rounded text-white"
        >
          Toggle Performance Panel
        </button>
      </div>
    </div>

    <!-- Test Results Display -->
    <div class="absolute top-20 right-4 w-80 bg-black bg-opacity-90 p-4 rounded-lg text-sm" id="results-panel" style="display: none;">
      <h3 class="text-lg font-bold mb-2">ðŸ“Š Test Results</h3>
      <div id="results-content">
        <!-- Results will be populated here -->
      </div>
    </div>

    <!-- Game Container -->
    <div id="game-container" class="w-full h-full">
      <!-- Game will be loaded here -->
    </div>

    <!-- Benchmark Modal -->
    <div id="benchmark-modal" class="fixed inset-0 bg-black bg-opacity-80 z-50 hidden items-center justify-center">
      <div class="bg-gray-900 p-8 rounded-lg max-w-4xl w-full m-4 max-h-screen overflow-y-auto">
        <h2 class="text-2xl font-bold mb-4">ðŸ§ª Performance Benchmark Suite</h2>
        <div id="benchmark-content">
          <!-- Benchmark UI will be loaded here -->
        </div>
        <button 
          id="close-benchmark" 
          class="mt-4 bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded text-white"
        >
          Close
        </button>
      </div>
    </div>
  </main>

  <script>
    // Performance test functionality
    let currentTest = null;
    let performancePanelVisible = false;

    // DOM elements
    const gameContainer = document.getElementById('game-container');
    const resultsPanel = document.getElementById('results-panel');
    const resultsContent = document.getElementById('results-content');
    const benchmarkModal = document.getElementById('benchmark-modal');
    const benchmarkContent = document.getElementById('benchmark-content');

    // Test Three.js version
    document.getElementById('test-threejs').addEventListener('click', async () => {
      console.log('ðŸ§ª Loading Three.js version...');
      clearContainer();
      
      try {
        // Load the original Three.js game
        const response = await fetch('/game');
        const html = await response.text();
        
        // Extract just the game content
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        const gameContent = doc.querySelector('.game-container') || doc.body;
        
        gameContainer.innerHTML = gameContent.innerHTML;
        
        // Run performance monitoring
        startPerformanceMonitoring('Three.js Original');
        
      } catch (error) {
        console.error('Failed to load Three.js version:', error);
        showResults('Three.js Original', { error: error.message });
      }
    });

    // Test Threlte version
    document.getElementById('test-threlte').addEventListener('click', async () => {
      console.log('ðŸ§ª Loading Threlte version...');
      clearContainer();
      
      try {
        // Load the Threlte game
        const response = await fetch('/threlte-game');
        const html = await response.text();
        
        // Extract just the game content
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        const gameContent = doc.querySelector('.game-container') || doc.body;
        
        gameContainer.innerHTML = gameContent.innerHTML;
        
        // Run performance monitoring
        startPerformanceMonitoring('Threlte Version');
        
      } catch (error) {
        console.error('Failed to load Threlte version:', error);
        showResults('Threlte Version', { error: error.message });
      }
    });

    // Run full benchmark
    document.getElementById('run-benchmark').addEventListener('click', () => {
      console.log('ðŸš€ Starting full benchmark suite...');
      loadBenchmarkSuite();
    });

    // Toggle performance panel
    document.getElementById('toggle-performance').addEventListener('click', () => {
      performancePanelVisible = !performancePanelVisible;
      
      if (performancePanelVisible) {
        // Try to show performance panel in current game
        window.dispatchEvent(new CustomEvent('togglePerformancePanel'));
      }
    });

    // Close benchmark modal
    document.getElementById('close-benchmark').addEventListener('click', () => {
      benchmarkModal.classList.add('hidden');
      benchmarkModal.classList.remove('flex');
    });

    function clearContainer() {
      gameContainer.innerHTML = '<div class="flex items-center justify-center h-full text-gray-400">Loading...</div>';
      resultsPanel.style.display = 'none';
    }

    function startPerformanceMonitoring(testName) {
      currentTest = testName;
      const startTime = performance.now();
      let frameCount = 0;
      let totalFrameTime = 0;
      let minFPS = Infinity;
      let maxFPS = 0;
      
      // Monitor for 10 seconds
      const monitoringDuration = 10000;
      const sampleInterval = 100; // Sample every 100ms
      
      const monitor = setInterval(() => {
        const currentTime = performance.now();
        const deltaTime = currentTime - (monitor.lastTime || currentTime);
        monitor.lastTime = currentTime;
        
        const fps = 1000 / deltaTime;
        frameCount++;
        totalFrameTime += deltaTime;
        
        minFPS = Math.min(minFPS, fps);
        maxFPS = Math.max(maxFPS, fps);
        
        // Update live display
        updateLiveResults(testName, {
          avgFPS: (frameCount * 1000) / (currentTime - startTime),
          minFPS,
          maxFPS,
          frameCount,
          elapsed: (currentTime - startTime) / 1000
        });
        
        if (currentTime - startTime >= monitoringDuration) {
          clearInterval(monitor);
          
          const results = {
            testName,
            duration: monitoringDuration,
            frameCount,
            avgFPS: (frameCount * 1000) / monitoringDuration,
            minFPS,
            maxFPS,
            avgFrameTime: totalFrameTime / frameCount,
            memoryInfo: getMemoryInfo()
          };
          
          showResults(testName, results);
        }
      }, sampleInterval);
    }

    function updateLiveResults(testName, data) {
      resultsPanel.style.display = 'block';
      resultsContent.innerHTML = `
        <div class="space-y-2">
          <div class="font-bold text-green-400">${testName}</div>
          <div>Avg FPS: <span class="text-yellow-400">${data.avgFPS.toFixed(1)}</span></div>
          <div>Min FPS: <span class="text-red-400">${data.minFPS.toFixed(1)}</span></div>
          <div>Max FPS: <span class="text-green-400">${data.maxFPS.toFixed(1)}</span></div>
          <div>Frames: <span class="text-blue-400">${data.frameCount}</span></div>
          <div>Elapsed: <span class="text-gray-400">${data.elapsed.toFixed(1)}s</span></div>
        </div>
      `;
    }

    function showResults(testName, results) {
      console.log(`ðŸ“Š ${testName} Results:`, results);
      
      resultsPanel.style.display = 'block';
      
      if (results.error) {
        resultsContent.innerHTML = `
          <div class="space-y-2">
            <div class="font-bold text-red-400">${testName}</div>
            <div class="text-red-300">Error: ${results.error}</div>
          </div>
        `;
        return;
      }
      
      resultsContent.innerHTML = `
        <div class="space-y-2">
          <div class="font-bold text-green-400">${testName}</div>
          <div>Duration: <span class="text-gray-400">${(results.duration / 1000).toFixed(1)}s</span></div>
          <div>Avg FPS: <span class="text-yellow-400">${results.avgFPS.toFixed(1)}</span></div>
          <div>Min FPS: <span class="text-red-400">${results.minFPS.toFixed(1)}</span></div>
          <div>Max FPS: <span class="text-green-400">${results.maxFPS.toFixed(1)}</span></div>
          <div>Avg Frame Time: <span class="text-blue-400">${results.avgFrameTime.toFixed(2)}ms</span></div>
          <div>Total Frames: <span class="text-purple-400">${results.frameCount}</span></div>
          ${results.memoryInfo ? `
            <div class="mt-2 pt-2 border-t border-gray-600">
              <div class="text-xs text-gray-400">Memory:</div>
              <div class="text-xs">Used: ${(results.memoryInfo.usedJSHeapSize / 1024 / 1024).toFixed(1)}MB</div>
              <div class="text-xs">Total: ${(results.memoryInfo.totalJSHeapSize / 1024 / 1024).toFixed(1)}MB</div>
            </div>
          ` : ''}
        </div>
      `;
    }

    function getMemoryInfo() {
      if (performance.memory) {
        return {
          usedJSHeapSize: performance.memory.usedJSHeapSize,
          totalJSHeapSize: performance.memory.totalJSHeapSize,
          jsHeapSizeLimit: performance.memory.jsHeapSizeLimit
        };
      }
      return null;
    }

    async function loadBenchmarkSuite() {
      benchmarkModal.classList.remove('hidden');
      benchmarkModal.classList.add('flex');
      
      // Load benchmark component
      benchmarkContent.innerHTML = `
        <div class="text-center">
          <div class="animate-spin inline-block w-8 h-8 border-4 border-current border-t-transparent text-blue-600 rounded-full"></div>
          <p class="mt-2">Loading benchmark suite...</p>
        </div>
      `;
      
      try {
        // This would load the actual benchmark component
        // For now, we'll show a placeholder
        setTimeout(() => {
          benchmarkContent.innerHTML = `
            <div class="space-y-4">
              <p>ðŸš§ Full benchmark suite coming soon!</p>
              <p>This will include:</p>
              <ul class="list-disc list-inside space-y-1 text-sm text-gray-300">
                <li>Automated performance testing</li>
                <li>Memory usage analysis</li>
                <li>Frame rate stability tests</li>
                <li>Quality level benchmarking</li>
                <li>Mobile vs Desktop comparison</li>
                <li>Three.js vs Threlte comparison</li>
              </ul>
              <p class="text-sm text-gray-400">Use the individual test buttons above to compare versions manually.</p>
            </div>
          `;
        }, 1000);
      } catch (error) {
        benchmarkContent.innerHTML = `
          <div class="text-red-400">
            Failed to load benchmark suite: ${error.message}
          </div>
        `;
      }
    }

    // Initialize
    console.log('ðŸ§ª Performance test page loaded');
    console.log('Available tests: Three.js Original, Threlte Version');
  </script>
</Layout>