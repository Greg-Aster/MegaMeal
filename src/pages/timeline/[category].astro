---
import MainGridLayout from '../../layouts/MainGridLayout.astro';
import { siteConfig } from '../../config';
import TimelineController from '../../components/timeline/TimelineController.astro';
import TimelineNavigation from '../../components/timeline/TimelineNavigation.astro';
import WidgetLayout from '../../components/widget/WidgetLayout.astro';
import { Icon } from 'astro-icon/components';
import { getTimelineEvents, getTimelineStatistics } from '../../services/TimelineService';

export async function getStaticPaths() {
  const allTimelineEvents = await getTimelineEvents();
  
  // Filter out any undefined or null categories and ensure they're strings
  const categories = allTimelineEvents
    .map(event => event.category)
    .filter((category): category is string => 
      category !== undefined && 
      category !== null && 
      typeof category === 'string'
    );
  
  // Create a Set to remove duplicates
  const uniqueCategories = [...new Set(categories)];
  
  // Map each category to a route parameter and props
  return uniqueCategories.map(category => ({
    params: { category: category.toLowerCase().replace(/\s+/g, '-') },
    props: { categoryName: category }
  }));
}

const { categoryName } = Astro.props;

// Get timeline data for this category
const categoryEvents = await getTimelineEvents({ category: categoryName });
const timelineStats = getTimelineStatistics(categoryEvents);

// Page metadata
const title = `${categoryName} Timeline`;
const description = `Explore the chronology of events in the ${categoryName} storyline.`;
---

<MainGridLayout title={title} description={description}>
  <div class="card-base p-8 mb-6">
    <div class="flex items-center mb-4">
      <a href="/timeline" class="btn-plain rounded-md p-2 mr-3">
        <Icon name="material-symbols:arrow-back-rounded" class="text-xl" />
      </a>
      <h1 class="text-3xl font-bold text-90">{categoryName} Timeline</h1>
    </div>
    <p class="text-75 mb-6">{description}</p>
    
    <div class="timeline-stats grid grid-cols-1 sm:grid-cols-3 gap-4 mb-6">
      <div class="stat-card p-4 bg-[oklch(0.95_0.025_var(--hue))] dark:bg-[oklch(0.25_0.025_var(--hue))] rounded-lg">
        <div class="text-[var(--primary)] text-2xl font-bold">{timelineStats.totalEvents}</div>
        <div class="text-50">Timeline Events</div>
      </div>
      
      <div class="stat-card p-4 bg-[oklch(0.95_0.025_var(--hue))] dark:bg-[oklch(0.25_0.025_var(--hue))] rounded-lg">
        <div class="text-[var(--primary)] text-2xl font-bold">{timelineStats.keyEvents}</div>
        <div class="text-50">Key Events</div>
      </div>
      
      <div class="stat-card p-4 bg-[oklch(0.95_0.025_var(--hue))] dark:bg-[oklch(0.25_0.025_var(--hue))] rounded-lg">
        <div class="text-[var(--primary)] text-2xl font-bold">{timelineStats.yearSpan}</div>
        <div class="text-50">Year Span ({timelineStats.minYear} - {timelineStats.maxYear})</div>
      </div>
    </div>
    
    <TimelineController 
      title={`${categoryName} Timeline`} 
      category={categoryName}
      isCollapsed={false}
      compact={false}
    />
  </div>
  
  <WidgetLayout id="timeline-browser" name={`${categoryName} Timeline Navigator`} class="mb-6">
    <div class="timeline-browse-tabs mb-4">
      <div class="flex border-b border-[var(--line-divider)]">
        <button id="list-tab" class="timeline-tab px-4 py-2 border-b-2 border-[var(--primary)] font-bold text-75">
          List View
        </button>
        <button id="tree-tab" class="timeline-tab px-4 py-2 border-b-2 border-transparent text-50">
          Tree View
        </button>
        <button id="map-tab" class="timeline-tab px-4 py-2 border-b-2 border-transparent text-50">
          Map View
        </button>
      </div>
    </div>
    
    <TimelineNavigation category={categoryName} view="list" />
  </div>
  
  <div class="card-base p-6 mb-6">
    <h2 class="font-bold text-xl mb-4 text-75">Key Events in {categoryName}</h2>
    <div class="key-events-list">
      {categoryEvents.filter(event => event.isKeyEvent).map(event => (
        <div class="key-event-card p-4 mb-4 bg-[oklch(0.95_0.025_var(--hue))] dark:bg-[oklch(0.25_0.025_var(--hue))] rounded-lg">
          <div class="flex items-center mb-2">
            <span class="year-badge px-2 py-0.5 bg-[var(--primary)] text-white rounded-md text-sm font-bold mr-2">{event.year}</span>
            <span class="era-badge text-xs py-0.5 px-2 rounded-full bg-[oklch(0.6_0.1_var(--hue))/0.2] text-[oklch(0.4_0.1_var(--hue))] dark:text-[oklch(0.9_0.05_var(--hue))]">
              {event.era ? event.era.replace(/-/g, ' ') : 'unknown'}
            </span>
            <span class="key-event-badge ml-2 text-xs font-bold py-0.5 px-2 rounded-full bg-[var(--primary)] text-white">Key Event</span>
          </div>
          <h3 class="font-bold text-lg text-75 mb-1">{event.title}</h3>
          <p class="text-50 text-sm mb-2">{event.description}</p>
          {event.location && (
            <div class="flex items-center text-xs text-[var(--primary)]">
              <Icon name="material-symbols:location-on" class="h-3 w-3 mr-1" />
              {event.location}
            </div>
          )}
          <div class="mt-4 text-right">
            <a href={`/posts/${event.slug}/`} class="btn-plain rounded-md px-3 py-1 text-sm">Read full story</a>
          </div>
        </div>
      ))}
    </div>
  </div>
  
  <div class="card-base p-6">
    <h2 class="font-bold text-xl mb-4 text-75">Timeline Overview</h2>
    <div class="mb-4">
      <div class="flex items-center mb-2">
        <Icon name="material-symbols:info-outline" class="text-xl text-[var(--primary)] mr-2" />
        <span class="font-bold">First Event:</span>
        <span class="ml-2">{timelineStats.minYear}</span>
      </div>
      <div class="flex items-center mb-2">
        <Icon name="material-symbols:info-outline" class="text-xl text-[var(--primary)] mr-2" />
        <span class="font-bold">Latest Event:</span>
        <span class="ml-2">{timelineStats.maxYear}</span>
      </div>
      <div class="flex items-center">
        <Icon name="material-symbols:info-outline" class="text-xl text-[var(--primary)] mr-2" />
        <span class="font-bold">Eras Covered:</span>
        <span class="ml-2">{timelineStats.eras.length}</span>
      </div>
    </div>
    
    <div class="text-center mt-8">
      <a href="/timeline" class="btn-regular rounded-md px-4 py-2 inline-block">
        <div class="flex items-center">
          <Icon name="material-symbols:arrow-back" class="mr-2" />
          Back to All Timelines
        </div>
      </a>
    </div>
  </div>
</MainGridLayout>

<script>
  // Tab switching logic for timeline view
  document.addEventListener('DOMContentLoaded', function() {
    const tabs = document.querySelectorAll('.timeline-tab');
    
    tabs.forEach(tab => {
      tab.addEventListener('click', function() {
        // Update tab appearance
        tabs.forEach(t => {
          t.classList.remove('border-[var(--primary)]', 'font-bold', 'text-75');
          t.classList.add('border-transparent', 'text-50');
        });
        
        tab.classList.add('border-[var(--primary)]', 'font-bold', 'text-75');
        tab.classList.remove('border-transparent', 'text-50');
        
        // Update view
        const viewType = tab.id.replace('-tab', '');
        
        // Find the timeline-navigation custom element
        const navigation = document.querySelector('timeline-navigation');
        if (navigation) {
          // Find the specific view button within the navigation
          const viewBtn = navigation.querySelector(`.timeline-view-btn[data-view="${viewType}"]`);
          if (viewBtn) {
            (viewBtn as HTMLElement).click();
          }
        }
      });
    });
  });
  
  // For Astro View Transitions
  document.addEventListener('astro:page-load', function() {
    const tabs = document.querySelectorAll('.timeline-tab');
    
    tabs.forEach(tab => {
      tab.addEventListener('click', function() {
        // Update tab appearance
        tabs.forEach(t => {
          t.classList.remove('border-[var(--primary)]', 'font-bold', 'text-75');
          t.classList.add('border-transparent', 'text-50');
        });
        
        tab.classList.add('border-[var(--primary)]', 'font-bold', 'text-75');
        tab.classList.remove('border-transparent', 'text-50');
        
        // Update view
        const viewType = tab.id.replace('-tab', '');
        
        // Find the timeline-navigation custom element
        const navigation = document.querySelector('timeline-navigation');
        if (navigation) {
          // Find the specific view button within the navigation
          const viewBtn = navigation.querySelector(`.timeline-view-btn[data-view="${viewType}"]`);
          if (viewBtn) {
            (viewBtn as HTMLElement).click();
          }
        }
      });
    });
  });
</script>

<style>
  /* Key event card hover effect */
  .key-event-card {
    transition: all 0.3s ease;
  }
  
  .key-event-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  }
  
  /* Capitalize era badges */
  .era-badge {
    text-transform: capitalize;
  }
</style>